/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/ev-emitter/ev-emitter.js
var require_ev_emitter = __commonJS({
  "node_modules/ev-emitter/ev-emitter.js"(exports, module2) {
    (function(global, factory) {
      if (typeof define == "function" && define.amd) {
        define(factory);
      } else if (typeof module2 == "object" && module2.exports) {
        module2.exports = factory();
      } else {
        global.EvEmitter = factory();
      }
    })(typeof window != "undefined" ? window : exports, function() {
      "use strict";
      function EvEmitter() {
      }
      var proto = EvEmitter.prototype;
      proto.on = function(eventName, listener) {
        if (!eventName || !listener) {
          return;
        }
        var events = this._events = this._events || {};
        var listeners = events[eventName] = events[eventName] || [];
        if (listeners.indexOf(listener) == -1) {
          listeners.push(listener);
        }
        return this;
      };
      proto.once = function(eventName, listener) {
        if (!eventName || !listener) {
          return;
        }
        this.on(eventName, listener);
        var onceEvents = this._onceEvents = this._onceEvents || {};
        var onceListeners = onceEvents[eventName] = onceEvents[eventName] || {};
        onceListeners[listener] = true;
        return this;
      };
      proto.off = function(eventName, listener) {
        var listeners = this._events && this._events[eventName];
        if (!listeners || !listeners.length) {
          return;
        }
        var index = listeners.indexOf(listener);
        if (index != -1) {
          listeners.splice(index, 1);
        }
        return this;
      };
      proto.emitEvent = function(eventName, args) {
        var listeners = this._events && this._events[eventName];
        if (!listeners || !listeners.length) {
          return;
        }
        listeners = listeners.slice(0);
        args = args || [];
        var onceListeners = this._onceEvents && this._onceEvents[eventName];
        for (var i = 0; i < listeners.length; i++) {
          var listener = listeners[i];
          var isOnce = onceListeners && onceListeners[listener];
          if (isOnce) {
            this.off(eventName, listener);
            delete onceListeners[listener];
          }
          listener.apply(this, args);
        }
        return this;
      };
      proto.allOff = function() {
        delete this._events;
        delete this._onceEvents;
      };
      return EvEmitter;
    });
  }
});

// node_modules/get-size/get-size.js
var require_get_size = __commonJS({
  "node_modules/get-size/get-size.js"(exports, module2) {
    (function(window2, factory) {
      if (typeof define == "function" && define.amd) {
        define(factory);
      } else if (typeof module2 == "object" && module2.exports) {
        module2.exports = factory();
      } else {
        window2.getSize = factory();
      }
    })(window, function factory() {
      "use strict";
      function getStyleSize(value) {
        var num = parseFloat(value);
        var isValid = value.indexOf("%") == -1 && !isNaN(num);
        return isValid && num;
      }
      function noop() {
      }
      var logError = typeof console == "undefined" ? noop : function(message) {
        console.error(message);
      };
      var measurements = [
        "paddingLeft",
        "paddingRight",
        "paddingTop",
        "paddingBottom",
        "marginLeft",
        "marginRight",
        "marginTop",
        "marginBottom",
        "borderLeftWidth",
        "borderRightWidth",
        "borderTopWidth",
        "borderBottomWidth"
      ];
      var measurementsLength = measurements.length;
      function getZeroSize() {
        var size = {
          width: 0,
          height: 0,
          innerWidth: 0,
          innerHeight: 0,
          outerWidth: 0,
          outerHeight: 0
        };
        for (var i = 0; i < measurementsLength; i++) {
          var measurement = measurements[i];
          size[measurement] = 0;
        }
        return size;
      }
      function getStyle(elem) {
        var style = getComputedStyle(elem);
        if (!style) {
          logError("Style returned " + style + ". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1");
        }
        return style;
      }
      var isSetup = false;
      var isBoxSizeOuter;
      function setup() {
        if (isSetup) {
          return;
        }
        isSetup = true;
        var div = document.createElement("div");
        div.style.width = "200px";
        div.style.padding = "1px 2px 3px 4px";
        div.style.borderStyle = "solid";
        div.style.borderWidth = "1px 2px 3px 4px";
        div.style.boxSizing = "border-box";
        var body = document.body || document.documentElement;
        body.appendChild(div);
        var style = getStyle(div);
        isBoxSizeOuter = Math.round(getStyleSize(style.width)) == 200;
        getSize.isBoxSizeOuter = isBoxSizeOuter;
        body.removeChild(div);
      }
      function getSize(elem) {
        setup();
        if (typeof elem == "string") {
          elem = document.querySelector(elem);
        }
        if (!elem || typeof elem != "object" || !elem.nodeType) {
          return;
        }
        var style = getStyle(elem);
        if (style.display == "none") {
          return getZeroSize();
        }
        var size = {};
        size.width = elem.offsetWidth;
        size.height = elem.offsetHeight;
        var isBorderBox = size.isBorderBox = style.boxSizing == "border-box";
        for (var i = 0; i < measurementsLength; i++) {
          var measurement = measurements[i];
          var value = style[measurement];
          var num = parseFloat(value);
          size[measurement] = !isNaN(num) ? num : 0;
        }
        var paddingWidth = size.paddingLeft + size.paddingRight;
        var paddingHeight = size.paddingTop + size.paddingBottom;
        var marginWidth = size.marginLeft + size.marginRight;
        var marginHeight = size.marginTop + size.marginBottom;
        var borderWidth = size.borderLeftWidth + size.borderRightWidth;
        var borderHeight = size.borderTopWidth + size.borderBottomWidth;
        var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;
        var styleWidth = getStyleSize(style.width);
        if (styleWidth !== false) {
          size.width = styleWidth + // add padding and border unless it's already including it
          (isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth);
        }
        var styleHeight = getStyleSize(style.height);
        if (styleHeight !== false) {
          size.height = styleHeight + // add padding and border unless it's already including it
          (isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight);
        }
        size.innerWidth = size.width - (paddingWidth + borderWidth);
        size.innerHeight = size.height - (paddingHeight + borderHeight);
        size.outerWidth = size.width + marginWidth;
        size.outerHeight = size.height + marginHeight;
        return size;
      }
      return getSize;
    });
  }
});

// node_modules/desandro-matches-selector/matches-selector.js
var require_matches_selector = __commonJS({
  "node_modules/desandro-matches-selector/matches-selector.js"(exports, module2) {
    (function(window2, factory) {
      "use strict";
      if (typeof define == "function" && define.amd) {
        define(factory);
      } else if (typeof module2 == "object" && module2.exports) {
        module2.exports = factory();
      } else {
        window2.matchesSelector = factory();
      }
    })(window, function factory() {
      "use strict";
      var matchesMethod = function() {
        var ElemProto = window.Element.prototype;
        if (ElemProto.matches) {
          return "matches";
        }
        if (ElemProto.matchesSelector) {
          return "matchesSelector";
        }
        var prefixes = ["webkit", "moz", "ms", "o"];
        for (var i = 0; i < prefixes.length; i++) {
          var prefix = prefixes[i];
          var method = prefix + "MatchesSelector";
          if (ElemProto[method]) {
            return method;
          }
        }
      }();
      return function matchesSelector(elem, selector) {
        return elem[matchesMethod](selector);
      };
    });
  }
});

// node_modules/fizzy-ui-utils/utils.js
var require_utils = __commonJS({
  "node_modules/fizzy-ui-utils/utils.js"(exports, module2) {
    (function(window2, factory) {
      if (typeof define == "function" && define.amd) {
        define([
          "desandro-matches-selector/matches-selector"
        ], function(matchesSelector) {
          return factory(window2, matchesSelector);
        });
      } else if (typeof module2 == "object" && module2.exports) {
        module2.exports = factory(
          window2,
          require_matches_selector()
        );
      } else {
        window2.fizzyUIUtils = factory(
          window2,
          window2.matchesSelector
        );
      }
    })(window, function factory(window2, matchesSelector) {
      "use strict";
      var utils = {};
      utils.extend = function(a, b) {
        for (var prop in b) {
          a[prop] = b[prop];
        }
        return a;
      };
      utils.modulo = function(num, div) {
        return (num % div + div) % div;
      };
      var arraySlice = Array.prototype.slice;
      utils.makeArray = function(obj) {
        if (Array.isArray(obj)) {
          return obj;
        }
        if (obj === null || obj === void 0) {
          return [];
        }
        var isArrayLike = typeof obj == "object" && typeof obj.length == "number";
        if (isArrayLike) {
          return arraySlice.call(obj);
        }
        return [obj];
      };
      utils.removeFrom = function(ary, obj) {
        var index = ary.indexOf(obj);
        if (index != -1) {
          ary.splice(index, 1);
        }
      };
      utils.getParent = function(elem, selector) {
        while (elem.parentNode && elem != document.body) {
          elem = elem.parentNode;
          if (matchesSelector(elem, selector)) {
            return elem;
          }
        }
      };
      utils.getQueryElement = function(elem) {
        if (typeof elem == "string") {
          return document.querySelector(elem);
        }
        return elem;
      };
      utils.handleEvent = function(event) {
        var method = "on" + event.type;
        if (this[method]) {
          this[method](event);
        }
      };
      utils.filterFindElements = function(elems, selector) {
        elems = utils.makeArray(elems);
        var ffElems = [];
        elems.forEach(function(elem) {
          if (!(elem instanceof HTMLElement)) {
            return;
          }
          if (!selector) {
            ffElems.push(elem);
            return;
          }
          if (matchesSelector(elem, selector)) {
            ffElems.push(elem);
          }
          var childElems = elem.querySelectorAll(selector);
          for (var i = 0; i < childElems.length; i++) {
            ffElems.push(childElems[i]);
          }
        });
        return ffElems;
      };
      utils.debounceMethod = function(_class, methodName, threshold) {
        threshold = threshold || 100;
        var method = _class.prototype[methodName];
        var timeoutName = methodName + "Timeout";
        _class.prototype[methodName] = function() {
          var timeout = this[timeoutName];
          clearTimeout(timeout);
          var args = arguments;
          var _this = this;
          this[timeoutName] = setTimeout(function() {
            method.apply(_this, args);
            delete _this[timeoutName];
          }, threshold);
        };
      };
      utils.docReady = function(callback) {
        var readyState = document.readyState;
        if (readyState == "complete" || readyState == "interactive") {
          setTimeout(callback);
        } else {
          document.addEventListener("DOMContentLoaded", callback);
        }
      };
      utils.toDashed = function(str) {
        return str.replace(/(.)([A-Z])/g, function(match, $1, $2) {
          return $1 + "-" + $2;
        }).toLowerCase();
      };
      var console2 = window2.console;
      utils.htmlInit = function(WidgetClass, namespace) {
        utils.docReady(function() {
          var dashedNamespace = utils.toDashed(namespace);
          var dataAttr = "data-" + dashedNamespace;
          var dataAttrElems = document.querySelectorAll("[" + dataAttr + "]");
          var jsDashElems = document.querySelectorAll(".js-" + dashedNamespace);
          var elems = utils.makeArray(dataAttrElems).concat(utils.makeArray(jsDashElems));
          var dataOptionsAttr = dataAttr + "-options";
          var jQuery = window2.jQuery;
          elems.forEach(function(elem) {
            var attr = elem.getAttribute(dataAttr) || elem.getAttribute(dataOptionsAttr);
            var options;
            try {
              options = attr && JSON.parse(attr);
            } catch (error) {
              if (console2) {
                console2.error("Error parsing " + dataAttr + " on " + elem.className + ": " + error);
              }
              return;
            }
            var instance = new WidgetClass(elem, options);
            if (jQuery) {
              jQuery.data(elem, namespace, instance);
            }
          });
        });
      };
      return utils;
    });
  }
});

// node_modules/outlayer/item.js
var require_item = __commonJS({
  "node_modules/outlayer/item.js"(exports, module2) {
    (function(window2, factory) {
      if (typeof define == "function" && define.amd) {
        define(
          [
            "ev-emitter/ev-emitter",
            "get-size/get-size"
          ],
          factory
        );
      } else if (typeof module2 == "object" && module2.exports) {
        module2.exports = factory(
          require_ev_emitter(),
          require_get_size()
        );
      } else {
        window2.Outlayer = {};
        window2.Outlayer.Item = factory(
          window2.EvEmitter,
          window2.getSize
        );
      }
    })(window, function factory(EvEmitter, getSize) {
      "use strict";
      function isEmptyObj(obj) {
        for (var prop in obj) {
          return false;
        }
        prop = null;
        return true;
      }
      var docElemStyle = document.documentElement.style;
      var transitionProperty = typeof docElemStyle.transition == "string" ? "transition" : "WebkitTransition";
      var transformProperty = typeof docElemStyle.transform == "string" ? "transform" : "WebkitTransform";
      var transitionEndEvent = {
        WebkitTransition: "webkitTransitionEnd",
        transition: "transitionend"
      }[transitionProperty];
      var vendorProperties = {
        transform: transformProperty,
        transition: transitionProperty,
        transitionDuration: transitionProperty + "Duration",
        transitionProperty: transitionProperty + "Property",
        transitionDelay: transitionProperty + "Delay"
      };
      function Item(element, layout) {
        if (!element) {
          return;
        }
        this.element = element;
        this.layout = layout;
        this.position = {
          x: 0,
          y: 0
        };
        this._create();
      }
      var proto = Item.prototype = Object.create(EvEmitter.prototype);
      proto.constructor = Item;
      proto._create = function() {
        this._transn = {
          ingProperties: {},
          clean: {},
          onEnd: {}
        };
        this.css({
          position: "absolute"
        });
      };
      proto.handleEvent = function(event) {
        var method = "on" + event.type;
        if (this[method]) {
          this[method](event);
        }
      };
      proto.getSize = function() {
        this.size = getSize(this.element);
      };
      proto.css = function(style) {
        var elemStyle = this.element.style;
        for (var prop in style) {
          var supportedProp = vendorProperties[prop] || prop;
          elemStyle[supportedProp] = style[prop];
        }
      };
      proto.getPosition = function() {
        var style = getComputedStyle(this.element);
        var isOriginLeft = this.layout._getOption("originLeft");
        var isOriginTop = this.layout._getOption("originTop");
        var xValue = style[isOriginLeft ? "left" : "right"];
        var yValue = style[isOriginTop ? "top" : "bottom"];
        var x = parseFloat(xValue);
        var y = parseFloat(yValue);
        var layoutSize = this.layout.size;
        if (xValue.indexOf("%") != -1) {
          x = x / 100 * layoutSize.width;
        }
        if (yValue.indexOf("%") != -1) {
          y = y / 100 * layoutSize.height;
        }
        x = isNaN(x) ? 0 : x;
        y = isNaN(y) ? 0 : y;
        x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;
        y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;
        this.position.x = x;
        this.position.y = y;
      };
      proto.layoutPosition = function() {
        var layoutSize = this.layout.size;
        var style = {};
        var isOriginLeft = this.layout._getOption("originLeft");
        var isOriginTop = this.layout._getOption("originTop");
        var xPadding = isOriginLeft ? "paddingLeft" : "paddingRight";
        var xProperty = isOriginLeft ? "left" : "right";
        var xResetProperty = isOriginLeft ? "right" : "left";
        var x = this.position.x + layoutSize[xPadding];
        style[xProperty] = this.getXValue(x);
        style[xResetProperty] = "";
        var yPadding = isOriginTop ? "paddingTop" : "paddingBottom";
        var yProperty = isOriginTop ? "top" : "bottom";
        var yResetProperty = isOriginTop ? "bottom" : "top";
        var y = this.position.y + layoutSize[yPadding];
        style[yProperty] = this.getYValue(y);
        style[yResetProperty] = "";
        this.css(style);
        this.emitEvent("layout", [this]);
      };
      proto.getXValue = function(x) {
        var isHorizontal = this.layout._getOption("horizontal");
        return this.layout.options.percentPosition && !isHorizontal ? x / this.layout.size.width * 100 + "%" : x + "px";
      };
      proto.getYValue = function(y) {
        var isHorizontal = this.layout._getOption("horizontal");
        return this.layout.options.percentPosition && isHorizontal ? y / this.layout.size.height * 100 + "%" : y + "px";
      };
      proto._transitionTo = function(x, y) {
        this.getPosition();
        var curX = this.position.x;
        var curY = this.position.y;
        var didNotMove = x == this.position.x && y == this.position.y;
        this.setPosition(x, y);
        if (didNotMove && !this.isTransitioning) {
          this.layoutPosition();
          return;
        }
        var transX = x - curX;
        var transY = y - curY;
        var transitionStyle = {};
        transitionStyle.transform = this.getTranslate(transX, transY);
        this.transition({
          to: transitionStyle,
          onTransitionEnd: {
            transform: this.layoutPosition
          },
          isCleaning: true
        });
      };
      proto.getTranslate = function(x, y) {
        var isOriginLeft = this.layout._getOption("originLeft");
        var isOriginTop = this.layout._getOption("originTop");
        x = isOriginLeft ? x : -x;
        y = isOriginTop ? y : -y;
        return "translate3d(" + x + "px, " + y + "px, 0)";
      };
      proto.goTo = function(x, y) {
        this.setPosition(x, y);
        this.layoutPosition();
      };
      proto.moveTo = proto._transitionTo;
      proto.setPosition = function(x, y) {
        this.position.x = parseFloat(x);
        this.position.y = parseFloat(y);
      };
      proto._nonTransition = function(args) {
        this.css(args.to);
        if (args.isCleaning) {
          this._removeStyles(args.to);
        }
        for (var prop in args.onTransitionEnd) {
          args.onTransitionEnd[prop].call(this);
        }
      };
      proto.transition = function(args) {
        if (!parseFloat(this.layout.options.transitionDuration)) {
          this._nonTransition(args);
          return;
        }
        var _transition = this._transn;
        for (var prop in args.onTransitionEnd) {
          _transition.onEnd[prop] = args.onTransitionEnd[prop];
        }
        for (prop in args.to) {
          _transition.ingProperties[prop] = true;
          if (args.isCleaning) {
            _transition.clean[prop] = true;
          }
        }
        if (args.from) {
          this.css(args.from);
          var h = this.element.offsetHeight;
          h = null;
        }
        this.enableTransition(args.to);
        this.css(args.to);
        this.isTransitioning = true;
      };
      function toDashedAll(str) {
        return str.replace(/([A-Z])/g, function($1) {
          return "-" + $1.toLowerCase();
        });
      }
      var transitionProps = "opacity," + toDashedAll(transformProperty);
      proto.enableTransition = function() {
        if (this.isTransitioning) {
          return;
        }
        var duration = this.layout.options.transitionDuration;
        duration = typeof duration == "number" ? duration + "ms" : duration;
        this.css({
          transitionProperty: transitionProps,
          transitionDuration: duration,
          transitionDelay: this.staggerDelay || 0
        });
        this.element.addEventListener(transitionEndEvent, this, false);
      };
      proto.onwebkitTransitionEnd = function(event) {
        this.ontransitionend(event);
      };
      proto.onotransitionend = function(event) {
        this.ontransitionend(event);
      };
      var dashedVendorProperties = {
        "-webkit-transform": "transform"
      };
      proto.ontransitionend = function(event) {
        if (event.target !== this.element) {
          return;
        }
        var _transition = this._transn;
        var propertyName = dashedVendorProperties[event.propertyName] || event.propertyName;
        delete _transition.ingProperties[propertyName];
        if (isEmptyObj(_transition.ingProperties)) {
          this.disableTransition();
        }
        if (propertyName in _transition.clean) {
          this.element.style[event.propertyName] = "";
          delete _transition.clean[propertyName];
        }
        if (propertyName in _transition.onEnd) {
          var onTransitionEnd = _transition.onEnd[propertyName];
          onTransitionEnd.call(this);
          delete _transition.onEnd[propertyName];
        }
        this.emitEvent("transitionEnd", [this]);
      };
      proto.disableTransition = function() {
        this.removeTransitionStyles();
        this.element.removeEventListener(transitionEndEvent, this, false);
        this.isTransitioning = false;
      };
      proto._removeStyles = function(style) {
        var cleanStyle = {};
        for (var prop in style) {
          cleanStyle[prop] = "";
        }
        this.css(cleanStyle);
      };
      var cleanTransitionStyle = {
        transitionProperty: "",
        transitionDuration: "",
        transitionDelay: ""
      };
      proto.removeTransitionStyles = function() {
        this.css(cleanTransitionStyle);
      };
      proto.stagger = function(delay) {
        delay = isNaN(delay) ? 0 : delay;
        this.staggerDelay = delay + "ms";
      };
      proto.removeElem = function() {
        this.element.parentNode.removeChild(this.element);
        this.css({ display: "" });
        this.emitEvent("remove", [this]);
      };
      proto.remove = function() {
        if (!transitionProperty || !parseFloat(this.layout.options.transitionDuration)) {
          this.removeElem();
          return;
        }
        this.once("transitionEnd", function() {
          this.removeElem();
        });
        this.hide();
      };
      proto.reveal = function() {
        delete this.isHidden;
        this.css({ display: "" });
        var options = this.layout.options;
        var onTransitionEnd = {};
        var transitionEndProperty = this.getHideRevealTransitionEndProperty("visibleStyle");
        onTransitionEnd[transitionEndProperty] = this.onRevealTransitionEnd;
        this.transition({
          from: options.hiddenStyle,
          to: options.visibleStyle,
          isCleaning: true,
          onTransitionEnd
        });
      };
      proto.onRevealTransitionEnd = function() {
        if (!this.isHidden) {
          this.emitEvent("reveal");
        }
      };
      proto.getHideRevealTransitionEndProperty = function(styleProperty) {
        var optionStyle = this.layout.options[styleProperty];
        if (optionStyle.opacity) {
          return "opacity";
        }
        for (var prop in optionStyle) {
          return prop;
        }
      };
      proto.hide = function() {
        this.isHidden = true;
        this.css({ display: "" });
        var options = this.layout.options;
        var onTransitionEnd = {};
        var transitionEndProperty = this.getHideRevealTransitionEndProperty("hiddenStyle");
        onTransitionEnd[transitionEndProperty] = this.onHideTransitionEnd;
        this.transition({
          from: options.visibleStyle,
          to: options.hiddenStyle,
          // keep hidden stuff hidden
          isCleaning: true,
          onTransitionEnd
        });
      };
      proto.onHideTransitionEnd = function() {
        if (this.isHidden) {
          this.css({ display: "none" });
          this.emitEvent("hide");
        }
      };
      proto.destroy = function() {
        this.css({
          position: "",
          left: "",
          right: "",
          top: "",
          bottom: "",
          transition: "",
          transform: ""
        });
      };
      return Item;
    });
  }
});

// node_modules/outlayer/outlayer.js
var require_outlayer = __commonJS({
  "node_modules/outlayer/outlayer.js"(exports, module2) {
    (function(window2, factory) {
      "use strict";
      if (typeof define == "function" && define.amd) {
        define(
          [
            "ev-emitter/ev-emitter",
            "get-size/get-size",
            "fizzy-ui-utils/utils",
            "./item"
          ],
          function(EvEmitter, getSize, utils, Item) {
            return factory(window2, EvEmitter, getSize, utils, Item);
          }
        );
      } else if (typeof module2 == "object" && module2.exports) {
        module2.exports = factory(
          window2,
          require_ev_emitter(),
          require_get_size(),
          require_utils(),
          require_item()
        );
      } else {
        window2.Outlayer = factory(
          window2,
          window2.EvEmitter,
          window2.getSize,
          window2.fizzyUIUtils,
          window2.Outlayer.Item
        );
      }
    })(window, function factory(window2, EvEmitter, getSize, utils, Item) {
      "use strict";
      var console2 = window2.console;
      var jQuery = window2.jQuery;
      var noop = function() {
      };
      var GUID = 0;
      var instances = {};
      function Outlayer(element, options) {
        var queryElement = utils.getQueryElement(element);
        if (!queryElement) {
          if (console2) {
            console2.error("Bad element for " + this.constructor.namespace + ": " + (queryElement || element));
          }
          return;
        }
        this.element = queryElement;
        if (jQuery) {
          this.$element = jQuery(this.element);
        }
        this.options = utils.extend({}, this.constructor.defaults);
        this.option(options);
        var id = ++GUID;
        this.element.outlayerGUID = id;
        instances[id] = this;
        this._create();
        var isInitLayout = this._getOption("initLayout");
        if (isInitLayout) {
          this.layout();
        }
      }
      Outlayer.namespace = "outlayer";
      Outlayer.Item = Item;
      Outlayer.defaults = {
        containerStyle: {
          position: "relative"
        },
        initLayout: true,
        originLeft: true,
        originTop: true,
        resize: true,
        resizeContainer: true,
        // item options
        transitionDuration: "0.4s",
        hiddenStyle: {
          opacity: 0,
          transform: "scale(0.001)"
        },
        visibleStyle: {
          opacity: 1,
          transform: "scale(1)"
        }
      };
      var proto = Outlayer.prototype;
      utils.extend(proto, EvEmitter.prototype);
      proto.option = function(opts) {
        utils.extend(this.options, opts);
      };
      proto._getOption = function(option) {
        var oldOption = this.constructor.compatOptions[option];
        return oldOption && this.options[oldOption] !== void 0 ? this.options[oldOption] : this.options[option];
      };
      Outlayer.compatOptions = {
        // currentName: oldName
        initLayout: "isInitLayout",
        horizontal: "isHorizontal",
        layoutInstant: "isLayoutInstant",
        originLeft: "isOriginLeft",
        originTop: "isOriginTop",
        resize: "isResizeBound",
        resizeContainer: "isResizingContainer"
      };
      proto._create = function() {
        this.reloadItems();
        this.stamps = [];
        this.stamp(this.options.stamp);
        utils.extend(this.element.style, this.options.containerStyle);
        var canBindResize = this._getOption("resize");
        if (canBindResize) {
          this.bindResize();
        }
      };
      proto.reloadItems = function() {
        this.items = this._itemize(this.element.children);
      };
      proto._itemize = function(elems) {
        var itemElems = this._filterFindItemElements(elems);
        var Item2 = this.constructor.Item;
        var items = [];
        for (var i = 0; i < itemElems.length; i++) {
          var elem = itemElems[i];
          var item = new Item2(elem, this);
          items.push(item);
        }
        return items;
      };
      proto._filterFindItemElements = function(elems) {
        return utils.filterFindElements(elems, this.options.itemSelector);
      };
      proto.getItemElements = function() {
        return this.items.map(function(item) {
          return item.element;
        });
      };
      proto.layout = function() {
        this._resetLayout();
        this._manageStamps();
        var layoutInstant = this._getOption("layoutInstant");
        var isInstant = layoutInstant !== void 0 ? layoutInstant : !this._isLayoutInited;
        this.layoutItems(this.items, isInstant);
        this._isLayoutInited = true;
      };
      proto._init = proto.layout;
      proto._resetLayout = function() {
        this.getSize();
      };
      proto.getSize = function() {
        this.size = getSize(this.element);
      };
      proto._getMeasurement = function(measurement, size) {
        var option = this.options[measurement];
        var elem;
        if (!option) {
          this[measurement] = 0;
        } else {
          if (typeof option == "string") {
            elem = this.element.querySelector(option);
          } else if (option instanceof HTMLElement) {
            elem = option;
          }
          this[measurement] = elem ? getSize(elem)[size] : option;
        }
      };
      proto.layoutItems = function(items, isInstant) {
        items = this._getItemsForLayout(items);
        this._layoutItems(items, isInstant);
        this._postLayout();
      };
      proto._getItemsForLayout = function(items) {
        return items.filter(function(item) {
          return !item.isIgnored;
        });
      };
      proto._layoutItems = function(items, isInstant) {
        this._emitCompleteOnItems("layout", items);
        if (!items || !items.length) {
          return;
        }
        var queue = [];
        items.forEach(function(item) {
          var position = this._getItemLayoutPosition(item);
          position.item = item;
          position.isInstant = isInstant || item.isLayoutInstant;
          queue.push(position);
        }, this);
        this._processLayoutQueue(queue);
      };
      proto._getItemLayoutPosition = function() {
        return {
          x: 0,
          y: 0
        };
      };
      proto._processLayoutQueue = function(queue) {
        this.updateStagger();
        queue.forEach(function(obj, i) {
          this._positionItem(obj.item, obj.x, obj.y, obj.isInstant, i);
        }, this);
      };
      proto.updateStagger = function() {
        var stagger = this.options.stagger;
        if (stagger === null || stagger === void 0) {
          this.stagger = 0;
          return;
        }
        this.stagger = getMilliseconds(stagger);
        return this.stagger;
      };
      proto._positionItem = function(item, x, y, isInstant, i) {
        if (isInstant) {
          item.goTo(x, y);
        } else {
          item.stagger(i * this.stagger);
          item.moveTo(x, y);
        }
      };
      proto._postLayout = function() {
        this.resizeContainer();
      };
      proto.resizeContainer = function() {
        var isResizingContainer = this._getOption("resizeContainer");
        if (!isResizingContainer) {
          return;
        }
        var size = this._getContainerSize();
        if (size) {
          this._setContainerMeasure(size.width, true);
          this._setContainerMeasure(size.height, false);
        }
      };
      proto._getContainerSize = noop;
      proto._setContainerMeasure = function(measure, isWidth) {
        if (measure === void 0) {
          return;
        }
        var elemSize = this.size;
        if (elemSize.isBorderBox) {
          measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight + elemSize.borderLeftWidth + elemSize.borderRightWidth : elemSize.paddingBottom + elemSize.paddingTop + elemSize.borderTopWidth + elemSize.borderBottomWidth;
        }
        measure = Math.max(measure, 0);
        this.element.style[isWidth ? "width" : "height"] = measure + "px";
      };
      proto._emitCompleteOnItems = function(eventName, items) {
        var _this = this;
        function onComplete() {
          _this.dispatchEvent(eventName + "Complete", null, [items]);
        }
        var count = items.length;
        if (!items || !count) {
          onComplete();
          return;
        }
        var doneCount = 0;
        function tick() {
          doneCount++;
          if (doneCount == count) {
            onComplete();
          }
        }
        items.forEach(function(item) {
          item.once(eventName, tick);
        });
      };
      proto.dispatchEvent = function(type, event, args) {
        var emitArgs = event ? [event].concat(args) : args;
        this.emitEvent(type, emitArgs);
        if (jQuery) {
          this.$element = this.$element || jQuery(this.element);
          if (event) {
            var $event = jQuery.Event(event);
            $event.type = type;
            this.$element.trigger($event, args);
          } else {
            this.$element.trigger(type, args);
          }
        }
      };
      proto.ignore = function(elem) {
        var item = this.getItem(elem);
        if (item) {
          item.isIgnored = true;
        }
      };
      proto.unignore = function(elem) {
        var item = this.getItem(elem);
        if (item) {
          delete item.isIgnored;
        }
      };
      proto.stamp = function(elems) {
        elems = this._find(elems);
        if (!elems) {
          return;
        }
        this.stamps = this.stamps.concat(elems);
        elems.forEach(this.ignore, this);
      };
      proto.unstamp = function(elems) {
        elems = this._find(elems);
        if (!elems) {
          return;
        }
        elems.forEach(function(elem) {
          utils.removeFrom(this.stamps, elem);
          this.unignore(elem);
        }, this);
      };
      proto._find = function(elems) {
        if (!elems) {
          return;
        }
        if (typeof elems == "string") {
          elems = this.element.querySelectorAll(elems);
        }
        elems = utils.makeArray(elems);
        return elems;
      };
      proto._manageStamps = function() {
        if (!this.stamps || !this.stamps.length) {
          return;
        }
        this._getBoundingRect();
        this.stamps.forEach(this._manageStamp, this);
      };
      proto._getBoundingRect = function() {
        var boundingRect = this.element.getBoundingClientRect();
        var size = this.size;
        this._boundingRect = {
          left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,
          top: boundingRect.top + size.paddingTop + size.borderTopWidth,
          right: boundingRect.right - (size.paddingRight + size.borderRightWidth),
          bottom: boundingRect.bottom - (size.paddingBottom + size.borderBottomWidth)
        };
      };
      proto._manageStamp = noop;
      proto._getElementOffset = function(elem) {
        var boundingRect = elem.getBoundingClientRect();
        var thisRect = this._boundingRect;
        var size = getSize(elem);
        var offset = {
          left: boundingRect.left - thisRect.left - size.marginLeft,
          top: boundingRect.top - thisRect.top - size.marginTop,
          right: thisRect.right - boundingRect.right - size.marginRight,
          bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom
        };
        return offset;
      };
      proto.handleEvent = utils.handleEvent;
      proto.bindResize = function() {
        window2.addEventListener("resize", this);
        this.isResizeBound = true;
      };
      proto.unbindResize = function() {
        window2.removeEventListener("resize", this);
        this.isResizeBound = false;
      };
      proto.onresize = function() {
        this.resize();
      };
      utils.debounceMethod(Outlayer, "onresize", 100);
      proto.resize = function() {
        if (!this.isResizeBound || !this.needsResizeLayout()) {
          return;
        }
        this.layout();
      };
      proto.needsResizeLayout = function() {
        var size = getSize(this.element);
        var hasSizes = this.size && size;
        return hasSizes && size.innerWidth !== this.size.innerWidth;
      };
      proto.addItems = function(elems) {
        var items = this._itemize(elems);
        if (items.length) {
          this.items = this.items.concat(items);
        }
        return items;
      };
      proto.appended = function(elems) {
        var items = this.addItems(elems);
        if (!items.length) {
          return;
        }
        this.layoutItems(items, true);
        this.reveal(items);
      };
      proto.prepended = function(elems) {
        var items = this._itemize(elems);
        if (!items.length) {
          return;
        }
        var previousItems = this.items.slice(0);
        this.items = items.concat(previousItems);
        this._resetLayout();
        this._manageStamps();
        this.layoutItems(items, true);
        this.reveal(items);
        this.layoutItems(previousItems);
      };
      proto.reveal = function(items) {
        this._emitCompleteOnItems("reveal", items);
        if (!items || !items.length) {
          return;
        }
        var stagger = this.updateStagger();
        items.forEach(function(item, i) {
          item.stagger(i * stagger);
          item.reveal();
        });
      };
      proto.hide = function(items) {
        this._emitCompleteOnItems("hide", items);
        if (!items || !items.length) {
          return;
        }
        var stagger = this.updateStagger();
        items.forEach(function(item, i) {
          item.stagger(i * stagger);
          item.hide();
        });
      };
      proto.revealItemElements = function(elems) {
        var items = this.getItems(elems);
        this.reveal(items);
      };
      proto.hideItemElements = function(elems) {
        var items = this.getItems(elems);
        this.hide(items);
      };
      proto.getItem = function(elem) {
        for (var i = 0; i < this.items.length; i++) {
          var item = this.items[i];
          if (item.element == elem) {
            return item;
          }
        }
      };
      proto.getItems = function(elems) {
        elems = utils.makeArray(elems);
        var items = [];
        elems.forEach(function(elem) {
          var item = this.getItem(elem);
          if (item) {
            items.push(item);
          }
        }, this);
        return items;
      };
      proto.remove = function(elems) {
        var removeItems = this.getItems(elems);
        this._emitCompleteOnItems("remove", removeItems);
        if (!removeItems || !removeItems.length) {
          return;
        }
        removeItems.forEach(function(item) {
          item.remove();
          utils.removeFrom(this.items, item);
        }, this);
      };
      proto.destroy = function() {
        var style = this.element.style;
        style.height = "";
        style.position = "";
        style.width = "";
        this.items.forEach(function(item) {
          item.destroy();
        });
        this.unbindResize();
        var id = this.element.outlayerGUID;
        delete instances[id];
        delete this.element.outlayerGUID;
        if (jQuery) {
          jQuery.removeData(this.element, this.constructor.namespace);
        }
      };
      Outlayer.data = function(elem) {
        elem = utils.getQueryElement(elem);
        var id = elem && elem.outlayerGUID;
        return id && instances[id];
      };
      Outlayer.create = function(namespace, options) {
        var Layout = subclass(Outlayer);
        Layout.defaults = utils.extend({}, Outlayer.defaults);
        utils.extend(Layout.defaults, options);
        Layout.compatOptions = utils.extend({}, Outlayer.compatOptions);
        Layout.namespace = namespace;
        Layout.data = Outlayer.data;
        Layout.Item = subclass(Item);
        utils.htmlInit(Layout, namespace);
        if (jQuery && jQuery.bridget) {
          jQuery.bridget(namespace, Layout);
        }
        return Layout;
      };
      function subclass(Parent) {
        function SubClass() {
          Parent.apply(this, arguments);
        }
        SubClass.prototype = Object.create(Parent.prototype);
        SubClass.prototype.constructor = SubClass;
        return SubClass;
      }
      var msUnits = {
        ms: 1,
        s: 1e3
      };
      function getMilliseconds(time) {
        if (typeof time == "number") {
          return time;
        }
        var matches = time.match(/(^\d*\.?\d*)(\w*)/);
        var num = matches && matches[1];
        var unit = matches && matches[2];
        if (!num.length) {
          return 0;
        }
        num = parseFloat(num);
        var mult = msUnits[unit] || 1;
        return num * mult;
      }
      Outlayer.Item = Item;
      return Outlayer;
    });
  }
});

// node_modules/masonry-layout/masonry.js
var require_masonry = __commonJS({
  "node_modules/masonry-layout/masonry.js"(exports, module2) {
    (function(window2, factory) {
      if (typeof define == "function" && define.amd) {
        define(
          [
            "outlayer/outlayer",
            "get-size/get-size"
          ],
          factory
        );
      } else if (typeof module2 == "object" && module2.exports) {
        module2.exports = factory(
          require_outlayer(),
          require_get_size()
        );
      } else {
        window2.Masonry = factory(
          window2.Outlayer,
          window2.getSize
        );
      }
    })(window, function factory(Outlayer, getSize) {
      "use strict";
      var Masonry2 = Outlayer.create("masonry");
      Masonry2.compatOptions.fitWidth = "isFitWidth";
      var proto = Masonry2.prototype;
      proto._resetLayout = function() {
        this.getSize();
        this._getMeasurement("columnWidth", "outerWidth");
        this._getMeasurement("gutter", "outerWidth");
        this.measureColumns();
        this.colYs = [];
        for (var i = 0; i < this.cols; i++) {
          this.colYs.push(0);
        }
        this.maxY = 0;
        this.horizontalColIndex = 0;
      };
      proto.measureColumns = function() {
        this.getContainerWidth();
        if (!this.columnWidth) {
          var firstItem = this.items[0];
          var firstItemElem = firstItem && firstItem.element;
          this.columnWidth = firstItemElem && getSize(firstItemElem).outerWidth || // if first elem has no width, default to size of container
          this.containerWidth;
        }
        var columnWidth = this.columnWidth += this.gutter;
        var containerWidth = this.containerWidth + this.gutter;
        var cols = containerWidth / columnWidth;
        var excess = columnWidth - containerWidth % columnWidth;
        var mathMethod = excess && excess < 1 ? "round" : "floor";
        cols = Math[mathMethod](cols);
        this.cols = Math.max(cols, 1);
      };
      proto.getContainerWidth = function() {
        var isFitWidth = this._getOption("fitWidth");
        var container = isFitWidth ? this.element.parentNode : this.element;
        var size = getSize(container);
        this.containerWidth = size && size.innerWidth;
      };
      proto._getItemLayoutPosition = function(item) {
        item.getSize();
        var remainder = item.size.outerWidth % this.columnWidth;
        var mathMethod = remainder && remainder < 1 ? "round" : "ceil";
        var colSpan = Math[mathMethod](item.size.outerWidth / this.columnWidth);
        colSpan = Math.min(colSpan, this.cols);
        var colPosMethod = this.options.horizontalOrder ? "_getHorizontalColPosition" : "_getTopColPosition";
        var colPosition = this[colPosMethod](colSpan, item);
        var position = {
          x: this.columnWidth * colPosition.col,
          y: colPosition.y
        };
        var setHeight = colPosition.y + item.size.outerHeight;
        var setMax = colSpan + colPosition.col;
        for (var i = colPosition.col; i < setMax; i++) {
          this.colYs[i] = setHeight;
        }
        return position;
      };
      proto._getTopColPosition = function(colSpan) {
        var colGroup = this._getTopColGroup(colSpan);
        var minimumY = Math.min.apply(Math, colGroup);
        return {
          col: colGroup.indexOf(minimumY),
          y: minimumY
        };
      };
      proto._getTopColGroup = function(colSpan) {
        if (colSpan < 2) {
          return this.colYs;
        }
        var colGroup = [];
        var groupCount = this.cols + 1 - colSpan;
        for (var i = 0; i < groupCount; i++) {
          colGroup[i] = this._getColGroupY(i, colSpan);
        }
        return colGroup;
      };
      proto._getColGroupY = function(col, colSpan) {
        if (colSpan < 2) {
          return this.colYs[col];
        }
        var groupColYs = this.colYs.slice(col, col + colSpan);
        return Math.max.apply(Math, groupColYs);
      };
      proto._getHorizontalColPosition = function(colSpan, item) {
        var col = this.horizontalColIndex % this.cols;
        var isOver = colSpan > 1 && col + colSpan > this.cols;
        col = isOver ? 0 : col;
        var hasSize = item.size.outerWidth && item.size.outerHeight;
        this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;
        return {
          col,
          y: this._getColGroupY(col, colSpan)
        };
      };
      proto._manageStamp = function(stamp) {
        var stampSize = getSize(stamp);
        var offset = this._getElementOffset(stamp);
        var isOriginLeft = this._getOption("originLeft");
        var firstX = isOriginLeft ? offset.left : offset.right;
        var lastX = firstX + stampSize.outerWidth;
        var firstCol = Math.floor(firstX / this.columnWidth);
        firstCol = Math.max(0, firstCol);
        var lastCol = Math.floor(lastX / this.columnWidth);
        lastCol -= lastX % this.columnWidth ? 0 : 1;
        lastCol = Math.min(this.cols - 1, lastCol);
        var isOriginTop = this._getOption("originTop");
        var stampMaxY = (isOriginTop ? offset.top : offset.bottom) + stampSize.outerHeight;
        for (var i = firstCol; i <= lastCol; i++) {
          this.colYs[i] = Math.max(stampMaxY, this.colYs[i]);
        }
      };
      proto._getContainerSize = function() {
        this.maxY = Math.max.apply(Math, this.colYs);
        var size = {
          height: this.maxY
        };
        if (this._getOption("fitWidth")) {
          size.width = this._getContainerFitWidth();
        }
        return size;
      };
      proto._getContainerFitWidth = function() {
        var unusedCols = 0;
        var i = this.cols;
        while (--i) {
          if (this.colYs[i] !== 0) {
            break;
          }
          unusedCols++;
        }
        return (this.cols - unusedCols) * this.columnWidth - this.gutter;
      };
      proto.needsResizeLayout = function() {
        var previousWidth = this.containerWidth;
        this.getContainerWidth();
        return previousWidth != this.containerWidth;
      };
      return Masonry2;
    });
  }
});

// node_modules/imagesloaded/node_modules/ev-emitter/ev-emitter.js
var require_ev_emitter2 = __commonJS({
  "node_modules/imagesloaded/node_modules/ev-emitter/ev-emitter.js"(exports, module2) {
    (function(global, factory) {
      if (typeof module2 == "object" && module2.exports) {
        module2.exports = factory();
      } else {
        global.EvEmitter = factory();
      }
    })(typeof window != "undefined" ? window : exports, function() {
      function EvEmitter() {
      }
      let proto = EvEmitter.prototype;
      proto.on = function(eventName, listener) {
        if (!eventName || !listener)
          return this;
        let events = this._events = this._events || {};
        let listeners = events[eventName] = events[eventName] || [];
        if (!listeners.includes(listener)) {
          listeners.push(listener);
        }
        return this;
      };
      proto.once = function(eventName, listener) {
        if (!eventName || !listener)
          return this;
        this.on(eventName, listener);
        let onceEvents = this._onceEvents = this._onceEvents || {};
        let onceListeners = onceEvents[eventName] = onceEvents[eventName] || {};
        onceListeners[listener] = true;
        return this;
      };
      proto.off = function(eventName, listener) {
        let listeners = this._events && this._events[eventName];
        if (!listeners || !listeners.length)
          return this;
        let index = listeners.indexOf(listener);
        if (index != -1) {
          listeners.splice(index, 1);
        }
        return this;
      };
      proto.emitEvent = function(eventName, args) {
        let listeners = this._events && this._events[eventName];
        if (!listeners || !listeners.length)
          return this;
        listeners = listeners.slice(0);
        args = args || [];
        let onceListeners = this._onceEvents && this._onceEvents[eventName];
        for (let listener of listeners) {
          let isOnce = onceListeners && onceListeners[listener];
          if (isOnce) {
            this.off(eventName, listener);
            delete onceListeners[listener];
          }
          listener.apply(this, args);
        }
        return this;
      };
      proto.allOff = function() {
        delete this._events;
        delete this._onceEvents;
        return this;
      };
      return EvEmitter;
    });
  }
});

// node_modules/imagesloaded/imagesloaded.js
var require_imagesloaded = __commonJS({
  "node_modules/imagesloaded/imagesloaded.js"(exports, module2) {
    (function(window2, factory) {
      if (typeof module2 == "object" && module2.exports) {
        module2.exports = factory(window2, require_ev_emitter2());
      } else {
        window2.imagesLoaded = factory(window2, window2.EvEmitter);
      }
    })(
      typeof window !== "undefined" ? window : exports,
      function factory(window2, EvEmitter) {
        let $ = window2.jQuery;
        let console2 = window2.console;
        function makeArray(obj) {
          if (Array.isArray(obj))
            return obj;
          let isArrayLike = typeof obj == "object" && typeof obj.length == "number";
          if (isArrayLike)
            return [...obj];
          return [obj];
        }
        function ImagesLoaded(elem, options, onAlways) {
          if (!(this instanceof ImagesLoaded)) {
            return new ImagesLoaded(elem, options, onAlways);
          }
          let queryElem = elem;
          if (typeof elem == "string") {
            queryElem = document.querySelectorAll(elem);
          }
          if (!queryElem) {
            console2.error(`Bad element for imagesLoaded ${queryElem || elem}`);
            return;
          }
          this.elements = makeArray(queryElem);
          this.options = {};
          if (typeof options == "function") {
            onAlways = options;
          } else {
            Object.assign(this.options, options);
          }
          if (onAlways)
            this.on("always", onAlways);
          this.getImages();
          if ($)
            this.jqDeferred = new $.Deferred();
          setTimeout(this.check.bind(this));
        }
        ImagesLoaded.prototype = Object.create(EvEmitter.prototype);
        ImagesLoaded.prototype.getImages = function() {
          this.images = [];
          this.elements.forEach(this.addElementImages, this);
        };
        const elementNodeTypes = [1, 9, 11];
        ImagesLoaded.prototype.addElementImages = function(elem) {
          if (elem.nodeName === "IMG") {
            this.addImage(elem);
          }
          if (this.options.background === true) {
            this.addElementBackgroundImages(elem);
          }
          let { nodeType } = elem;
          if (!nodeType || !elementNodeTypes.includes(nodeType))
            return;
          let childImgs = elem.querySelectorAll("img");
          for (let img of childImgs) {
            this.addImage(img);
          }
          if (typeof this.options.background == "string") {
            let children = elem.querySelectorAll(this.options.background);
            for (let child of children) {
              this.addElementBackgroundImages(child);
            }
          }
        };
        const reURL = /url\((['"])?(.*?)\1\)/gi;
        ImagesLoaded.prototype.addElementBackgroundImages = function(elem) {
          let style = getComputedStyle(elem);
          if (!style)
            return;
          let matches = reURL.exec(style.backgroundImage);
          while (matches !== null) {
            let url = matches && matches[2];
            if (url) {
              this.addBackground(url, elem);
            }
            matches = reURL.exec(style.backgroundImage);
          }
        };
        ImagesLoaded.prototype.addImage = function(img) {
          let loadingImage = new LoadingImage(img);
          this.images.push(loadingImage);
        };
        ImagesLoaded.prototype.addBackground = function(url, elem) {
          let background = new Background(url, elem);
          this.images.push(background);
        };
        ImagesLoaded.prototype.check = function() {
          this.progressedCount = 0;
          this.hasAnyBroken = false;
          if (!this.images.length) {
            this.complete();
            return;
          }
          let onProgress = (image, elem, message) => {
            setTimeout(() => {
              this.progress(image, elem, message);
            });
          };
          this.images.forEach(function(loadingImage) {
            loadingImage.once("progress", onProgress);
            loadingImage.check();
          });
        };
        ImagesLoaded.prototype.progress = function(image, elem, message) {
          this.progressedCount++;
          this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
          this.emitEvent("progress", [this, image, elem]);
          if (this.jqDeferred && this.jqDeferred.notify) {
            this.jqDeferred.notify(this, image);
          }
          if (this.progressedCount === this.images.length) {
            this.complete();
          }
          if (this.options.debug && console2) {
            console2.log(`progress: ${message}`, image, elem);
          }
        };
        ImagesLoaded.prototype.complete = function() {
          let eventName = this.hasAnyBroken ? "fail" : "done";
          this.isComplete = true;
          this.emitEvent(eventName, [this]);
          this.emitEvent("always", [this]);
          if (this.jqDeferred) {
            let jqMethod = this.hasAnyBroken ? "reject" : "resolve";
            this.jqDeferred[jqMethod](this);
          }
        };
        function LoadingImage(img) {
          this.img = img;
        }
        LoadingImage.prototype = Object.create(EvEmitter.prototype);
        LoadingImage.prototype.check = function() {
          let isComplete = this.getIsImageComplete();
          if (isComplete) {
            this.confirm(this.img.naturalWidth !== 0, "naturalWidth");
            return;
          }
          this.proxyImage = new Image();
          if (this.img.crossOrigin) {
            this.proxyImage.crossOrigin = this.img.crossOrigin;
          }
          this.proxyImage.addEventListener("load", this);
          this.proxyImage.addEventListener("error", this);
          this.img.addEventListener("load", this);
          this.img.addEventListener("error", this);
          this.proxyImage.src = this.img.currentSrc || this.img.src;
        };
        LoadingImage.prototype.getIsImageComplete = function() {
          return this.img.complete && this.img.naturalWidth;
        };
        LoadingImage.prototype.confirm = function(isLoaded, message) {
          this.isLoaded = isLoaded;
          let { parentNode } = this.img;
          let elem = parentNode.nodeName === "PICTURE" ? parentNode : this.img;
          this.emitEvent("progress", [this, elem, message]);
        };
        LoadingImage.prototype.handleEvent = function(event) {
          let method = "on" + event.type;
          if (this[method]) {
            this[method](event);
          }
        };
        LoadingImage.prototype.onload = function() {
          this.confirm(true, "onload");
          this.unbindEvents();
        };
        LoadingImage.prototype.onerror = function() {
          this.confirm(false, "onerror");
          this.unbindEvents();
        };
        LoadingImage.prototype.unbindEvents = function() {
          this.proxyImage.removeEventListener("load", this);
          this.proxyImage.removeEventListener("error", this);
          this.img.removeEventListener("load", this);
          this.img.removeEventListener("error", this);
        };
        function Background(url, element) {
          this.url = url;
          this.element = element;
          this.img = new Image();
        }
        Background.prototype = Object.create(LoadingImage.prototype);
        Background.prototype.check = function() {
          this.img.addEventListener("load", this);
          this.img.addEventListener("error", this);
          this.img.src = this.url;
          let isComplete = this.getIsImageComplete();
          if (isComplete) {
            this.confirm(this.img.naturalWidth !== 0, "naturalWidth");
            this.unbindEvents();
          }
        };
        Background.prototype.unbindEvents = function() {
          this.img.removeEventListener("load", this);
          this.img.removeEventListener("error", this);
        };
        Background.prototype.confirm = function(isLoaded, message) {
          this.isLoaded = isLoaded;
          this.emitEvent("progress", [this, this.element, message]);
        };
        ImagesLoaded.makeJQueryPlugin = function(jQuery) {
          jQuery = jQuery || window2.jQuery;
          if (!jQuery)
            return;
          $ = jQuery;
          $.fn.imagesLoaded = function(options, onAlways) {
            let instance = new ImagesLoaded(this, options, onAlways);
            return instance.jqDeferred.promise($(this));
          };
        };
        ImagesLoaded.makeJQueryPlugin();
        return ImagesLoaded;
      }
    );
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ProGalleryPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/view/portfolio-gallery.ts
var import_obsidian3 = require("obsidian");

// src/data/page-data.ts
var PageData = class {
  constructor(page = [], settings) {
    this.page = page;
    this.settings = {
      layout: "grid",
      columns: 3,
      showAvatars: true,
      ...settings
      // 覆盖默认
    };
  }
  // 生成唯一 ID（时间戳）
  generateId() {
    const ts = new Date().toISOString().replace(/[-:.TZ]/g, "").slice(0, 14);
    return `blk-${ts}`;
  }
  // 添加一个块
  addBlock(type, content, index) {
    const block = {
      id: this.generateId(),
      type,
      content
    };
    if (index !== void 0 && index >= 0 && index <= this.page.length) {
      this.page.splice(index, 0, block);
    } else {
      this.page.push(block);
    }
    return block;
  }
  // 删除块
  removeBlock(id) {
    const idx = this.page.findIndex((b) => b.id === id);
    if (idx !== -1) {
      this.page.splice(idx, 1);
      return true;
    }
    return false;
  }
  // 查找块
  getBlock(id) {
    return this.page.find((b) => b.id === id);
  }
  // 导出 JSON
  toJSON() {
    return JSON.stringify(
      { settings: this.settings, page: this.page },
      null,
      2
    );
  }
  // 从 JSON 创建实例
  static fromJSON(data) {
    if (!data.page || !Array.isArray(data.page)) {
      throw new Error("Invalid PageData JSON");
    }
    return new PageData(data.page);
  }
};

// src/util/file-utils.ts
var import_obsidian = require("obsidian");
var FileUtil = class {
  /**
   * 从 TFile 读取并解析 PageData（保留 YAML frontmatter）
   */
  static async loadPageData(app, file) {
    try {
      const data = await app.vault.read(file);
      let content = data;
      const yamlMatch = /^---\n([\s\S]*?)\n---\n?/.exec(data);
      if (yamlMatch) {
        content = data.slice(yamlMatch[0].length);
      }
      const json = JSON.parse(content);
      return PageData.fromJSON(json);
    } catch (e) {
      new import_obsidian.Notice("\u274C \u65E0\u6CD5\u89E3\u6790\u753B\u5ECA\u6587\u4EF6\uFF0C\u5DF2\u8FD4\u56DE\u7A7A\u9875\u9762");
      console.error("FileUtil.loadPageData error:", e);
      return new PageData([]);
    }
  }
  /**
   * 将 PageData 保存到 TFile（保留 YAML frontmatter）
   */
  static async savePageData(app, file, pageData) {
    try {
      const data = await app.vault.read(file);
      let yaml = "";
      const yamlMatch = /^---\n([\s\S]*?)\n---\n?/.exec(data);
      if (yamlMatch) {
        yaml = yamlMatch[0];
      }
      const jsonStr = pageData.toJSON();
      const newContent = yaml + "\n" + jsonStr;
      await app.vault.modify(file, newContent);
      new import_obsidian.Notice("\u2705 \u753B\u5ECA\u5DF2\u4FDD\u5B58");
    } catch (e) {
      new import_obsidian.Notice("\u274C \u4FDD\u5B58\u5931\u8D25");
      console.error("FileUtil.savePageData error:", e);
    }
  }
  /**
   * 创建一个新的空画廊文件
   */
  static async createEmptyPage(app, path) {
    const emptyPage = new PageData([]);
    const content = JSON.stringify(emptyPage.toJSON(), null, 2);
    return await app.vault.create(path, content);
  }
};

// src/util/utils.ts
var import_obsidian2 = require("obsidian");
function renderMD(mdContent, mdElement, component) {
  var _a, _b;
  const view = component;
  import_obsidian2.MarkdownRenderer.render(
    view.app,
    mdContent,
    mdElement,
    (_b = (_a = view.file) == null ? void 0 : _a.path) != null ? _b : "",
    view
  );
}

// src/data/work-dsata.ts
var _MediaData = class {
  constructor(mediaList = []) {
    this.mediaList = [];
    this.mediaList = mediaList;
  }
  static fromWorksContent(content) {
    if (!content)
      return [];
    const mediaList = [];
    const cloudfareCDN = "https://image-proxy.cyuhaonan.workers.dev";
    const items = Array.isArray(content) ? content : content.items || [];
    items.forEach((item) => {
      switch (item.type) {
        case "image":
          mediaList.push({
            is_image: true,
            comment_text: item.comment || null,
            image_data: {
              caption_text: item.caption || "",
              thumb_link: _MediaData.getThumbUrl(
                item.url,
                cloudfareCDN
              ),
              origin_link: _MediaData.getOrigiUrl(
                item.url,
                cloudfareCDN
              )
            },
            video_data: null
          });
          break;
        case "card":
          mediaList.push({
            is_image: true,
            comment_text: null,
            image_data: {
              caption_text: "Card side A",
              thumb_link: item.front,
              origin_link: item.front
            },
            video_data: null
          });
          mediaList.push({
            is_image: true,
            comment_text: null,
            image_data: {
              caption_text: "Card side B",
              thumb_link: item.back,
              origin_link: item.back
            },
            video_data: null
          });
          break;
        case "video":
          mediaList.push({
            is_image: false,
            comment_text: null,
            image_data: null,
            video_data: {
              caption_text: "",
              poster_link: "",
              video_link: item.url
            }
          });
          break;
        case "comic":
          item.urls.forEach((url) => {
            mediaList.push({
              is_image: true,
              comment_text: null,
              image_data: {
                caption_text: "Comic page",
                thumb_link: url,
                origin_link: url
              },
              video_data: null
            });
          });
          break;
      }
    });
    return new _MediaData(mediaList).mediaList;
  }
};
var MediaData = _MediaData;
MediaData.isImgbox = (url) => {
  return url.includes("s2.imgbox.com/");
};
// 不管什么类型的链接，直接传
MediaData.getOrigiUrl = (url, cloudfareCDN) => {
  return url.split("|").map((l) => {
    l = _MediaData.isImgbox(url) ? l.replace(/thumbs2/g, "images2").replace(/_t\./g, "_o.") : l.replace(/th\./g, "").replace(/md\./g, "");
    return _MediaData.isImgbox(url) ? `${cloudfareCDN}?url=${encodeURIComponent(l)}` : l;
  }).join("|");
};
MediaData.getThumbUrl = (url, cloudfareCDN) => {
  return url.split("|").map((l) => {
    return _MediaData.isImgbox(url) ? `${cloudfareCDN}?url=${encodeURIComponent(l)}` : l;
  }).join("|");
};

// src/view/portfolio-intro.ts
var import_masonry_layout = __toESM(require_masonry());
var import_imagesloaded = __toESM(require_imagesloaded());
var createIntroBlock = (block, blockEl, view) => {
  const container = blockEl;
  const id = block.id;
  const intro = block.content;
  container.setAttribute("id", id);
  container.addClass("Intro");
  container.createDiv("banner").setAttribute(
    "style",
    `background: url('${intro.banner[0]}') center/cover no-repeat;`
  );
  const avatarEl = container.createDiv("avatar");
  for (const avatar of intro.avatars) {
    avatarEl.createEl("img").setAttribute("src", avatar);
  }
  for (const name of intro.name) {
    container.createSpan({ cls: "cpb", text: name });
  }
  const officialLinkEl = container.createDiv("official-link");
  officialLinkEl.createSpan("name");
  const unofficialLinkEl = container.createDiv("unofficial-link");
};
var createMdBlock = (block, blockEl, view) => {
  const mdContent = block.content;
  const mdElement = blockEl.createDiv("ProGallery-MD");
  renderMD(mdContent, mdElement, view);
};
var createWorksBlock = (block, blockEl, view) => {
  var _a;
  const container = blockEl;
  const id = block.id;
  const intro = block.content;
  container.setAttribute("id", id);
  container.addClass("Works");
  container.addClass(
    ((_a = intro.config) == null ? void 0 : _a.masonry) === "col" ? "msnry-col" : "msnry-row"
  );
  const items = [];
  MediaData.fromWorksContent(intro).forEach((srcData) => {
    const item = createImage(srcData, container);
    if (item)
      items.push(item);
  });
  const msnry = new import_masonry_layout.default(container, {
    itemSelector: ".item",
    columnWidth: ".item",
    gutter: 8,
    transitionDuration: "0.8s",
    horizontalOrder: true
    // 保证按 DOM 顺序布局
  });
  (0, import_imagesloaded.default)(container, () => {
    items.forEach((item) => {
      item.classList.remove("loading-mask");
      item.classList.add("is-visible");
    });
    msnry.layout();
  });
};
var createImage = (itemData, blockEl) => {
  const container = blockEl.createDiv("item");
  const image_elem = container.createEl("img");
  const image_data = itemData.image_data;
  if (!image_data)
    return;
  const oriSrc = image_data.thumb_link;
  const fontSrc = oriSrc.split("|")[0];
  const backSrc = oriSrc.split("|")[1];
  const captionText = image_data.caption_text;
  container.addClass("grid-item");
  container.addClass("loading-mask");
  container.setAttribute("data-src", fontSrc);
  container.setAttribute("data-thumb", fontSrc);
  container.setAttribute("data-sub-html", captionText);
  image_elem.addClass("image");
  image_elem.setAttribute("data-src", fontSrc);
  image_elem.setAttribute("src", image_data.thumb_link);
  if (oriSrc.includes("|")) {
    container.createEl("div", { attr: { id: "card-corner-mark" } });
  }
  return container;
};

// src/view/portfolio-gallery.ts
var VIEW_TYPE_PRO_GALLERY = "gallery";
var ProGalleryView = class extends import_obsidian3.TextFileView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.pageData = new PageData([]);
  }
  getIcon() {
    return "gallery";
  }
  getDisplayText() {
    var _a;
    return ((_a = this.file) == null ? void 0 : _a.basename) || "Pro Gallery";
  }
  getViewType() {
    return VIEW_TYPE_PRO_GALLERY;
  }
  // 读取文件数据 -> PageData
  async setViewData(data, clear) {
    if (!this.file)
      return;
    try {
      this.pageData = await FileUtil.loadPageData(this.app, this.file);
    } catch (err) {
      new import_obsidian3.Notice("\u274C \u65E0\u6CD5\u52A0\u8F7D\u753B\u5ECA\u6587\u4EF6");
      console.error(err);
      this.pageData = new PageData([]);
    }
    const container = this.containerEl.children[1];
    container.empty();
    const topBar = container.createDiv("ProGallery-TopBar");
    const addButton = topBar.createEl("button", {
      text: "\u6DFB\u52A0\u827A\u672F\u5BB6\u5757",
      cls: ["ProGallery-AddButton", "mod-cta"]
    });
    addButton.addEventListener("click", async () => {
      this.pageData.addBlock("intro", {
        name: ["\u65B0\u827A\u672F\u5BB6", "\u522B\u540D"],
        avatars: [],
        banner: [],
        theme: 0,
        official_socials: [],
        unofficial_socials: []
      });
      if (this.file) {
        await FileUtil.savePageData(this.app, this.file, this.pageData);
        this.renderBlocks(container);
      }
    });
    const galleryContainer = container.createDiv("ProGallery-Container");
    this.renderBlocks(galleryContainer);
  }
  // 把 pageData 渲染出来
  renderBlocks(container) {
    container.empty();
    this.pageData.page.forEach((block) => {
      const blockEl = container.createDiv("ProGallery-Block");
      blockEl.setAttr("data-id", block.id);
      if (block.type === "intro") {
        createIntroBlock(block, blockEl, this);
      } else if (block.type === "md") {
        createMdBlock(block, blockEl, this);
      } else if (block.type === "works") {
        createWorksBlock(block, blockEl, this);
      }
    });
  }
  getViewData() {
    return JSON.stringify(this.pageData.toJSON(), null, 2);
  }
  clear() {
    this.containerEl.empty();
    this.file = null;
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
  }
  async onClose() {
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var ProGalleryPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ProGallerySettingTab(this.app, this));
    await this.registerView(
      VIEW_TYPE_PRO_GALLERY,
      (leaf) => new ProGalleryView(leaf, this)
    );
    window.setTimeout(() => {
      this.registerEvent(
        this.app.workspace.on("file-open", async (file) => {
          await this.handleFileOpen(file);
        })
      );
      this.handleFileOpen(this.app.workspace.getActiveFile());
    }, 0);
  }
  async handleFileOpen(file) {
    var _a;
    if (!file)
      return;
    if (!file.basename.endsWith(".cyu") || file.extension !== "md")
      return;
    const leaf = (_a = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView)) == null ? void 0 : _a.leaf;
    if (!leaf)
      return;
    await leaf.setViewState({
      type: VIEW_TYPE_PRO_GALLERY,
      state: { file: file.path },
      active: true
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ProGallerySettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian4.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText(
      (text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
        this.plugin.settings.mySetting = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
/*! Bundled license information:

get-size/get-size.js:
  (*!
   * getSize v2.0.3
   * measure size of elements
   * MIT license
   *)

outlayer/outlayer.js:
  (*!
   * Outlayer v2.1.1
   * the brains and guts of a layout library
   * MIT license
   *)

masonry-layout/masonry.js:
  (*!
   * Masonry v4.2.2
   * Cascading grid layout library
   * https://masonry.desandro.com
   * MIT License
   * by David DeSandro
   *)

imagesloaded/imagesloaded.js:
  (*!
   * imagesLoaded v5.0.0
   * JavaScript is all like "You images are done yet or what?"
   * MIT License
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2V2LWVtaXR0ZXIvZXYtZW1pdHRlci5qcyIsICJub2RlX21vZHVsZXMvZ2V0LXNpemUvZ2V0LXNpemUuanMiLCAibm9kZV9tb2R1bGVzL2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3Rvci5qcyIsICJub2RlX21vZHVsZXMvZml6enktdWktdXRpbHMvdXRpbHMuanMiLCAibm9kZV9tb2R1bGVzL291dGxheWVyL2l0ZW0uanMiLCAibm9kZV9tb2R1bGVzL291dGxheWVyL291dGxheWVyLmpzIiwgIm5vZGVfbW9kdWxlcy9tYXNvbnJ5LWxheW91dC9tYXNvbnJ5LmpzIiwgIm5vZGVfbW9kdWxlcy9pbWFnZXNsb2FkZWQvbm9kZV9tb2R1bGVzL2V2LWVtaXR0ZXIvZXYtZW1pdHRlci5qcyIsICJub2RlX21vZHVsZXMvaW1hZ2VzbG9hZGVkL2ltYWdlc2xvYWRlZC5qcyIsICJzcmMvbWFpbi50cyIsICJzcmMvdmlldy9wb3J0Zm9saW8tZ2FsbGVyeS50cyIsICJzcmMvZGF0YS9wYWdlLWRhdGEudHMiLCAic3JjL3V0aWwvZmlsZS11dGlscy50cyIsICJzcmMvdXRpbC91dGlscy50cyIsICJzcmMvZGF0YS93b3JrLWRzYXRhLnRzIiwgInNyYy92aWV3L3BvcnRmb2xpby1pbnRyby50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyoqXG4gKiBFdkVtaXR0ZXIgdjEuMS4wXG4gKiBMaWwnIGV2ZW50IGVtaXR0ZXJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuLyoganNoaW50IHVudXNlZDogdHJ1ZSwgdW5kZWY6IHRydWUsIHN0cmljdDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICAvKiBqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKiBnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCB3aW5kb3cgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTUQgLSBSZXF1aXJlSlNcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KUyAtIEJyb3dzZXJpZnksIFdlYnBhY2tcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICBnbG9iYWwuRXZFbWl0dGVyID0gZmFjdG9yeSgpO1xuICB9XG5cbn0oIHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbigpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIEV2RW1pdHRlcigpIHt9XG5cbnZhciBwcm90byA9IEV2RW1pdHRlci5wcm90b3R5cGU7XG5cbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHNldCBldmVudHMgaGFzaFxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgbGlzdGVuZXJzIGFycmF5XG4gIHZhciBsaXN0ZW5lcnMgPSBldmVudHNbIGV2ZW50TmFtZSBdID0gZXZlbnRzWyBldmVudE5hbWUgXSB8fCBbXTtcbiAgLy8gb25seSBhZGQgb25jZVxuICBpZiAoIGxpc3RlbmVycy5pbmRleE9mKCBsaXN0ZW5lciApID09IC0xICkge1xuICAgIGxpc3RlbmVycy5wdXNoKCBsaXN0ZW5lciApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGFkZCBldmVudFxuICB0aGlzLm9uKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gIC8vIHNldCBvbmNlIGZsYWdcbiAgLy8gc2V0IG9uY2VFdmVudHMgaGFzaFxuICB2YXIgb25jZUV2ZW50cyA9IHRoaXMuX29uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzIHx8IHt9O1xuICAvLyBzZXQgb25jZUxpc3RlbmVycyBvYmplY3RcbiAgdmFyIG9uY2VMaXN0ZW5lcnMgPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSA9IG9uY2VFdmVudHNbIGV2ZW50TmFtZSBdIHx8IHt9O1xuICAvLyBzZXQgZmxhZ1xuICBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLm9mZiA9IGZ1bmN0aW9uKCBldmVudE5hbWUsIGxpc3RlbmVyICkge1xuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoIGxpc3RlbmVyICk7XG4gIGlmICggaW5kZXggIT0gLTEgKSB7XG4gICAgbGlzdGVuZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uZW1pdEV2ZW50ID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgYXJncyApIHtcbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGNvcHkgb3ZlciB0byBhdm9pZCBpbnRlcmZlcmVuY2UgaWYgLm9mZigpIGluIGxpc3RlbmVyXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgwKTtcbiAgYXJncyA9IGFyZ3MgfHwgW107XG4gIC8vIG9uY2Ugc3R1ZmZcbiAgdmFyIG9uY2VMaXN0ZW5lcnMgPSB0aGlzLl9vbmNlRXZlbnRzICYmIHRoaXMuX29uY2VFdmVudHNbIGV2ZW50TmFtZSBdO1xuXG4gIGZvciAoIHZhciBpPTA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKysgKSB7XG4gICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldXG4gICAgdmFyIGlzT25jZSA9IG9uY2VMaXN0ZW5lcnMgJiYgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXTtcbiAgICBpZiAoIGlzT25jZSApIHtcbiAgICAgIC8vIHJlbW92ZSBsaXN0ZW5lclxuICAgICAgLy8gcmVtb3ZlIGJlZm9yZSB0cmlnZ2VyIHRvIHByZXZlbnQgcmVjdXJzaW9uXG4gICAgICB0aGlzLm9mZiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAgICAgLy8gdW5zZXQgb25jZSBmbGFnXG4gICAgICBkZWxldGUgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXTtcbiAgICB9XG4gICAgLy8gdHJpZ2dlciBsaXN0ZW5lclxuICAgIGxpc3RlbmVyLmFwcGx5KCB0aGlzLCBhcmdzICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvLmFsbE9mZiA9IGZ1bmN0aW9uKCkge1xuICBkZWxldGUgdGhpcy5fZXZlbnRzO1xuICBkZWxldGUgdGhpcy5fb25jZUV2ZW50cztcbn07XG5cbnJldHVybiBFdkVtaXR0ZXI7XG5cbn0pKTtcbiIsICIvKiFcbiAqIGdldFNpemUgdjIuMC4zXG4gKiBtZWFzdXJlIHNpemUgb2YgZWxlbWVudHNcbiAqIE1JVCBsaWNlbnNlXG4gKi9cblxuLyoganNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuLyogZ2xvYmFscyBjb25zb2xlOiBmYWxzZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmdldFNpemUgPSBmYWN0b3J5KCk7XG4gIH1cblxufSkoIHdpbmRvdywgZnVuY3Rpb24gZmFjdG9yeSgpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaGVscGVycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vLyBnZXQgYSBudW1iZXIgZnJvbSBhIHN0cmluZywgbm90IGEgcGVyY2VudGFnZVxuZnVuY3Rpb24gZ2V0U3R5bGVTaXplKCB2YWx1ZSApIHtcbiAgdmFyIG51bSA9IHBhcnNlRmxvYXQoIHZhbHVlICk7XG4gIC8vIG5vdCBhIHBlcmNlbnQgbGlrZSAnMTAwJScsIGFuZCBhIG51bWJlclxuICB2YXIgaXNWYWxpZCA9IHZhbHVlLmluZGV4T2YoJyUnKSA9PSAtMSAmJiAhaXNOYU4oIG51bSApO1xuICByZXR1cm4gaXNWYWxpZCAmJiBudW07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgbG9nRXJyb3IgPSB0eXBlb2YgY29uc29sZSA9PSAndW5kZWZpbmVkJyA/IG5vb3AgOlxuICBmdW5jdGlvbiggbWVzc2FnZSApIHtcbiAgICBjb25zb2xlLmVycm9yKCBtZXNzYWdlICk7XG4gIH07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIG1lYXN1cmVtZW50cyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG52YXIgbWVhc3VyZW1lbnRzID0gW1xuICAncGFkZGluZ0xlZnQnLFxuICAncGFkZGluZ1JpZ2h0JyxcbiAgJ3BhZGRpbmdUb3AnLFxuICAncGFkZGluZ0JvdHRvbScsXG4gICdtYXJnaW5MZWZ0JyxcbiAgJ21hcmdpblJpZ2h0JyxcbiAgJ21hcmdpblRvcCcsXG4gICdtYXJnaW5Cb3R0b20nLFxuICAnYm9yZGVyTGVmdFdpZHRoJyxcbiAgJ2JvcmRlclJpZ2h0V2lkdGgnLFxuICAnYm9yZGVyVG9wV2lkdGgnLFxuICAnYm9yZGVyQm90dG9tV2lkdGgnXG5dO1xuXG52YXIgbWVhc3VyZW1lbnRzTGVuZ3RoID0gbWVhc3VyZW1lbnRzLmxlbmd0aDtcblxuZnVuY3Rpb24gZ2V0WmVyb1NpemUoKSB7XG4gIHZhciBzaXplID0ge1xuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICBpbm5lcldpZHRoOiAwLFxuICAgIGlubmVySGVpZ2h0OiAwLFxuICAgIG91dGVyV2lkdGg6IDAsXG4gICAgb3V0ZXJIZWlnaHQ6IDBcbiAgfTtcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gMDtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZ2V0U3R5bGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLyoqXG4gKiBnZXRTdHlsZSwgZ2V0IHN0eWxlIG9mIGVsZW1lbnQsIGNoZWNrIGZvciBGaXJlZm94IGJ1Z1xuICogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlKCBlbGVtICkge1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG4gIGlmICggIXN0eWxlICkge1xuICAgIGxvZ0Vycm9yKCAnU3R5bGUgcmV0dXJuZWQgJyArIHN0eWxlICtcbiAgICAgICcuIEFyZSB5b3UgcnVubmluZyB0aGlzIGNvZGUgaW4gYSBoaWRkZW4gaWZyYW1lIG9uIEZpcmVmb3g/ICcgK1xuICAgICAgJ1NlZSBodHRwczovL2JpdC5seS9nZXRzaXplYnVnMScgKTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHNldHVwIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbnZhciBpc1NldHVwID0gZmFsc2U7XG5cbnZhciBpc0JveFNpemVPdXRlcjtcblxuLyoqXG4gKiBzZXR1cFxuICogY2hlY2sgaXNCb3hTaXplck91dGVyXG4gKiBkbyBvbiBmaXJzdCBnZXRTaXplKCkgcmF0aGVyIHRoYW4gb24gcGFnZSBsb2FkIGZvciBGaXJlZm94IGJ1Z1xuICovXG5mdW5jdGlvbiBzZXR1cCgpIHtcbiAgLy8gc2V0dXAgb25jZVxuICBpZiAoIGlzU2V0dXAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlzU2V0dXAgPSB0cnVlO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGJveCBzaXppbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAvKipcbiAgICogQ2hyb21lICYgU2FmYXJpIG1lYXN1cmUgdGhlIG91dGVyLXdpZHRoIG9uIHN0eWxlLndpZHRoIG9uIGJvcmRlci1ib3ggZWxlbXNcbiAgICogSUUxMSAmIEZpcmVmb3g8MjkgbWVhc3VyZXMgdGhlIGlubmVyLXdpZHRoXG4gICAqL1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5zdHlsZS53aWR0aCA9ICcyMDBweCc7XG4gIGRpdi5zdHlsZS5wYWRkaW5nID0gJzFweCAycHggM3B4IDRweCc7XG4gIGRpdi5zdHlsZS5ib3JkZXJTdHlsZSA9ICdzb2xpZCc7XG4gIGRpdi5zdHlsZS5ib3JkZXJXaWR0aCA9ICcxcHggMnB4IDNweCA0cHgnO1xuICBkaXYuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuXG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGJvZHkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuICB2YXIgc3R5bGUgPSBnZXRTdHlsZSggZGl2ICk7XG4gIC8vIHJvdW5kIHZhbHVlIGZvciBicm93c2VyIHpvb20uIGRlc2FuZHJvL21hc29ucnkjOTI4XG4gIGlzQm94U2l6ZU91dGVyID0gTWF0aC5yb3VuZCggZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApICkgPT0gMjAwO1xuICBnZXRTaXplLmlzQm94U2l6ZU91dGVyID0gaXNCb3hTaXplT3V0ZXI7XG5cbiAgYm9keS5yZW1vdmVDaGlsZCggZGl2ICk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGdldFNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gZ2V0U2l6ZSggZWxlbSApIHtcbiAgc2V0dXAoKTtcblxuICAvLyB1c2UgcXVlcnlTZWxldG9yIGlmIGVsZW0gaXMgc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW0gPT0gJ3N0cmluZycgKSB7XG4gICAgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGVsZW0gKTtcbiAgfVxuXG4gIC8vIGRvIG5vdCBwcm9jZWVkIG9uIG5vbi1vYmplY3RzXG4gIGlmICggIWVsZW0gfHwgdHlwZW9mIGVsZW0gIT0gJ29iamVjdCcgfHwgIWVsZW0ubm9kZVR5cGUgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoIGVsZW0gKTtcblxuICAvLyBpZiBoaWRkZW4sIGV2ZXJ5dGhpbmcgaXMgMFxuICBpZiAoIHN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnICkge1xuICAgIHJldHVybiBnZXRaZXJvU2l6ZSgpO1xuICB9XG5cbiAgdmFyIHNpemUgPSB7fTtcbiAgc2l6ZS53aWR0aCA9IGVsZW0ub2Zmc2V0V2lkdGg7XG4gIHNpemUuaGVpZ2h0ID0gZWxlbS5vZmZzZXRIZWlnaHQ7XG5cbiAgdmFyIGlzQm9yZGVyQm94ID0gc2l6ZS5pc0JvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PSAnYm9yZGVyLWJveCc7XG5cbiAgLy8gZ2V0IGFsbCBtZWFzdXJlbWVudHNcbiAgZm9yICggdmFyIGk9MDsgaSA8IG1lYXN1cmVtZW50c0xlbmd0aDsgaSsrICkge1xuICAgIHZhciBtZWFzdXJlbWVudCA9IG1lYXN1cmVtZW50c1tpXTtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZVsgbWVhc3VyZW1lbnQgXTtcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcbiAgICAvLyBhbnkgJ2F1dG8nLCAnbWVkaXVtJyB2YWx1ZSB3aWxsIGJlIDBcbiAgICBzaXplWyBtZWFzdXJlbWVudCBdID0gIWlzTmFOKCBudW0gKSA/IG51bSA6IDA7XG4gIH1cblxuICB2YXIgcGFkZGluZ1dpZHRoID0gc2l6ZS5wYWRkaW5nTGVmdCArIHNpemUucGFkZGluZ1JpZ2h0O1xuICB2YXIgcGFkZGluZ0hlaWdodCA9IHNpemUucGFkZGluZ1RvcCArIHNpemUucGFkZGluZ0JvdHRvbTtcbiAgdmFyIG1hcmdpbldpZHRoID0gc2l6ZS5tYXJnaW5MZWZ0ICsgc2l6ZS5tYXJnaW5SaWdodDtcbiAgdmFyIG1hcmdpbkhlaWdodCA9IHNpemUubWFyZ2luVG9wICsgc2l6ZS5tYXJnaW5Cb3R0b207XG4gIHZhciBib3JkZXJXaWR0aCA9IHNpemUuYm9yZGVyTGVmdFdpZHRoICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoO1xuICB2YXIgYm9yZGVySGVpZ2h0ID0gc2l6ZS5ib3JkZXJUb3BXaWR0aCArIHNpemUuYm9yZGVyQm90dG9tV2lkdGg7XG5cbiAgdmFyIGlzQm9yZGVyQm94U2l6ZU91dGVyID0gaXNCb3JkZXJCb3ggJiYgaXNCb3hTaXplT3V0ZXI7XG5cbiAgLy8gb3ZlcndyaXRlIHdpZHRoIGFuZCBoZWlnaHQgaWYgd2UgY2FuIGdldCBpdCBmcm9tIHN0eWxlXG4gIHZhciBzdHlsZVdpZHRoID0gZ2V0U3R5bGVTaXplKCBzdHlsZS53aWR0aCApO1xuICBpZiAoIHN0eWxlV2lkdGggIT09IGZhbHNlICkge1xuICAgIHNpemUud2lkdGggPSBzdHlsZVdpZHRoICtcbiAgICAgIC8vIGFkZCBwYWRkaW5nIGFuZCBib3JkZXIgdW5sZXNzIGl0J3MgYWxyZWFkeSBpbmNsdWRpbmcgaXRcbiAgICAgICggaXNCb3JkZXJCb3hTaXplT3V0ZXIgPyAwIDogcGFkZGluZ1dpZHRoICsgYm9yZGVyV2lkdGggKTtcbiAgfVxuXG4gIHZhciBzdHlsZUhlaWdodCA9IGdldFN0eWxlU2l6ZSggc3R5bGUuaGVpZ2h0ICk7XG4gIGlmICggc3R5bGVIZWlnaHQgIT09IGZhbHNlICkge1xuICAgIHNpemUuaGVpZ2h0ID0gc3R5bGVIZWlnaHQgK1xuICAgICAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB1bmxlc3MgaXQncyBhbHJlYWR5IGluY2x1ZGluZyBpdFxuICAgICAgKCBpc0JvcmRlckJveFNpemVPdXRlciA/IDAgOiBwYWRkaW5nSGVpZ2h0ICsgYm9yZGVySGVpZ2h0ICk7XG4gIH1cblxuICBzaXplLmlubmVyV2lkdGggPSBzaXplLndpZHRoIC0gKCBwYWRkaW5nV2lkdGggKyBib3JkZXJXaWR0aCApO1xuICBzaXplLmlubmVySGVpZ2h0ID0gc2l6ZS5oZWlnaHQgLSAoIHBhZGRpbmdIZWlnaHQgKyBib3JkZXJIZWlnaHQgKTtcblxuICBzaXplLm91dGVyV2lkdGggPSBzaXplLndpZHRoICsgbWFyZ2luV2lkdGg7XG4gIHNpemUub3V0ZXJIZWlnaHQgPSBzaXplLmhlaWdodCArIG1hcmdpbkhlaWdodDtcblxuICByZXR1cm4gc2l6ZTtcbn1cblxucmV0dXJuIGdldFNpemU7XG5cbn0pO1xuIiwgIi8qKlxuICogbWF0Y2hlc1NlbGVjdG9yIHYyLjAuMlxuICogbWF0Y2hlc1NlbGVjdG9yKCBlbGVtZW50LCAnLnNlbGVjdG9yJyApXG4gKiBNSVQgbGljZW5zZVxuICovXG5cbi8qanNoaW50IGJyb3dzZXI6IHRydWUsIHN0cmljdDogdHJ1ZSwgdW5kZWY6IHRydWUsIHVudXNlZDogdHJ1ZSAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gIC8qZ2xvYmFsIGRlZmluZTogZmFsc2UsIG1vZHVsZTogZmFsc2UgKi9cbiAgJ3VzZSBzdHJpY3QnO1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTURcbiAgICBkZWZpbmUoIGZhY3RvcnkgKTtcbiAgfSBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyApIHtcbiAgICAvLyBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93Lm1hdGNoZXNTZWxlY3RvciA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgbWF0Y2hlc01ldGhvZCA9ICggZnVuY3Rpb24oKSB7XG4gICAgdmFyIEVsZW1Qcm90byA9IHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZTtcbiAgICAvLyBjaGVjayBmb3IgdGhlIHN0YW5kYXJkIG1ldGhvZCBuYW1lIGZpcnN0XG4gICAgaWYgKCBFbGVtUHJvdG8ubWF0Y2hlcyApIHtcbiAgICAgIHJldHVybiAnbWF0Y2hlcyc7XG4gICAgfVxuICAgIC8vIGNoZWNrIHVuLXByZWZpeGVkXG4gICAgaWYgKCBFbGVtUHJvdG8ubWF0Y2hlc1NlbGVjdG9yICkge1xuICAgICAgcmV0dXJuICdtYXRjaGVzU2VsZWN0b3InO1xuICAgIH1cbiAgICAvLyBjaGVjayB2ZW5kb3IgcHJlZml4ZXNcbiAgICB2YXIgcHJlZml4ZXMgPSBbICd3ZWJraXQnLCAnbW96JywgJ21zJywgJ28nIF07XG5cbiAgICBmb3IgKCB2YXIgaT0wOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKysgKSB7XG4gICAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgICB2YXIgbWV0aG9kID0gcHJlZml4ICsgJ01hdGNoZXNTZWxlY3Rvcic7XG4gICAgICBpZiAoIEVsZW1Qcm90b1sgbWV0aG9kIF0gKSB7XG4gICAgICAgIHJldHVybiBtZXRob2Q7XG4gICAgICB9XG4gICAgfVxuICB9KSgpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBtYXRjaGVzU2VsZWN0b3IoIGVsZW0sIHNlbGVjdG9yICkge1xuICAgIHJldHVybiBlbGVtWyBtYXRjaGVzTWV0aG9kIF0oIHNlbGVjdG9yICk7XG4gIH07XG5cbn0pKTtcbiIsICIvKipcbiAqIEZpenp5IFVJIHV0aWxzIHYyLjAuN1xuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4vKmpzaGludCBicm93c2VyOiB0cnVlLCB1bmRlZjogdHJ1ZSwgdW51c2VkOiB0cnVlLCBzdHJpY3Q6IHRydWUgKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLypqc2hpbnQgc3RyaWN0OiBmYWxzZSAqLyAvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cblxuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZSggW1xuICAgICAgJ2Rlc2FuZHJvLW1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvcidcbiAgICBdLCBmdW5jdGlvbiggbWF0Y2hlc1NlbGVjdG9yICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkoIHdpbmRvdywgbWF0Y2hlc1NlbGVjdG9yICk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICByZXF1aXJlKCdkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmZpenp5VUlVdGlscyA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3csXG4gICAgICB3aW5kb3cubWF0Y2hlc1NlbGVjdG9yXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgbWF0Y2hlc1NlbGVjdG9yICkge1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHt9O1xuXG4vLyAtLS0tLSBleHRlbmQgLS0tLS0gLy9cblxuLy8gZXh0ZW5kcyBvYmplY3RzXG51dGlscy5leHRlbmQgPSBmdW5jdGlvbiggYSwgYiApIHtcbiAgZm9yICggdmFyIHByb3AgaW4gYiApIHtcbiAgICBhWyBwcm9wIF0gPSBiWyBwcm9wIF07XG4gIH1cbiAgcmV0dXJuIGE7XG59O1xuXG4vLyAtLS0tLSBtb2R1bG8gLS0tLS0gLy9cblxudXRpbHMubW9kdWxvID0gZnVuY3Rpb24oIG51bSwgZGl2ICkge1xuICByZXR1cm4gKCAoIG51bSAlIGRpdiApICsgZGl2ICkgJSBkaXY7XG59O1xuXG4vLyAtLS0tLSBtYWtlQXJyYXkgLS0tLS0gLy9cblxudmFyIGFycmF5U2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XG51dGlscy5tYWtlQXJyYXkgPSBmdW5jdGlvbiggb2JqICkge1xuICBpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuICAgIC8vIHVzZSBvYmplY3QgaWYgYWxyZWFkeSBhbiBhcnJheVxuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgLy8gcmV0dXJuIGVtcHR5IGFycmF5IGlmIHVuZGVmaW5lZCBvciBudWxsLiAjNlxuICBpZiAoIG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgaXNBcnJheUxpa2UgPSB0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoubGVuZ3RoID09ICdudW1iZXInO1xuICBpZiAoIGlzQXJyYXlMaWtlICkge1xuICAgIC8vIGNvbnZlcnQgbm9kZUxpc3QgdG8gYXJyYXlcbiAgICByZXR1cm4gYXJyYXlTbGljZS5jYWxsKCBvYmogKTtcbiAgfVxuXG4gIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxuICByZXR1cm4gWyBvYmogXTtcbn07XG5cbi8vIC0tLS0tIHJlbW92ZUZyb20gLS0tLS0gLy9cblxudXRpbHMucmVtb3ZlRnJvbSA9IGZ1bmN0aW9uKCBhcnksIG9iaiApIHtcbiAgdmFyIGluZGV4ID0gYXJ5LmluZGV4T2YoIG9iaiApO1xuICBpZiAoIGluZGV4ICE9IC0xICkge1xuICAgIGFyeS5zcGxpY2UoIGluZGV4LCAxICk7XG4gIH1cbn07XG5cbi8vIC0tLS0tIGdldFBhcmVudCAtLS0tLSAvL1xuXG51dGlscy5nZXRQYXJlbnQgPSBmdW5jdGlvbiggZWxlbSwgc2VsZWN0b3IgKSB7XG4gIHdoaWxlICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0gIT0gZG9jdW1lbnQuYm9keSApIHtcbiAgICBlbGVtID0gZWxlbS5wYXJlbnROb2RlO1xuICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xuICAgICAgcmV0dXJuIGVsZW07XG4gICAgfVxuICB9XG59O1xuXG4vLyAtLS0tLSBnZXRRdWVyeUVsZW1lbnQgLS0tLS0gLy9cblxuLy8gdXNlIGVsZW1lbnQgYXMgc2VsZWN0b3Igc3RyaW5nXG51dGlscy5nZXRRdWVyeUVsZW1lbnQgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJyApIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggZWxlbSApO1xuICB9XG4gIHJldHVybiBlbGVtO1xufTtcblxuLy8gLS0tLS0gaGFuZGxlRXZlbnQgLS0tLS0gLy9cblxuLy8gZW5hYmxlIC5vbnR5cGUgdG8gdHJpZ2dlciBmcm9tIC5hZGRFdmVudExpc3RlbmVyKCBlbGVtLCAndHlwZScgKVxudXRpbHMuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gZmlsdGVyRmluZEVsZW1lbnRzIC0tLS0tIC8vXG5cbnV0aWxzLmZpbHRlckZpbmRFbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcywgc2VsZWN0b3IgKSB7XG4gIC8vIG1ha2UgYXJyYXkgb2YgZWxlbXNcbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XG4gIHZhciBmZkVsZW1zID0gW107XG5cbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgLy8gY2hlY2sgdGhhdCBlbGVtIGlzIGFuIGFjdHVhbCBlbGVtZW50XG4gICAgaWYgKCAhKCBlbGVtIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgKSApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gYWRkIGVsZW0gaWYgbm8gc2VsZWN0b3JcbiAgICBpZiAoICFzZWxlY3RvciApIHtcbiAgICAgIGZmRWxlbXMucHVzaCggZWxlbSApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYSBzZWxlY3RvclxuICAgIC8vIGZpbHRlclxuICAgIGlmICggbWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBzZWxlY3RvciApICkge1xuICAgICAgZmZFbGVtcy5wdXNoKCBlbGVtICk7XG4gICAgfVxuICAgIC8vIGZpbmQgY2hpbGRyZW5cbiAgICB2YXIgY2hpbGRFbGVtcyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggc2VsZWN0b3IgKTtcbiAgICAvLyBjb25jYXQgY2hpbGRFbGVtcyB0byBmaWx0ZXJGb3VuZCBhcnJheVxuICAgIGZvciAoIHZhciBpPTA7IGkgPCBjaGlsZEVsZW1zLmxlbmd0aDsgaSsrICkge1xuICAgICAgZmZFbGVtcy5wdXNoKCBjaGlsZEVsZW1zW2ldICk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZmZFbGVtcztcbn07XG5cbi8vIC0tLS0tIGRlYm91bmNlTWV0aG9kIC0tLS0tIC8vXG5cbnV0aWxzLmRlYm91bmNlTWV0aG9kID0gZnVuY3Rpb24oIF9jbGFzcywgbWV0aG9kTmFtZSwgdGhyZXNob2xkICkge1xuICB0aHJlc2hvbGQgPSB0aHJlc2hvbGQgfHwgMTAwO1xuICAvLyBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG1ldGhvZCA9IF9jbGFzcy5wcm90b3R5cGVbIG1ldGhvZE5hbWUgXTtcbiAgdmFyIHRpbWVvdXROYW1lID0gbWV0aG9kTmFtZSArICdUaW1lb3V0JztcblxuICBfY2xhc3MucHJvdG90eXBlWyBtZXRob2ROYW1lIF0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXNbIHRpbWVvdXROYW1lIF07XG4gICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXNbIHRpbWVvdXROYW1lIF0gPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgIG1ldGhvZC5hcHBseSggX3RoaXMsIGFyZ3MgKTtcbiAgICAgIGRlbGV0ZSBfdGhpc1sgdGltZW91dE5hbWUgXTtcbiAgICB9LCB0aHJlc2hvbGQgKTtcbiAgfTtcbn07XG5cbi8vIC0tLS0tIGRvY1JlYWR5IC0tLS0tIC8vXG5cbnV0aWxzLmRvY1JlYWR5ID0gZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuICB2YXIgcmVhZHlTdGF0ZSA9IGRvY3VtZW50LnJlYWR5U3RhdGU7XG4gIGlmICggcmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnIHx8IHJlYWR5U3RhdGUgPT0gJ2ludGVyYWN0aXZlJyApIHtcbiAgICAvLyBkbyBhc3luYyB0byBhbGxvdyBmb3Igb3RoZXIgc2NyaXB0cyB0byBydW4uIG1ldGFmaXp6eS9mbGlja2l0eSM0NDFcbiAgICBzZXRUaW1lb3V0KCBjYWxsYmFjayApO1xuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdET01Db250ZW50TG9hZGVkJywgY2FsbGJhY2sgKTtcbiAgfVxufTtcblxuLy8gLS0tLS0gaHRtbEluaXQgLS0tLS0gLy9cblxuLy8gaHR0cDovL2phbWVzcm9iZXJ0cy5uYW1lL2Jsb2cvMjAxMC8wMi8yMi9zdHJpbmctZnVuY3Rpb25zLWZvci1qYXZhc2NyaXB0LXRyaW0tdG8tY2FtZWwtY2FzZS10by1kYXNoZWQtYW5kLXRvLXVuZGVyc2NvcmUvXG51dGlscy50b0Rhc2hlZCA9IGZ1bmN0aW9uKCBzdHIgKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSggLyguKShbQS1aXSkvZywgZnVuY3Rpb24oIG1hdGNoLCAkMSwgJDIgKSB7XG4gICAgcmV0dXJuICQxICsgJy0nICsgJDI7XG4gIH0pLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xuLyoqXG4gKiBhbGxvdyB1c2VyIHRvIGluaXRpYWxpemUgY2xhc3NlcyB2aWEgW2RhdGEtbmFtZXNwYWNlXSBvciAuanMtbmFtZXNwYWNlIGNsYXNzXG4gKiBodG1sSW5pdCggV2lkZ2V0LCAnd2lkZ2V0TmFtZScgKVxuICogb3B0aW9ucyBhcmUgcGFyc2VkIGZyb20gZGF0YS1uYW1lc3BhY2Utb3B0aW9uc1xuICovXG51dGlscy5odG1sSW5pdCA9IGZ1bmN0aW9uKCBXaWRnZXRDbGFzcywgbmFtZXNwYWNlICkge1xuICB1dGlscy5kb2NSZWFkeSggZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhc2hlZE5hbWVzcGFjZSA9IHV0aWxzLnRvRGFzaGVkKCBuYW1lc3BhY2UgKTtcbiAgICB2YXIgZGF0YUF0dHIgPSAnZGF0YS0nICsgZGFzaGVkTmFtZXNwYWNlO1xuICAgIHZhciBkYXRhQXR0ckVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggJ1snICsgZGF0YUF0dHIgKyAnXScgKTtcbiAgICB2YXIganNEYXNoRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnLmpzLScgKyBkYXNoZWROYW1lc3BhY2UgKTtcbiAgICB2YXIgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGRhdGFBdHRyRWxlbXMgKVxuICAgICAgLmNvbmNhdCggdXRpbHMubWFrZUFycmF5KCBqc0Rhc2hFbGVtcyApICk7XG4gICAgdmFyIGRhdGFPcHRpb25zQXR0ciA9IGRhdGFBdHRyICsgJy1vcHRpb25zJztcbiAgICB2YXIgalF1ZXJ5ID0gd2luZG93LmpRdWVyeTtcblxuICAgIGVsZW1zLmZvckVhY2goIGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgdmFyIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggZGF0YUF0dHIgKSB8fFxuICAgICAgICBlbGVtLmdldEF0dHJpYnV0ZSggZGF0YU9wdGlvbnNBdHRyICk7XG4gICAgICB2YXIgb3B0aW9ucztcbiAgICAgIHRyeSB7XG4gICAgICAgIG9wdGlvbnMgPSBhdHRyICYmIEpTT04ucGFyc2UoIGF0dHIgKTtcbiAgICAgIH0gY2F0Y2ggKCBlcnJvciApIHtcbiAgICAgICAgLy8gbG9nIGVycm9yLCBkbyBub3QgaW5pdGlhbGl6ZVxuICAgICAgICBpZiAoIGNvbnNvbGUgKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvciggJ0Vycm9yIHBhcnNpbmcgJyArIGRhdGFBdHRyICsgJyBvbiAnICsgZWxlbS5jbGFzc05hbWUgK1xuICAgICAgICAgICc6ICcgKyBlcnJvciApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGluaXRpYWxpemVcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBXaWRnZXRDbGFzcyggZWxlbSwgb3B0aW9ucyApO1xuICAgICAgLy8gbWFrZSBhdmFpbGFibGUgdmlhICQoKS5kYXRhKCduYW1lc3BhY2UnKVxuICAgICAgaWYgKCBqUXVlcnkgKSB7XG4gICAgICAgIGpRdWVyeS5kYXRhKCBlbGVtLCBuYW1lc3BhY2UsIGluc3RhbmNlICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfSk7XG59O1xuXG4vLyAtLS0tLSAgLS0tLS0gLy9cblxucmV0dXJuIHV0aWxzO1xuXG59KSk7XG4iLCAiLyoqXG4gKiBPdXRsYXllciBJdGVtXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLyogZ2xvYmFscyBkZWZpbmUsIG1vZHVsZSwgcmVxdWlyZSAqL1xuICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgIC8vIEFNRCAtIFJlcXVpcmVKU1xuICAgIGRlZmluZSggW1xuICAgICAgICAnZXYtZW1pdHRlci9ldi1lbWl0dGVyJyxcbiAgICAgICAgJ2dldC1zaXplL2dldC1zaXplJ1xuICAgICAgXSxcbiAgICAgIGZhY3RvcnlcbiAgICApO1xuICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTIC0gQnJvd3NlcmlmeSwgV2VicGFja1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShcbiAgICAgIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSxcbiAgICAgIHJlcXVpcmUoJ2dldC1zaXplJylcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93Lk91dGxheWVyID0ge307XG4gICAgd2luZG93Lk91dGxheWVyLkl0ZW0gPSBmYWN0b3J5KFxuICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgIHdpbmRvdy5nZXRTaXplXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIEV2RW1pdHRlciwgZ2V0U2l6ZSApIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gaGVscGVycyAtLS0tLSAvL1xuXG5mdW5jdGlvbiBpc0VtcHR5T2JqKCBvYmogKSB7XG4gIGZvciAoIHZhciBwcm9wIGluIG9iaiApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcHJvcCA9IG51bGw7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDU1MzIHN1cHBvcnQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuXG52YXIgZG9jRWxlbVN0eWxlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuXG52YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gdHlwZW9mIGRvY0VsZW1TdHlsZS50cmFuc2l0aW9uID09ICdzdHJpbmcnID9cbiAgJ3RyYW5zaXRpb24nIDogJ1dlYmtpdFRyYW5zaXRpb24nO1xudmFyIHRyYW5zZm9ybVByb3BlcnR5ID0gdHlwZW9mIGRvY0VsZW1TdHlsZS50cmFuc2Zvcm0gPT0gJ3N0cmluZycgP1xuICAndHJhbnNmb3JtJyA6ICdXZWJraXRUcmFuc2Zvcm0nO1xuXG52YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0ge1xuICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gIHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xufVsgdHJhbnNpdGlvblByb3BlcnR5IF07XG5cbi8vIGNhY2hlIGFsbCB2ZW5kb3IgcHJvcGVydGllcyB0aGF0IGNvdWxkIGhhdmUgdmVuZG9yIHByZWZpeFxudmFyIHZlbmRvclByb3BlcnRpZXMgPSB7XG4gIHRyYW5zZm9ybTogdHJhbnNmb3JtUHJvcGVydHksXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25Qcm9wZXJ0eSxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uUHJvcGVydHkgKyAnRHVyYXRpb24nLFxuICB0cmFuc2l0aW9uUHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wZXJ0eSArICdQcm9wZXJ0eScsXG4gIHRyYW5zaXRpb25EZWxheTogdHJhbnNpdGlvblByb3BlcnR5ICsgJ0RlbGF5J1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSXRlbSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5mdW5jdGlvbiBJdGVtKCBlbGVtZW50LCBsYXlvdXQgKSB7XG4gIGlmICggIWVsZW1lbnQgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgLy8gcGFyZW50IGxheW91dCBjbGFzcywgaS5lLiBNYXNvbnJ5LCBJc290b3BlLCBvciBQYWNrZXJ5XG4gIHRoaXMubGF5b3V0ID0gbGF5b3V0O1xuICB0aGlzLnBvc2l0aW9uID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIHRoaXMuX2NyZWF0ZSgpO1xufVxuXG4vLyBpbmhlcml0IEV2RW1pdHRlclxudmFyIHByb3RvID0gSXRlbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFdkVtaXR0ZXIucHJvdG90eXBlICk7XG5wcm90by5jb25zdHJ1Y3RvciA9IEl0ZW07XG5cbnByb3RvLl9jcmVhdGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gdHJhbnNpdGlvbiBvYmplY3RzXG4gIHRoaXMuX3RyYW5zbiA9IHtcbiAgICBpbmdQcm9wZXJ0aWVzOiB7fSxcbiAgICBjbGVhbjoge30sXG4gICAgb25FbmQ6IHt9XG4gIH07XG5cbiAgdGhpcy5jc3Moe1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gIH0pO1xufTtcblxuLy8gdHJpZ2dlciBzcGVjaWZpZWQgaGFuZGxlciBmb3IgZXZlbnQgdHlwZVxucHJvdG8uaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHZhciBtZXRob2QgPSAnb24nICsgZXZlbnQudHlwZTtcbiAgaWYgKCB0aGlzWyBtZXRob2QgXSApIHtcbiAgICB0aGlzWyBtZXRob2QgXSggZXZlbnQgKTtcbiAgfVxufTtcblxucHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cbi8qKlxuICogYXBwbHkgQ1NTIHN0eWxlcyB0byBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAqL1xucHJvdG8uY3NzID0gZnVuY3Rpb24oIHN0eWxlICkge1xuICB2YXIgZWxlbVN0eWxlID0gdGhpcy5lbGVtZW50LnN0eWxlO1xuXG4gIGZvciAoIHZhciBwcm9wIGluIHN0eWxlICkge1xuICAgIC8vIHVzZSB2ZW5kb3IgcHJvcGVydHkgaWYgYXZhaWxhYmxlXG4gICAgdmFyIHN1cHBvcnRlZFByb3AgPSB2ZW5kb3JQcm9wZXJ0aWVzWyBwcm9wIF0gfHwgcHJvcDtcbiAgICBlbGVtU3R5bGVbIHN1cHBvcnRlZFByb3AgXSA9IHN0eWxlWyBwcm9wIF07XG4gIH1cbn07XG5cbiAvLyBtZWFzdXJlIHBvc2l0aW9uLCBhbmQgc2V0cyBpdFxucHJvdG8uZ2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggdGhpcy5lbGVtZW50ICk7XG4gIHZhciBpc09yaWdpbkxlZnQgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5MZWZ0Jyk7XG4gIHZhciBpc09yaWdpblRvcCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpblRvcCcpO1xuICB2YXIgeFZhbHVlID0gc3R5bGVbIGlzT3JpZ2luTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCcgXTtcbiAgdmFyIHlWYWx1ZSA9IHN0eWxlWyBpc09yaWdpblRvcCA/ICd0b3AnIDogJ2JvdHRvbScgXTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KCB4VmFsdWUgKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KCB5VmFsdWUgKTtcbiAgLy8gY29udmVydCBwZXJjZW50IHRvIHBpeGVsc1xuICB2YXIgbGF5b3V0U2l6ZSA9IHRoaXMubGF5b3V0LnNpemU7XG4gIGlmICggeFZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSApIHtcbiAgICB4ID0gKCB4IC8gMTAwICkgKiBsYXlvdXRTaXplLndpZHRoO1xuICB9XG4gIGlmICggeVZhbHVlLmluZGV4T2YoJyUnKSAhPSAtMSApIHtcbiAgICB5ID0gKCB5IC8gMTAwICkgKiBsYXlvdXRTaXplLmhlaWdodDtcbiAgfVxuICAvLyBjbGVhbiB1cCAnYXV0bycgb3Igb3RoZXIgbm9uLWludGVnZXIgdmFsdWVzXG4gIHggPSBpc05hTiggeCApID8gMCA6IHg7XG4gIHkgPSBpc05hTiggeSApID8gMCA6IHk7XG4gIC8vIHJlbW92ZSBwYWRkaW5nIGZyb20gbWVhc3VyZW1lbnRcbiAgeCAtPSBpc09yaWdpbkxlZnQgPyBsYXlvdXRTaXplLnBhZGRpbmdMZWZ0IDogbGF5b3V0U2l6ZS5wYWRkaW5nUmlnaHQ7XG4gIHkgLT0gaXNPcmlnaW5Ub3AgPyBsYXlvdXRTaXplLnBhZGRpbmdUb3AgOiBsYXlvdXRTaXplLnBhZGRpbmdCb3R0b207XG5cbiAgdGhpcy5wb3NpdGlvbi54ID0geDtcbiAgdGhpcy5wb3NpdGlvbi55ID0geTtcbn07XG5cbi8vIHNldCBzZXR0bGVkIHBvc2l0aW9uLCBhcHBseSBwYWRkaW5nXG5wcm90by5sYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbGF5b3V0U2l6ZSA9IHRoaXMubGF5b3V0LnNpemU7XG4gIHZhciBzdHlsZSA9IHt9O1xuICB2YXIgaXNPcmlnaW5MZWZ0ID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luTGVmdCcpO1xuICB2YXIgaXNPcmlnaW5Ub3AgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdvcmlnaW5Ub3AnKTtcblxuICAvLyB4XG4gIHZhciB4UGFkZGluZyA9IGlzT3JpZ2luTGVmdCA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0JztcbiAgdmFyIHhQcm9wZXJ0eSA9IGlzT3JpZ2luTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIHZhciB4UmVzZXRQcm9wZXJ0eSA9IGlzT3JpZ2luTGVmdCA/ICdyaWdodCcgOiAnbGVmdCc7XG5cbiAgdmFyIHggPSB0aGlzLnBvc2l0aW9uLnggKyBsYXlvdXRTaXplWyB4UGFkZGluZyBdO1xuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcbiAgc3R5bGVbIHhQcm9wZXJ0eSBdID0gdGhpcy5nZXRYVmFsdWUoIHggKTtcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcbiAgc3R5bGVbIHhSZXNldFByb3BlcnR5IF0gPSAnJztcblxuICAvLyB5XG4gIHZhciB5UGFkZGluZyA9IGlzT3JpZ2luVG9wID8gJ3BhZGRpbmdUb3AnIDogJ3BhZGRpbmdCb3R0b20nO1xuICB2YXIgeVByb3BlcnR5ID0gaXNPcmlnaW5Ub3AgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgeVJlc2V0UHJvcGVydHkgPSBpc09yaWdpblRvcCA/ICdib3R0b20nIDogJ3RvcCc7XG5cbiAgdmFyIHkgPSB0aGlzLnBvc2l0aW9uLnkgKyBsYXlvdXRTaXplWyB5UGFkZGluZyBdO1xuICAvLyBzZXQgaW4gcGVyY2VudGFnZSBvciBwaXhlbHNcbiAgc3R5bGVbIHlQcm9wZXJ0eSBdID0gdGhpcy5nZXRZVmFsdWUoIHkgKTtcbiAgLy8gcmVzZXQgb3RoZXIgcHJvcGVydHlcbiAgc3R5bGVbIHlSZXNldFByb3BlcnR5IF0gPSAnJztcblxuICB0aGlzLmNzcyggc3R5bGUgKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdsYXlvdXQnLCBbIHRoaXMgXSApO1xufTtcblxucHJvdG8uZ2V0WFZhbHVlID0gZnVuY3Rpb24oIHggKSB7XG4gIHZhciBpc0hvcml6b250YWwgPSB0aGlzLmxheW91dC5fZ2V0T3B0aW9uKCdob3Jpem9udGFsJyk7XG4gIHJldHVybiB0aGlzLmxheW91dC5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiAmJiAhaXNIb3Jpem9udGFsID9cbiAgICAoICggeCAvIHRoaXMubGF5b3V0LnNpemUud2lkdGggKSAqIDEwMCApICsgJyUnIDogeCArICdweCc7XG59O1xuXG5wcm90by5nZXRZVmFsdWUgPSBmdW5jdGlvbiggeSApIHtcbiAgdmFyIGlzSG9yaXpvbnRhbCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ2hvcml6b250YWwnKTtcbiAgcmV0dXJuIHRoaXMubGF5b3V0Lm9wdGlvbnMucGVyY2VudFBvc2l0aW9uICYmIGlzSG9yaXpvbnRhbCA/XG4gICAgKCAoIHkgLyB0aGlzLmxheW91dC5zaXplLmhlaWdodCApICogMTAwICkgKyAnJScgOiB5ICsgJ3B4Jztcbn07XG5cbnByb3RvLl90cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiggeCwgeSApIHtcbiAgdGhpcy5nZXRQb3NpdGlvbigpO1xuICAvLyBnZXQgY3VycmVudCB4ICYgeSBmcm9tIHRvcC9sZWZ0XG4gIHZhciBjdXJYID0gdGhpcy5wb3NpdGlvbi54O1xuICB2YXIgY3VyWSA9IHRoaXMucG9zaXRpb24ueTtcblxuICB2YXIgZGlkTm90TW92ZSA9IHggPT0gdGhpcy5wb3NpdGlvbi54ICYmIHkgPT0gdGhpcy5wb3NpdGlvbi55O1xuXG4gIC8vIHNhdmUgZW5kIHBvc2l0aW9uXG4gIHRoaXMuc2V0UG9zaXRpb24oIHgsIHkgKTtcblxuICAvLyBpZiBkaWQgbm90IG1vdmUgYW5kIG5vdCB0cmFuc2l0aW9uaW5nLCBqdXN0IGdvIHRvIGxheW91dFxuICBpZiAoIGRpZE5vdE1vdmUgJiYgIXRoaXMuaXNUcmFuc2l0aW9uaW5nICkge1xuICAgIHRoaXMubGF5b3V0UG9zaXRpb24oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdHJhbnNYID0geCAtIGN1clg7XG4gIHZhciB0cmFuc1kgPSB5IC0gY3VyWTtcbiAgdmFyIHRyYW5zaXRpb25TdHlsZSA9IHt9O1xuICB0cmFuc2l0aW9uU3R5bGUudHJhbnNmb3JtID0gdGhpcy5nZXRUcmFuc2xhdGUoIHRyYW5zWCwgdHJhbnNZICk7XG5cbiAgdGhpcy50cmFuc2l0aW9uKHtcbiAgICB0bzogdHJhbnNpdGlvblN0eWxlLFxuICAgIG9uVHJhbnNpdGlvbkVuZDoge1xuICAgICAgdHJhbnNmb3JtOiB0aGlzLmxheW91dFBvc2l0aW9uXG4gICAgfSxcbiAgICBpc0NsZWFuaW5nOiB0cnVlXG4gIH0pO1xufTtcblxucHJvdG8uZ2V0VHJhbnNsYXRlID0gZnVuY3Rpb24oIHgsIHkgKSB7XG4gIC8vIGZsaXAgY29vcmlkaW5hdGVzIGlmIG9yaWdpbiBvbiByaWdodCBvciBib3R0b21cbiAgdmFyIGlzT3JpZ2luTGVmdCA9IHRoaXMubGF5b3V0Ll9nZXRPcHRpb24oJ29yaWdpbkxlZnQnKTtcbiAgdmFyIGlzT3JpZ2luVG9wID0gdGhpcy5sYXlvdXQuX2dldE9wdGlvbignb3JpZ2luVG9wJyk7XG4gIHggPSBpc09yaWdpbkxlZnQgPyB4IDogLXg7XG4gIHkgPSBpc09yaWdpblRvcCA/IHkgOiAteTtcbiAgcmV0dXJuICd0cmFuc2xhdGUzZCgnICsgeCArICdweCwgJyArIHkgKyAncHgsIDApJztcbn07XG5cbi8vIG5vbiB0cmFuc2l0aW9uICsgdHJhbnNmb3JtIHN1cHBvcnRcbnByb3RvLmdvVG8gPSBmdW5jdGlvbiggeCwgeSApIHtcbiAgdGhpcy5zZXRQb3NpdGlvbiggeCwgeSApO1xuICB0aGlzLmxheW91dFBvc2l0aW9uKCk7XG59O1xuXG5wcm90by5tb3ZlVG8gPSBwcm90by5fdHJhbnNpdGlvblRvO1xuXG5wcm90by5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCB4LCB5ICkge1xuICB0aGlzLnBvc2l0aW9uLnggPSBwYXJzZUZsb2F0KCB4ICk7XG4gIHRoaXMucG9zaXRpb24ueSA9IHBhcnNlRmxvYXQoIHkgKTtcbn07XG5cbi8vIC0tLS0tIHRyYW5zaXRpb24gLS0tLS0gLy9cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGUgLSBDU1NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uVHJhbnNpdGlvbkVuZFxuICovXG5cbi8vIG5vbiB0cmFuc2l0aW9uLCBqdXN0IHRyaWdnZXIgY2FsbGJhY2tcbnByb3RvLl9ub25UcmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XG4gIHRoaXMuY3NzKCBhcmdzLnRvICk7XG4gIGlmICggYXJncy5pc0NsZWFuaW5nICkge1xuICAgIHRoaXMuX3JlbW92ZVN0eWxlcyggYXJncy50byApO1xuICB9XG4gIGZvciAoIHZhciBwcm9wIGluIGFyZ3Mub25UcmFuc2l0aW9uRW5kICkge1xuICAgIGFyZ3Mub25UcmFuc2l0aW9uRW5kWyBwcm9wIF0uY2FsbCggdGhpcyApO1xuICB9XG59O1xuXG4vKipcbiAqIHByb3BlciB0cmFuc2l0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIGFyZ3VtZW50c1xuICogICBAcGFyYW0ge09iamVjdH0gdG8gLSBzdHlsZSB0byB0cmFuc2l0aW9uIHRvXG4gKiAgIEBwYXJhbSB7T2JqZWN0fSBmcm9tIC0gc3R5bGUgdG8gc3RhcnQgdHJhbnNpdGlvbiBmcm9tXG4gKiAgIEBwYXJhbSB7Qm9vbGVhbn0gaXNDbGVhbmluZyAtIHJlbW92ZXMgdHJhbnNpdGlvbiBzdHlsZXMgYWZ0ZXIgdHJhbnNpdGlvblxuICogICBAcGFyYW0ge0Z1bmN0aW9ufSBvblRyYW5zaXRpb25FbmQgLSBjYWxsYmFja1xuICovXG5wcm90by50cmFuc2l0aW9uID0gZnVuY3Rpb24oIGFyZ3MgKSB7XG4gIC8vIHJlZGlyZWN0IHRvIG5vblRyYW5zaXRpb24gaWYgbm8gdHJhbnNpdGlvbiBkdXJhdGlvblxuICBpZiAoICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xuICAgIHRoaXMuX25vblRyYW5zaXRpb24oIGFyZ3MgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX3RyYW5zaXRpb24gPSB0aGlzLl90cmFuc247XG4gIC8vIGtlZXAgdHJhY2sgb2Ygb25UcmFuc2l0aW9uRW5kIGNhbGxiYWNrIGJ5IGNzcyBwcm9wZXJ0eVxuICBmb3IgKCB2YXIgcHJvcCBpbiBhcmdzLm9uVHJhbnNpdGlvbkVuZCApIHtcbiAgICBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcCBdID0gYXJncy5vblRyYW5zaXRpb25FbmRbIHByb3AgXTtcbiAgfVxuICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdGhhdCBhcmUgdHJhbnNpdGlvbmluZ1xuICBmb3IgKCBwcm9wIGluIGFyZ3MudG8gKSB7XG4gICAgX3RyYW5zaXRpb24uaW5nUHJvcGVydGllc1sgcHJvcCBdID0gdHJ1ZTtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHByb3BlcnRpZXMgdG8gY2xlYW4gdXAgd2hlbiB0cmFuc2l0aW9uIGlzIGRvbmVcbiAgICBpZiAoIGFyZ3MuaXNDbGVhbmluZyApIHtcbiAgICAgIF90cmFuc2l0aW9uLmNsZWFuWyBwcm9wIF0gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBmcm9tIHN0eWxlc1xuICBpZiAoIGFyZ3MuZnJvbSApIHtcbiAgICB0aGlzLmNzcyggYXJncy5mcm9tICk7XG4gICAgLy8gZm9yY2UgcmVkcmF3LiBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcbiAgICB2YXIgaCA9IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgLy8gaGFjayBmb3IgSlNIaW50IHRvIGh1c2ggYWJvdXQgdW51c2VkIHZhclxuICAgIGggPSBudWxsO1xuICB9XG4gIC8vIGVuYWJsZSB0cmFuc2l0aW9uXG4gIHRoaXMuZW5hYmxlVHJhbnNpdGlvbiggYXJncy50byApO1xuICAvLyBzZXQgc3R5bGVzIHRoYXQgYXJlIHRyYW5zaXRpb25pbmdcbiAgdGhpcy5jc3MoIGFyZ3MudG8gKTtcblxuICB0aGlzLmlzVHJhbnNpdGlvbmluZyA9IHRydWU7XG5cbn07XG5cbi8vIGRhc2ggYmVmb3JlIGFsbCBjYXAgbGV0dGVycywgaW5jbHVkaW5nIGZpcnN0IGZvclxuLy8gV2Via2l0VHJhbnNmb3JtID0+IC13ZWJraXQtdHJhbnNmb3JtXG5mdW5jdGlvbiB0b0Rhc2hlZEFsbCggc3RyICkge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoIC8oW0EtWl0pL2csIGZ1bmN0aW9uKCAkMSApIHtcbiAgICByZXR1cm4gJy0nICsgJDEudG9Mb3dlckNhc2UoKTtcbiAgfSk7XG59XG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSAnb3BhY2l0eSwnICsgdG9EYXNoZWRBbGwoIHRyYW5zZm9ybVByb3BlcnR5ICk7XG5cbnByb3RvLmVuYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbigvKiBzdHlsZSAqLykge1xuICAvLyBIQUNLIGNoYW5naW5nIHRyYW5zaXRpb25Qcm9wZXJ0eSBkdXJpbmcgYSB0cmFuc2l0aW9uXG4gIC8vIHdpbGwgY2F1c2UgdHJhbnNpdGlvbiB0byBqdW1wXG4gIGlmICggdGhpcy5pc1RyYW5zaXRpb25pbmcgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gbWFrZSBgdHJhbnNpdGlvbjogZm9vLCBiYXIsIGJhemAgZnJvbSBzdHlsZSBvYmplY3RcbiAgLy8gSEFDSyB1bi1jb21tZW50IHRoaXMgd2hlbiBlbmFibGVUcmFuc2l0aW9uIGNhbiB3b3JrXG4gIC8vIHdoaWxlIGEgdHJhbnNpdGlvbiBpcyBoYXBwZW5pbmdcbiAgLy8gdmFyIHRyYW5zaXRpb25WYWx1ZXMgPSBbXTtcbiAgLy8gZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XG4gIC8vICAgLy8gZGFzaC1pZnkgY2FtZWxDYXNlZCBwcm9wZXJ0aWVzIGxpa2UgV2Via2l0VHJhbnNpdGlvblxuICAvLyAgIHByb3AgPSB2ZW5kb3JQcm9wZXJ0aWVzWyBwcm9wIF0gfHwgcHJvcDtcbiAgLy8gICB0cmFuc2l0aW9uVmFsdWVzLnB1c2goIHRvRGFzaGVkQWxsKCBwcm9wICkgKTtcbiAgLy8gfVxuICAvLyBtdW5nZSBudW1iZXIgdG8gbWlsbGlzZWNvbmQsIHRvIG1hdGNoIHN0YWdnZXJcbiAgdmFyIGR1cmF0aW9uID0gdGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb247XG4gIGR1cmF0aW9uID0gdHlwZW9mIGR1cmF0aW9uID09ICdudW1iZXInID8gZHVyYXRpb24gKyAnbXMnIDogZHVyYXRpb247XG4gIC8vIGVuYWJsZSB0cmFuc2l0aW9uIHN0eWxlc1xuICB0aGlzLmNzcyh7XG4gICAgdHJhbnNpdGlvblByb3BlcnR5OiB0cmFuc2l0aW9uUHJvcHMsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICB0cmFuc2l0aW9uRGVsYXk6IHRoaXMuc3RhZ2dlckRlbGF5IHx8IDBcbiAgfSk7XG4gIC8vIGxpc3RlbiBmb3IgdHJhbnNpdGlvbiBlbmQgZXZlbnRcbiAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHRyYW5zaXRpb25FbmRFdmVudCwgdGhpcywgZmFsc2UgKTtcbn07XG5cbi8vIC0tLS0tIGV2ZW50cyAtLS0tLSAvL1xuXG5wcm90by5vbndlYmtpdFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG4gIHRoaXMub250cmFuc2l0aW9uZW5kKCBldmVudCApO1xufTtcblxucHJvdG8ub25vdHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgdGhpcy5vbnRyYW5zaXRpb25lbmQoIGV2ZW50ICk7XG59O1xuXG4vLyBwcm9wZXJ0aWVzIHRoYXQgSSBtdW5nZSB0byBtYWtlIG15IGxpZmUgZWFzaWVyXG52YXIgZGFzaGVkVmVuZG9yUHJvcGVydGllcyA9IHtcbiAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zZm9ybSdcbn07XG5cbnByb3RvLm9udHJhbnNpdGlvbmVuZCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgLy8gZGlzcmVnYXJkIGJ1YmJsZWQgZXZlbnRzIGZyb20gY2hpbGRyZW5cbiAgaWYgKCBldmVudC50YXJnZXQgIT09IHRoaXMuZWxlbWVudCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIF90cmFuc2l0aW9uID0gdGhpcy5fdHJhbnNuO1xuICAvLyBnZXQgcHJvcGVydHkgbmFtZSBvZiB0cmFuc2l0aW9uZWQgcHJvcGVydHksIGNvbnZlcnQgdG8gcHJlZml4LWZyZWVcbiAgdmFyIHByb3BlcnR5TmFtZSA9IGRhc2hlZFZlbmRvclByb3BlcnRpZXNbIGV2ZW50LnByb3BlcnR5TmFtZSBdIHx8IGV2ZW50LnByb3BlcnR5TmFtZTtcblxuICAvLyByZW1vdmUgcHJvcGVydHkgdGhhdCBoYXMgY29tcGxldGVkIHRyYW5zaXRpb25pbmdcbiAgZGVsZXRlIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXNbIHByb3BlcnR5TmFtZSBdO1xuICAvLyBjaGVjayBpZiBhbnkgcHJvcGVydGllcyBhcmUgc3RpbGwgdHJhbnNpdGlvbmluZ1xuICBpZiAoIGlzRW1wdHlPYmooIF90cmFuc2l0aW9uLmluZ1Byb3BlcnRpZXMgKSApIHtcbiAgICAvLyBhbGwgcHJvcGVydGllcyBoYXZlIGNvbXBsZXRlZCB0cmFuc2l0aW9uaW5nXG4gICAgdGhpcy5kaXNhYmxlVHJhbnNpdGlvbigpO1xuICB9XG4gIC8vIGNsZWFuIHN0eWxlXG4gIGlmICggcHJvcGVydHlOYW1lIGluIF90cmFuc2l0aW9uLmNsZWFuICkge1xuICAgIC8vIGNsZWFuIHVwIHN0eWxlXG4gICAgdGhpcy5lbGVtZW50LnN0eWxlWyBldmVudC5wcm9wZXJ0eU5hbWUgXSA9ICcnO1xuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5jbGVhblsgcHJvcGVydHlOYW1lIF07XG4gIH1cbiAgLy8gdHJpZ2dlciBvblRyYW5zaXRpb25FbmQgY2FsbGJhY2tcbiAgaWYgKCBwcm9wZXJ0eU5hbWUgaW4gX3RyYW5zaXRpb24ub25FbmQgKSB7XG4gICAgdmFyIG9uVHJhbnNpdGlvbkVuZCA9IF90cmFuc2l0aW9uLm9uRW5kWyBwcm9wZXJ0eU5hbWUgXTtcbiAgICBvblRyYW5zaXRpb25FbmQuY2FsbCggdGhpcyApO1xuICAgIGRlbGV0ZSBfdHJhbnNpdGlvbi5vbkVuZFsgcHJvcGVydHlOYW1lIF07XG4gIH1cblxuICB0aGlzLmVtaXRFdmVudCggJ3RyYW5zaXRpb25FbmQnLCBbIHRoaXMgXSApO1xufTtcblxucHJvdG8uZGlzYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzKCk7XG4gIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0cmFuc2l0aW9uRW5kRXZlbnQsIHRoaXMsIGZhbHNlICk7XG4gIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIHJlbW92ZXMgc3R5bGUgcHJvcGVydHkgZnJvbSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbioqL1xucHJvdG8uX3JlbW92ZVN0eWxlcyA9IGZ1bmN0aW9uKCBzdHlsZSApIHtcbiAgLy8gY2xlYW4gdXAgdHJhbnNpdGlvbiBzdHlsZXNcbiAgdmFyIGNsZWFuU3R5bGUgPSB7fTtcbiAgZm9yICggdmFyIHByb3AgaW4gc3R5bGUgKSB7XG4gICAgY2xlYW5TdHlsZVsgcHJvcCBdID0gJyc7XG4gIH1cbiAgdGhpcy5jc3MoIGNsZWFuU3R5bGUgKTtcbn07XG5cbnZhciBjbGVhblRyYW5zaXRpb25TdHlsZSA9IHtcbiAgdHJhbnNpdGlvblByb3BlcnR5OiAnJyxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnJyxcbiAgdHJhbnNpdGlvbkRlbGF5OiAnJ1xufTtcblxucHJvdG8ucmVtb3ZlVHJhbnNpdGlvblN0eWxlcyA9IGZ1bmN0aW9uKCkge1xuICAvLyByZW1vdmUgdHJhbnNpdGlvblxuICB0aGlzLmNzcyggY2xlYW5UcmFuc2l0aW9uU3R5bGUgKTtcbn07XG5cbi8vIC0tLS0tIHN0YWdnZXIgLS0tLS0gLy9cblxucHJvdG8uc3RhZ2dlciA9IGZ1bmN0aW9uKCBkZWxheSApIHtcbiAgZGVsYXkgPSBpc05hTiggZGVsYXkgKSA/IDAgOiBkZWxheTtcbiAgdGhpcy5zdGFnZ2VyRGVsYXkgPSBkZWxheSArICdtcyc7XG59O1xuXG4vLyAtLS0tLSBzaG93L2hpZGUvcmVtb3ZlIC0tLS0tIC8vXG5cbi8vIHJlbW92ZSBlbGVtZW50IGZyb20gRE9NXG5wcm90by5yZW1vdmVFbGVtID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0aGlzLmVsZW1lbnQgKTtcbiAgLy8gcmVtb3ZlIGRpc3BsYXk6IG5vbmVcbiAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnJyB9KTtcbiAgdGhpcy5lbWl0RXZlbnQoICdyZW1vdmUnLCBbIHRoaXMgXSApO1xufTtcblxucHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGp1c3QgcmVtb3ZlIGVsZW1lbnQgaWYgbm8gdHJhbnNpdGlvbiBzdXBwb3J0IG9yIG5vIHRyYW5zaXRpb25cbiAgaWYgKCAhdHJhbnNpdGlvblByb3BlcnR5IHx8ICFwYXJzZUZsb2F0KCB0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbiApICkge1xuICAgIHRoaXMucmVtb3ZlRWxlbSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIHN0YXJ0IHRyYW5zaXRpb25cbiAgdGhpcy5vbmNlKCAndHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlRWxlbSgpO1xuICB9KTtcbiAgdGhpcy5oaWRlKCk7XG59O1xuXG5wcm90by5yZXZlYWwgPSBmdW5jdGlvbigpIHtcbiAgZGVsZXRlIHRoaXMuaXNIaWRkZW47XG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xuXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcbiAgdmFyIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IHRoaXMuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSgndmlzaWJsZVN0eWxlJyk7XG4gIG9uVHJhbnNpdGlvbkVuZFsgdHJhbnNpdGlvbkVuZFByb3BlcnR5IF0gPSB0aGlzLm9uUmV2ZWFsVHJhbnNpdGlvbkVuZDtcblxuICB0aGlzLnRyYW5zaXRpb24oe1xuICAgIGZyb206IG9wdGlvbnMuaGlkZGVuU3R5bGUsXG4gICAgdG86IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcbiAgfSk7XG59O1xuXG5wcm90by5vblJldmVhbFRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbigpIHtcbiAgLy8gY2hlY2sgaWYgc3RpbGwgdmlzaWJsZVxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIGhpZGRlblxuICBpZiAoICF0aGlzLmlzSGlkZGVuICkge1xuICAgIHRoaXMuZW1pdEV2ZW50KCdyZXZlYWwnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgc3R5bGUgcHJvcGVydHkgdXNlIGZvciBoaWRlL3JldmVhbCB0cmFuc2l0aW9uIGVuZFxuICogQHBhcmFtIHtTdHJpbmd9IHN0eWxlUHJvcGVydHkgLSBoaWRkZW5TdHlsZS92aXNpYmxlU3R5bGVcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbnByb3RvLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkgPSBmdW5jdGlvbiggc3R5bGVQcm9wZXJ0eSApIHtcbiAgdmFyIG9wdGlvblN0eWxlID0gdGhpcy5sYXlvdXQub3B0aW9uc1sgc3R5bGVQcm9wZXJ0eSBdO1xuICAvLyB1c2Ugb3BhY2l0eVxuICBpZiAoIG9wdGlvblN0eWxlLm9wYWNpdHkgKSB7XG4gICAgcmV0dXJuICdvcGFjaXR5JztcbiAgfVxuICAvLyBnZXQgZmlyc3QgcHJvcGVydHlcbiAgZm9yICggdmFyIHByb3AgaW4gb3B0aW9uU3R5bGUgKSB7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnByb3RvLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgLy8gc2V0IGZsYWdcbiAgdGhpcy5pc0hpZGRlbiA9IHRydWU7XG4gIC8vIHJlbW92ZSBkaXNwbGF5OiBub25lXG4gIHRoaXMuY3NzKHsgZGlzcGxheTogJycgfSk7XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLmxheW91dC5vcHRpb25zO1xuXG4gIHZhciBvblRyYW5zaXRpb25FbmQgPSB7fTtcbiAgdmFyIHRyYW5zaXRpb25FbmRQcm9wZXJ0eSA9IHRoaXMuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eSgnaGlkZGVuU3R5bGUnKTtcbiAgb25UcmFuc2l0aW9uRW5kWyB0cmFuc2l0aW9uRW5kUHJvcGVydHkgXSA9IHRoaXMub25IaWRlVHJhbnNpdGlvbkVuZDtcblxuICB0aGlzLnRyYW5zaXRpb24oe1xuICAgIGZyb206IG9wdGlvbnMudmlzaWJsZVN0eWxlLFxuICAgIHRvOiBvcHRpb25zLmhpZGRlblN0eWxlLFxuICAgIC8vIGtlZXAgaGlkZGVuIHN0dWZmIGhpZGRlblxuICAgIGlzQ2xlYW5pbmc6IHRydWUsXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblRyYW5zaXRpb25FbmRcbiAgfSk7XG59O1xuXG5wcm90by5vbkhpZGVUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNoZWNrIGlmIHN0aWxsIGhpZGRlblxuICAvLyBkdXJpbmcgdHJhbnNpdGlvbiwgaXRlbSBtYXkgaGF2ZSBiZWVuIHVuLWhpZGRlblxuICBpZiAoIHRoaXMuaXNIaWRkZW4gKSB7XG4gICAgdGhpcy5jc3MoeyBkaXNwbGF5OiAnbm9uZScgfSk7XG4gICAgdGhpcy5lbWl0RXZlbnQoJ2hpZGUnKTtcbiAgfVxufTtcblxucHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNzcyh7XG4gICAgcG9zaXRpb246ICcnLFxuICAgIGxlZnQ6ICcnLFxuICAgIHJpZ2h0OiAnJyxcbiAgICB0b3A6ICcnLFxuICAgIGJvdHRvbTogJycsXG4gICAgdHJhbnNpdGlvbjogJycsXG4gICAgdHJhbnNmb3JtOiAnJ1xuICB9KTtcbn07XG5cbnJldHVybiBJdGVtO1xuXG59KSk7XG4iLCAiLyohXG4gKiBPdXRsYXllciB2Mi4xLjFcbiAqIHRoZSBicmFpbnMgYW5kIGd1dHMgb2YgYSBsYXlvdXQgbGlicmFyeVxuICogTUlUIGxpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3csIGZhY3RvcnkgKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gdW5pdmVyc2FsIG1vZHVsZSBkZWZpbml0aW9uXG4gIC8qIGpzaGludCBzdHJpY3Q6IGZhbHNlICovIC8qIGdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIHJlcXVpcmUgKi9cbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAvLyBBTUQgLSBSZXF1aXJlSlNcbiAgICBkZWZpbmUoIFtcbiAgICAgICAgJ2V2LWVtaXR0ZXIvZXYtZW1pdHRlcicsXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZScsXG4gICAgICAgICdmaXp6eS11aS11dGlscy91dGlscycsXG4gICAgICAgICcuL2l0ZW0nXG4gICAgICBdLFxuICAgICAgZnVuY3Rpb24oIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0gKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KCB3aW5kb3csIEV2RW1pdHRlciwgZ2V0U2l6ZSwgdXRpbHMsIEl0ZW0pO1xuICAgICAgfVxuICAgICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgcmVxdWlyZSgnZXYtZW1pdHRlcicpLFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKSxcbiAgICAgIHJlcXVpcmUoJ2Zpenp5LXVpLXV0aWxzJyksXG4gICAgICByZXF1aXJlKCcuL2l0ZW0nKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuT3V0bGF5ZXIgPSBmYWN0b3J5KFxuICAgICAgd2luZG93LFxuICAgICAgd2luZG93LkV2RW1pdHRlcixcbiAgICAgIHdpbmRvdy5nZXRTaXplLFxuICAgICAgd2luZG93LmZpenp5VUlVdGlscyxcbiAgICAgIHdpbmRvdy5PdXRsYXllci5JdGVtXG4gICAgKTtcbiAgfVxuXG59KCB3aW5kb3csIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyLCBnZXRTaXplLCB1dGlscywgSXRlbSApIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0gdmFycyAtLS0tLSAvL1xuXG52YXIgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xudmFyIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG52YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIE91dGxheWVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyc1xudmFyIEdVSUQgPSAwO1xuLy8gaW50ZXJuYWwgc3RvcmUgb2YgYWxsIE91dGxheWVyIGludGFuY2VzXG52YXIgaW5zdGFuY2VzID0ge307XG5cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnQsIFN0cmluZ30gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBPdXRsYXllciggZWxlbWVudCwgb3B0aW9ucyApIHtcbiAgdmFyIHF1ZXJ5RWxlbWVudCA9IHV0aWxzLmdldFF1ZXJ5RWxlbWVudCggZWxlbWVudCApO1xuICBpZiAoICFxdWVyeUVsZW1lbnQgKSB7XG4gICAgaWYgKCBjb25zb2xlICkge1xuICAgICAgY29uc29sZS5lcnJvciggJ0JhZCBlbGVtZW50IGZvciAnICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lc3BhY2UgK1xuICAgICAgICAnOiAnICsgKCBxdWVyeUVsZW1lbnQgfHwgZWxlbWVudCApICk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmVsZW1lbnQgPSBxdWVyeUVsZW1lbnQ7XG4gIC8vIGFkZCBqUXVlcnlcbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGpRdWVyeSggdGhpcy5lbGVtZW50ICk7XG4gIH1cblxuICAvLyBvcHRpb25zXG4gIHRoaXMub3B0aW9ucyA9IHV0aWxzLmV4dGVuZCgge30sIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMgKTtcbiAgdGhpcy5vcHRpb24oIG9wdGlvbnMgKTtcblxuICAvLyBhZGQgaWQgZm9yIE91dGxheWVyLmdldEZyb21FbGVtZW50XG4gIHZhciBpZCA9ICsrR1VJRDtcbiAgdGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRCA9IGlkOyAvLyBleHBhbmRvXG4gIGluc3RhbmNlc1sgaWQgXSA9IHRoaXM7IC8vIGFzc29jaWF0ZSB2aWEgaWRcblxuICAvLyBraWNrIGl0IG9mZlxuICB0aGlzLl9jcmVhdGUoKTtcblxuICB2YXIgaXNJbml0TGF5b3V0ID0gdGhpcy5fZ2V0T3B0aW9uKCdpbml0TGF5b3V0Jyk7XG4gIGlmICggaXNJbml0TGF5b3V0ICkge1xuICAgIHRoaXMubGF5b3V0KCk7XG4gIH1cbn1cblxuLy8gc2V0dGluZ3MgYXJlIGZvciBpbnRlcm5hbCB1c2Ugb25seVxuT3V0bGF5ZXIubmFtZXNwYWNlID0gJ291dGxheWVyJztcbk91dGxheWVyLkl0ZW0gPSBJdGVtO1xuXG4vLyBkZWZhdWx0IG9wdGlvbnNcbk91dGxheWVyLmRlZmF1bHRzID0ge1xuICBjb250YWluZXJTdHlsZToge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH0sXG4gIGluaXRMYXlvdXQ6IHRydWUsXG4gIG9yaWdpbkxlZnQ6IHRydWUsXG4gIG9yaWdpblRvcDogdHJ1ZSxcbiAgcmVzaXplOiB0cnVlLFxuICByZXNpemVDb250YWluZXI6IHRydWUsXG4gIC8vIGl0ZW0gb3B0aW9uc1xuICB0cmFuc2l0aW9uRHVyYXRpb246ICcwLjRzJyxcbiAgaGlkZGVuU3R5bGU6IHtcbiAgICBvcGFjaXR5OiAwLFxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuMDAxKSdcbiAgfSxcbiAgdmlzaWJsZVN0eWxlOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgfVxufTtcblxudmFyIHByb3RvID0gT3V0bGF5ZXIucHJvdG90eXBlO1xuLy8gaW5oZXJpdCBFdkVtaXR0ZXJcbnV0aWxzLmV4dGVuZCggcHJvdG8sIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuLyoqXG4gKiBzZXQgb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqL1xucHJvdG8ub3B0aW9uID0gZnVuY3Rpb24oIG9wdHMgKSB7XG4gIHV0aWxzLmV4dGVuZCggdGhpcy5vcHRpb25zLCBvcHRzICk7XG59O1xuXG4vKipcbiAqIGdldCBiYWNrd2FyZHMgY29tcGF0aWJsZSBvcHRpb24gdmFsdWUsIGNoZWNrIG9sZCBuYW1lXG4gKi9cbnByb3RvLl9nZXRPcHRpb24gPSBmdW5jdGlvbiggb3B0aW9uICkge1xuICB2YXIgb2xkT3B0aW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5jb21wYXRPcHRpb25zWyBvcHRpb24gXTtcbiAgcmV0dXJuIG9sZE9wdGlvbiAmJiB0aGlzLm9wdGlvbnNbIG9sZE9wdGlvbiBdICE9PSB1bmRlZmluZWQgP1xuICAgIHRoaXMub3B0aW9uc1sgb2xkT3B0aW9uIF0gOiB0aGlzLm9wdGlvbnNbIG9wdGlvbiBdO1xufTtcblxuT3V0bGF5ZXIuY29tcGF0T3B0aW9ucyA9IHtcbiAgLy8gY3VycmVudE5hbWU6IG9sZE5hbWVcbiAgaW5pdExheW91dDogJ2lzSW5pdExheW91dCcsXG4gIGhvcml6b250YWw6ICdpc0hvcml6b250YWwnLFxuICBsYXlvdXRJbnN0YW50OiAnaXNMYXlvdXRJbnN0YW50JyxcbiAgb3JpZ2luTGVmdDogJ2lzT3JpZ2luTGVmdCcsXG4gIG9yaWdpblRvcDogJ2lzT3JpZ2luVG9wJyxcbiAgcmVzaXplOiAnaXNSZXNpemVCb3VuZCcsXG4gIHJlc2l6ZUNvbnRhaW5lcjogJ2lzUmVzaXppbmdDb250YWluZXInXG59O1xuXG5wcm90by5fY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGdldCBpdGVtcyBmcm9tIGNoaWxkcmVuXG4gIHRoaXMucmVsb2FkSXRlbXMoKTtcbiAgLy8gZWxlbWVudHMgdGhhdCBhZmZlY3QgbGF5b3V0LCBidXQgYXJlIG5vdCBsYWlkIG91dFxuICB0aGlzLnN0YW1wcyA9IFtdO1xuICB0aGlzLnN0YW1wKCB0aGlzLm9wdGlvbnMuc3RhbXAgKTtcbiAgLy8gc2V0IGNvbnRhaW5lciBzdHlsZVxuICB1dGlscy5leHRlbmQoIHRoaXMuZWxlbWVudC5zdHlsZSwgdGhpcy5vcHRpb25zLmNvbnRhaW5lclN0eWxlICk7XG5cbiAgLy8gYmluZCByZXNpemUgbWV0aG9kXG4gIHZhciBjYW5CaW5kUmVzaXplID0gdGhpcy5fZ2V0T3B0aW9uKCdyZXNpemUnKTtcbiAgaWYgKCBjYW5CaW5kUmVzaXplICkge1xuICAgIHRoaXMuYmluZFJlc2l6ZSgpO1xuICB9XG59O1xuXG4vLyBnb2VzIHRocm91Z2ggYWxsIGNoaWxkcmVuIGFnYWluIGFuZCBnZXRzIGJyaWNrcyBpbiBwcm9wZXIgb3JkZXJcbnByb3RvLnJlbG9hZEl0ZW1zID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICB0aGlzLml0ZW1zID0gdGhpcy5faXRlbWl6ZSggdGhpcy5lbGVtZW50LmNoaWxkcmVuICk7XG59O1xuXG5cbi8qKlxuICogdHVybiBlbGVtZW50cyBpbnRvIE91dGxheWVyLkl0ZW1zIHRvIGJlIHVzZWQgaW4gbGF5b3V0XG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIGNvbGxlY3Rpb24gb2YgbmV3IE91dGxheWVyIEl0ZW1zXG4gKi9cbnByb3RvLl9pdGVtaXplID0gZnVuY3Rpb24oIGVsZW1zICkge1xuXG4gIHZhciBpdGVtRWxlbXMgPSB0aGlzLl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzKCBlbGVtcyApO1xuICB2YXIgSXRlbSA9IHRoaXMuY29uc3RydWN0b3IuSXRlbTtcblxuICAvLyBjcmVhdGUgbmV3IE91dGxheWVyIEl0ZW1zIGZvciBjb2xsZWN0aW9uXG4gIHZhciBpdGVtcyA9IFtdO1xuICBmb3IgKCB2YXIgaT0wOyBpIDwgaXRlbUVsZW1zLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBlbGVtID0gaXRlbUVsZW1zW2ldO1xuICAgIHZhciBpdGVtID0gbmV3IEl0ZW0oIGVsZW0sIHRoaXMgKTtcbiAgICBpdGVtcy5wdXNoKCBpdGVtICk7XG4gIH1cblxuICByZXR1cm4gaXRlbXM7XG59O1xuXG4vKipcbiAqIGdldCBpdGVtIGVsZW1lbnRzIHRvIGJlIHVzZWQgaW4gbGF5b3V0XG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEhUTUxFbGVtZW50fSBlbGVtc1xuICogQHJldHVybnMge0FycmF5fSBpdGVtcyAtIGl0ZW0gZWxlbWVudHNcbiAqL1xucHJvdG8uX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHJldHVybiB1dGlscy5maWx0ZXJGaW5kRWxlbWVudHMoIGVsZW1zLCB0aGlzLm9wdGlvbnMuaXRlbVNlbGVjdG9yICk7XG59O1xuXG4vKipcbiAqIGdldHRlciBtZXRob2QgZm9yIGdldHRpbmcgaXRlbSBlbGVtZW50c1xuICogQHJldHVybnMge0FycmF5fSBlbGVtcyAtIGNvbGxlY3Rpb24gb2YgaXRlbSBlbGVtZW50c1xuICovXG5wcm90by5nZXRJdGVtRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuaXRlbXMubWFwKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICByZXR1cm4gaXRlbS5lbGVtZW50O1xuICB9KTtcbn07XG5cbi8vIC0tLS0tIGluaXQgJiBsYXlvdXQgLS0tLS0gLy9cblxuLyoqXG4gKiBsYXlzIG91dCBhbGwgaXRlbXNcbiAqL1xucHJvdG8ubGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XG4gIHRoaXMuX21hbmFnZVN0YW1wcygpO1xuXG4gIC8vIGRvbid0IGFuaW1hdGUgZmlyc3QgbGF5b3V0XG4gIHZhciBsYXlvdXRJbnN0YW50ID0gdGhpcy5fZ2V0T3B0aW9uKCdsYXlvdXRJbnN0YW50Jyk7XG4gIHZhciBpc0luc3RhbnQgPSBsYXlvdXRJbnN0YW50ICE9PSB1bmRlZmluZWQgP1xuICAgIGxheW91dEluc3RhbnQgOiAhdGhpcy5faXNMYXlvdXRJbml0ZWQ7XG4gIHRoaXMubGF5b3V0SXRlbXMoIHRoaXMuaXRlbXMsIGlzSW5zdGFudCApO1xuXG4gIC8vIGZsYWcgZm9yIGluaXRhbGl6ZWRcbiAgdGhpcy5faXNMYXlvdXRJbml0ZWQgPSB0cnVlO1xufTtcblxuLy8gX2luaXQgaXMgYWxpYXMgZm9yIGxheW91dFxucHJvdG8uX2luaXQgPSBwcm90by5sYXlvdXQ7XG5cbi8qKlxuICogbG9naWMgYmVmb3JlIGFueSBuZXcgbGF5b3V0XG4gKi9cbnByb3RvLl9yZXNldExheW91dCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmdldFNpemUoKTtcbn07XG5cblxucHJvdG8uZ2V0U2l6ZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNpemUgPSBnZXRTaXplKCB0aGlzLmVsZW1lbnQgKTtcbn07XG5cbi8qKlxuICogZ2V0IG1lYXN1cmVtZW50IGZyb20gb3B0aW9uLCBmb3IgY29sdW1uV2lkdGgsIHJvd0hlaWdodCwgZ3V0dGVyXG4gKiBpZiBvcHRpb24gaXMgU3RyaW5nIC0+IGdldCBlbGVtZW50IGZyb20gc2VsZWN0b3Igc3RyaW5nLCAmIGdldCBzaXplIG9mIGVsZW1lbnRcbiAqIGlmIG9wdGlvbiBpcyBFbGVtZW50IC0+IGdldCBzaXplIG9mIGVsZW1lbnRcbiAqIGVsc2UgdXNlIG9wdGlvbiBhcyBhIG51bWJlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZWFzdXJlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSB3aWR0aCBvciBoZWlnaHRcbiAqIEBwcml2YXRlXG4gKi9cbnByb3RvLl9nZXRNZWFzdXJlbWVudCA9IGZ1bmN0aW9uKCBtZWFzdXJlbWVudCwgc2l6ZSApIHtcbiAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9uc1sgbWVhc3VyZW1lbnQgXTtcbiAgdmFyIGVsZW07XG4gIGlmICggIW9wdGlvbiApIHtcbiAgICAvLyBkZWZhdWx0IHRvIDBcbiAgICB0aGlzWyBtZWFzdXJlbWVudCBdID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyB1c2Ugb3B0aW9uIGFzIGFuIGVsZW1lbnRcbiAgICBpZiAoIHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgKSB7XG4gICAgICBlbGVtID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoIG9wdGlvbiApO1xuICAgIH0gZWxzZSBpZiAoIG9wdGlvbiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICkge1xuICAgICAgZWxlbSA9IG9wdGlvbjtcbiAgICB9XG4gICAgLy8gdXNlIHNpemUgb2YgZWxlbWVudCwgaWYgZWxlbWVudFxuICAgIHRoaXNbIG1lYXN1cmVtZW50IF0gPSBlbGVtID8gZ2V0U2l6ZSggZWxlbSApWyBzaXplIF0gOiBvcHRpb247XG4gIH1cbn07XG5cbi8qKlxuICogbGF5b3V0IGEgY29sbGVjdGlvbiBvZiBpdGVtIGVsZW1lbnRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5wcm90by5sYXlvdXRJdGVtcyA9IGZ1bmN0aW9uKCBpdGVtcywgaXNJbnN0YW50ICkge1xuICBpdGVtcyA9IHRoaXMuX2dldEl0ZW1zRm9yTGF5b3V0KCBpdGVtcyApO1xuXG4gIHRoaXMuX2xheW91dEl0ZW1zKCBpdGVtcywgaXNJbnN0YW50ICk7XG5cbiAgdGhpcy5fcG9zdExheW91dCgpO1xufTtcblxuLyoqXG4gKiBnZXQgdGhlIGl0ZW1zIHRvIGJlIGxhaWQgb3V0XG4gKiB5b3UgbWF5IHdhbnQgdG8gc2tpcCBvdmVyIHNvbWUgaXRlbXNcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zXG4gKi9cbnByb3RvLl9nZXRJdGVtc0ZvckxheW91dCA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgcmV0dXJuIGl0ZW1zLmZpbHRlciggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgcmV0dXJuICFpdGVtLmlzSWdub3JlZDtcbiAgfSk7XG59O1xuXG4vKipcbiAqIGxheW91dCBpdGVtc1xuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbnN0YW50XG4gKi9cbnByb3RvLl9sYXlvdXRJdGVtcyA9IGZ1bmN0aW9uKCBpdGVtcywgaXNJbnN0YW50ICkge1xuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAnbGF5b3V0JywgaXRlbXMgKTtcblxuICBpZiAoICFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoICkge1xuICAgIC8vIG5vIGl0ZW1zLCBlbWl0IGV2ZW50IHdpdGggZW1wdHkgYXJyYXlcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcXVldWUgPSBbXTtcblxuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICAvLyBnZXQgeC95IG9iamVjdCBmcm9tIG1ldGhvZFxuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiggaXRlbSApO1xuICAgIC8vIGVucXVldWVcbiAgICBwb3NpdGlvbi5pdGVtID0gaXRlbTtcbiAgICBwb3NpdGlvbi5pc0luc3RhbnQgPSBpc0luc3RhbnQgfHwgaXRlbS5pc0xheW91dEluc3RhbnQ7XG4gICAgcXVldWUucHVzaCggcG9zaXRpb24gKTtcbiAgfSwgdGhpcyApO1xuXG4gIHRoaXMuX3Byb2Nlc3NMYXlvdXRRdWV1ZSggcXVldWUgKTtcbn07XG5cbi8qKlxuICogZ2V0IGl0ZW0gbGF5b3V0IHBvc2l0aW9uXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cbiAqIEByZXR1cm5zIHtPYmplY3R9IHggYW5kIHkgcG9zaXRpb25cbiAqL1xucHJvdG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCAvKiBpdGVtICovICkge1xuICByZXR1cm4ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xufTtcblxuLyoqXG4gKiBpdGVyYXRlIG92ZXIgYXJyYXkgYW5kIHBvc2l0aW9uIGVhY2ggaXRlbVxuICogUmVhc29uIGJlaW5nIC0gc2VwYXJhdGluZyB0aGlzIGxvZ2ljIHByZXZlbnRzICdsYXlvdXQgaW52YWxpZGF0aW9uJ1xuICogdGh4IEBwYXVsX2lyaXNoXG4gKiBAcGFyYW0ge0FycmF5fSBxdWV1ZVxuICovXG5wcm90by5fcHJvY2Vzc0xheW91dFF1ZXVlID0gZnVuY3Rpb24oIHF1ZXVlICkge1xuICB0aGlzLnVwZGF0ZVN0YWdnZXIoKTtcbiAgcXVldWUuZm9yRWFjaCggZnVuY3Rpb24oIG9iaiwgaSApIHtcbiAgICB0aGlzLl9wb3NpdGlvbkl0ZW0oIG9iai5pdGVtLCBvYmoueCwgb2JqLnksIG9iai5pc0luc3RhbnQsIGkgKTtcbiAgfSwgdGhpcyApO1xufTtcblxuLy8gc2V0IHN0YWdnZXIgZnJvbSBvcHRpb24gaW4gbWlsbGlzZWNvbmRzIG51bWJlclxucHJvdG8udXBkYXRlU3RhZ2dlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhZ2dlciA9IHRoaXMub3B0aW9ucy5zdGFnZ2VyO1xuICBpZiAoIHN0YWdnZXIgPT09IG51bGwgfHwgc3RhZ2dlciA9PT0gdW5kZWZpbmVkICkge1xuICAgIHRoaXMuc3RhZ2dlciA9IDA7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuc3RhZ2dlciA9IGdldE1pbGxpc2Vjb25kcyggc3RhZ2dlciApO1xuICByZXR1cm4gdGhpcy5zdGFnZ2VyO1xufTtcblxuLyoqXG4gKiBTZXRzIHBvc2l0aW9uIG9mIGl0ZW0gaW4gRE9NXG4gKiBAcGFyYW0ge091dGxheWVyLkl0ZW19IGl0ZW1cbiAqIEBwYXJhbSB7TnVtYmVyfSB4IC0gaG9yaXpvbnRhbCBwb3NpdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHkgLSB2ZXJ0aWNhbCBwb3NpdGlvblxuICogQHBhcmFtIHtCb29sZWFufSBpc0luc3RhbnQgLSBkaXNhYmxlcyB0cmFuc2l0aW9uc1xuICovXG5wcm90by5fcG9zaXRpb25JdGVtID0gZnVuY3Rpb24oIGl0ZW0sIHgsIHksIGlzSW5zdGFudCwgaSApIHtcbiAgaWYgKCBpc0luc3RhbnQgKSB7XG4gICAgLy8gaWYgbm90IHRyYW5zaXRpb24sIGp1c3Qgc2V0IENTU1xuICAgIGl0ZW0uZ29UbyggeCwgeSApO1xuICB9IGVsc2Uge1xuICAgIGl0ZW0uc3RhZ2dlciggaSAqIHRoaXMuc3RhZ2dlciApO1xuICAgIGl0ZW0ubW92ZVRvKCB4LCB5ICk7XG4gIH1cbn07XG5cbi8qKlxuICogQW55IGxvZ2ljIHlvdSB3YW50IHRvIGRvIGFmdGVyIGVhY2ggbGF5b3V0LFxuICogaS5lLiBzaXplIHRoZSBjb250YWluZXJcbiAqL1xucHJvdG8uX3Bvc3RMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZXNpemVDb250YWluZXIoKTtcbn07XG5cbnByb3RvLnJlc2l6ZUNvbnRhaW5lciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXNSZXNpemluZ0NvbnRhaW5lciA9IHRoaXMuX2dldE9wdGlvbigncmVzaXplQ29udGFpbmVyJyk7XG4gIGlmICggIWlzUmVzaXppbmdDb250YWluZXIgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBzaXplID0gdGhpcy5fZ2V0Q29udGFpbmVyU2l6ZSgpO1xuICBpZiAoIHNpemUgKSB7XG4gICAgdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSggc2l6ZS53aWR0aCwgdHJ1ZSApO1xuICAgIHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUoIHNpemUuaGVpZ2h0LCBmYWxzZSApO1xuICB9XG59O1xuXG4vKipcbiAqIFNldHMgd2lkdGggb3IgaGVpZ2h0IG9mIGNvbnRhaW5lciBpZiByZXR1cm5lZFxuICogQHJldHVybnMge09iamVjdH0gc2l6ZVxuICogICBAcGFyYW0ge051bWJlcn0gd2lkdGhcbiAqICAgQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICovXG5wcm90by5fZ2V0Q29udGFpbmVyU2l6ZSA9IG5vb3A7XG5cbi8qKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1lYXN1cmUgLSBzaXplIG9mIHdpZHRoIG9yIGhlaWdodFxuICogQHBhcmFtIHtCb29sZWFufSBpc1dpZHRoXG4gKi9cbnByb3RvLl9zZXRDb250YWluZXJNZWFzdXJlID0gZnVuY3Rpb24oIG1lYXN1cmUsIGlzV2lkdGggKSB7XG4gIGlmICggbWVhc3VyZSA9PT0gdW5kZWZpbmVkICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBlbGVtU2l6ZSA9IHRoaXMuc2l6ZTtcbiAgLy8gYWRkIHBhZGRpbmcgYW5kIGJvcmRlciB3aWR0aCBpZiBib3JkZXIgYm94XG4gIGlmICggZWxlbVNpemUuaXNCb3JkZXJCb3ggKSB7XG4gICAgbWVhc3VyZSArPSBpc1dpZHRoID8gZWxlbVNpemUucGFkZGluZ0xlZnQgKyBlbGVtU2l6ZS5wYWRkaW5nUmlnaHQgK1xuICAgICAgZWxlbVNpemUuYm9yZGVyTGVmdFdpZHRoICsgZWxlbVNpemUuYm9yZGVyUmlnaHRXaWR0aCA6XG4gICAgICBlbGVtU2l6ZS5wYWRkaW5nQm90dG9tICsgZWxlbVNpemUucGFkZGluZ1RvcCArXG4gICAgICBlbGVtU2l6ZS5ib3JkZXJUb3BXaWR0aCArIGVsZW1TaXplLmJvcmRlckJvdHRvbVdpZHRoO1xuICB9XG5cbiAgbWVhc3VyZSA9IE1hdGgubWF4KCBtZWFzdXJlLCAwICk7XG4gIHRoaXMuZWxlbWVudC5zdHlsZVsgaXNXaWR0aCA/ICd3aWR0aCcgOiAnaGVpZ2h0JyBdID0gbWVhc3VyZSArICdweCc7XG59O1xuXG4vKipcbiAqIGVtaXQgZXZlbnRDb21wbGV0ZSBvbiBhIGNvbGxlY3Rpb24gb2YgaXRlbXMgZXZlbnRzXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lXG4gKiBAcGFyYW0ge0FycmF5fSBpdGVtcyAtIE91dGxheWVyLkl0ZW1zXG4gKi9cbnByb3RvLl9lbWl0Q29tcGxldGVPbkl0ZW1zID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgaXRlbXMgKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XG4gICAgX3RoaXMuZGlzcGF0Y2hFdmVudCggZXZlbnROYW1lICsgJ0NvbXBsZXRlJywgbnVsbCwgWyBpdGVtcyBdICk7XG4gIH1cblxuICB2YXIgY291bnQgPSBpdGVtcy5sZW5ndGg7XG4gIGlmICggIWl0ZW1zIHx8ICFjb3VudCApIHtcbiAgICBvbkNvbXBsZXRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRvbmVDb3VudCA9IDA7XG4gIGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgZG9uZUNvdW50Kys7XG4gICAgaWYgKCBkb25lQ291bnQgPT0gY291bnQgKSB7XG4gICAgICBvbkNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gYmluZCBjYWxsYmFja1xuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICBpdGVtLm9uY2UoIGV2ZW50TmFtZSwgdGljayApO1xuICB9KTtcbn07XG5cbi8qKlxuICogZW1pdHMgZXZlbnRzIHZpYSBFdkVtaXR0ZXIgYW5kIGpRdWVyeSBldmVudHNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIC0gbmFtZSBvZiBldmVudFxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBvcmlnaW5hbCBldmVudFxuICogQHBhcmFtIHtBcnJheX0gYXJncyAtIGV4dHJhIGFyZ3VtZW50c1xuICovXG5wcm90by5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oIHR5cGUsIGV2ZW50LCBhcmdzICkge1xuICAvLyBhZGQgb3JpZ2luYWwgZXZlbnQgdG8gYXJndW1lbnRzXG4gIHZhciBlbWl0QXJncyA9IGV2ZW50ID8gWyBldmVudCBdLmNvbmNhdCggYXJncyApIDogYXJncztcbiAgdGhpcy5lbWl0RXZlbnQoIHR5cGUsIGVtaXRBcmdzICk7XG5cbiAgaWYgKCBqUXVlcnkgKSB7XG4gICAgLy8gc2V0IHRoaXMuJGVsZW1lbnRcbiAgICB0aGlzLiRlbGVtZW50ID0gdGhpcy4kZWxlbWVudCB8fCBqUXVlcnkoIHRoaXMuZWxlbWVudCApO1xuICAgIGlmICggZXZlbnQgKSB7XG4gICAgICAvLyBjcmVhdGUgalF1ZXJ5IGV2ZW50XG4gICAgICB2YXIgJGV2ZW50ID0galF1ZXJ5LkV2ZW50KCBldmVudCApO1xuICAgICAgJGV2ZW50LnR5cGUgPSB0eXBlO1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCAkZXZlbnQsIGFyZ3MgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8ganVzdCB0cmlnZ2VyIHdpdGggdHlwZSBpZiBubyBldmVudCBhdmFpbGFibGVcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlciggdHlwZSwgYXJncyApO1xuICAgIH1cbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaWdub3JlICYgc3RhbXBzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cblxuLyoqXG4gKiBrZWVwIGl0ZW0gaW4gY29sbGVjdGlvbiwgYnV0IGRvIG5vdCBsYXkgaXQgb3V0XG4gKiBpZ25vcmVkIGl0ZW1zIGRvIG5vdCBnZXQgc2tpcHBlZCBpbiBsYXlvdXRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICovXG5wcm90by5pZ25vcmUgPSBmdW5jdGlvbiggZWxlbSApIHtcbiAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcbiAgaWYgKCBpdGVtICkge1xuICAgIGl0ZW0uaXNJZ25vcmVkID0gdHJ1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiByZXR1cm4gaXRlbSB0byBsYXlvdXQgY29sbGVjdGlvblxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKi9cbnByb3RvLnVuaWdub3JlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBpdGVtID0gdGhpcy5nZXRJdGVtKCBlbGVtICk7XG4gIGlmICggaXRlbSApIHtcbiAgICBkZWxldGUgaXRlbS5pc0lnbm9yZWQ7XG4gIH1cbn07XG5cbi8qKlxuICogYWRkcyBlbGVtZW50cyB0byBzdGFtcHNcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXG4gKi9cbnByb3RvLnN0YW1wID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XG4gIGlmICggIWVsZW1zICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuc3RhbXBzID0gdGhpcy5zdGFtcHMuY29uY2F0KCBlbGVtcyApO1xuICAvLyBpZ25vcmVcbiAgZWxlbXMuZm9yRWFjaCggdGhpcy5pZ25vcmUsIHRoaXMgKTtcbn07XG5cbi8qKlxuICogcmVtb3ZlcyBlbGVtZW50cyB0byBzdGFtcHNcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBvciBFbGVtZW50fSBlbGVtc1xuICovXG5wcm90by51bnN0YW1wID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBlbGVtcyA9IHRoaXMuX2ZpbmQoIGVsZW1zICk7XG4gIGlmICggIWVsZW1zICl7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgLy8gZmlsdGVyIG91dCByZW1vdmVkIHN0YW1wIGVsZW1lbnRzXG4gICAgdXRpbHMucmVtb3ZlRnJvbSggdGhpcy5zdGFtcHMsIGVsZW0gKTtcbiAgICB0aGlzLnVuaWdub3JlKCBlbGVtICk7XG4gIH0sIHRoaXMgKTtcbn07XG5cbi8qKlxuICogZmluZHMgY2hpbGQgZWxlbWVudHNcbiAqIEBwYXJhbSB7Tm9kZUxpc3QsIEFycmF5LCBFbGVtZW50LCBvciBTdHJpbmd9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGVsZW1zXG4gKi9cbnByb3RvLl9maW5kID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICBpZiAoICFlbGVtcyApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gaWYgc3RyaW5nLCB1c2UgYXJndW1lbnQgYXMgc2VsZWN0b3Igc3RyaW5nXG4gIGlmICggdHlwZW9mIGVsZW1zID09ICdzdHJpbmcnICkge1xuICAgIGVsZW1zID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGVsZW1zICk7XG4gIH1cbiAgZWxlbXMgPSB1dGlscy5tYWtlQXJyYXkoIGVsZW1zICk7XG4gIHJldHVybiBlbGVtcztcbn07XG5cbnByb3RvLl9tYW5hZ2VTdGFtcHMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCAhdGhpcy5zdGFtcHMgfHwgIXRoaXMuc3RhbXBzLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9nZXRCb3VuZGluZ1JlY3QoKTtcblxuICB0aGlzLnN0YW1wcy5mb3JFYWNoKCB0aGlzLl9tYW5hZ2VTdGFtcCwgdGhpcyApO1xufTtcblxuLy8gdXBkYXRlIGJvdW5kaW5nTGVmdCAvIFRvcFxucHJvdG8uX2dldEJvdW5kaW5nUmVjdCA9IGZ1bmN0aW9uKCkge1xuICAvLyBnZXQgYm91bmRpbmcgcmVjdCBmb3IgY29udGFpbmVyIGVsZW1lbnRcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gIHRoaXMuX2JvdW5kaW5nUmVjdCA9IHtcbiAgICBsZWZ0OiBib3VuZGluZ1JlY3QubGVmdCArIHNpemUucGFkZGluZ0xlZnQgKyBzaXplLmJvcmRlckxlZnRXaWR0aCxcbiAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgKyBzaXplLnBhZGRpbmdUb3AgKyBzaXplLmJvcmRlclRvcFdpZHRoLFxuICAgIHJpZ2h0OiBib3VuZGluZ1JlY3QucmlnaHQgLSAoIHNpemUucGFkZGluZ1JpZ2h0ICsgc2l6ZS5ib3JkZXJSaWdodFdpZHRoICksXG4gICAgYm90dG9tOiBib3VuZGluZ1JlY3QuYm90dG9tIC0gKCBzaXplLnBhZGRpbmdCb3R0b20gKyBzaXplLmJvcmRlckJvdHRvbVdpZHRoIClcbiAgfTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fSBzdGFtcFxuKiovXG5wcm90by5fbWFuYWdlU3RhbXAgPSBub29wO1xuXG4vKipcbiAqIGdldCB4L3kgcG9zaXRpb24gb2YgZWxlbWVudCByZWxhdGl2ZSB0byBjb250YWluZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvZmZzZXQgLSBoYXMgbGVmdCwgdG9wLCByaWdodCwgYm90dG9tXG4gKi9cbnByb3RvLl9nZXRFbGVtZW50T2Zmc2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIHZhciBib3VuZGluZ1JlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgdGhpc1JlY3QgPSB0aGlzLl9ib3VuZGluZ1JlY3Q7XG4gIHZhciBzaXplID0gZ2V0U2l6ZSggZWxlbSApO1xuICB2YXIgb2Zmc2V0ID0ge1xuICAgIGxlZnQ6IGJvdW5kaW5nUmVjdC5sZWZ0IC0gdGhpc1JlY3QubGVmdCAtIHNpemUubWFyZ2luTGVmdCxcbiAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgLSB0aGlzUmVjdC50b3AgLSBzaXplLm1hcmdpblRvcCxcbiAgICByaWdodDogdGhpc1JlY3QucmlnaHQgLSBib3VuZGluZ1JlY3QucmlnaHQgLSBzaXplLm1hcmdpblJpZ2h0LFxuICAgIGJvdHRvbTogdGhpc1JlY3QuYm90dG9tIC0gYm91bmRpbmdSZWN0LmJvdHRvbSAtIHNpemUubWFyZ2luQm90dG9tXG4gIH07XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSByZXNpemUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuLy8gZW5hYmxlIGV2ZW50IGhhbmRsZXJzIGZvciBsaXN0ZW5lcnNcbi8vIGkuZS4gcmVzaXplIC0+IG9ucmVzaXplXG5wcm90by5oYW5kbGVFdmVudCA9IHV0aWxzLmhhbmRsZUV2ZW50O1xuXG4vKipcbiAqIEJpbmQgbGF5b3V0IHRvIHdpbmRvdyByZXNpemluZ1xuICovXG5wcm90by5iaW5kUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAncmVzaXplJywgdGhpcyApO1xuICB0aGlzLmlzUmVzaXplQm91bmQgPSB0cnVlO1xufTtcblxuLyoqXG4gKiBVbmJpbmQgbGF5b3V0IHRvIHdpbmRvdyByZXNpemluZ1xuICovXG5wcm90by51bmJpbmRSZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCB0aGlzICk7XG4gIHRoaXMuaXNSZXNpemVCb3VuZCA9IGZhbHNlO1xufTtcblxucHJvdG8ub25yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZXNpemUoKTtcbn07XG5cbnV0aWxzLmRlYm91bmNlTWV0aG9kKCBPdXRsYXllciwgJ29ucmVzaXplJywgMTAwICk7XG5cbnByb3RvLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBkb24ndCB0cmlnZ2VyIGlmIHNpemUgZGlkIG5vdCBjaGFuZ2VcbiAgLy8gb3IgaWYgcmVzaXplIHdhcyB1bmJvdW5kLiBTZWUgIzlcbiAgaWYgKCAhdGhpcy5pc1Jlc2l6ZUJvdW5kIHx8ICF0aGlzLm5lZWRzUmVzaXplTGF5b3V0KCkgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5sYXlvdXQoKTtcbn07XG5cbi8qKlxuICogY2hlY2sgaWYgbGF5b3V0IGlzIG5lZWRlZCBwb3N0IGxheW91dFxuICogQHJldHVybnMgQm9vbGVhblxuICovXG5wcm90by5uZWVkc1Jlc2l6ZUxheW91dCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IGdldFNpemUoIHRoaXMuZWxlbWVudCApO1xuICAvLyBjaGVjayB0aGF0IHRoaXMuc2l6ZSBhbmQgc2l6ZSBhcmUgdGhlcmVcbiAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxuICB2YXIgaGFzU2l6ZXMgPSB0aGlzLnNpemUgJiYgc2l6ZTtcbiAgcmV0dXJuIGhhc1NpemVzICYmIHNpemUuaW5uZXJXaWR0aCAhPT0gdGhpcy5zaXplLmlubmVyV2lkdGg7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtZXRob2RzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogYWRkIGl0ZW1zIHRvIE91dGxheWVyIGluc3RhbmNlXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcbioqL1xucHJvdG8uYWRkSXRlbXMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XG4gIC8vIGFkZCBpdGVtcyB0byBjb2xsZWN0aW9uXG4gIGlmICggaXRlbXMubGVuZ3RoICkge1xuICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmNvbmNhdCggaXRlbXMgKTtcbiAgfVxuICByZXR1cm4gaXRlbXM7XG59O1xuXG4vKipcbiAqIExheW91dCBuZXdseS1hcHBlbmRlZCBpdGVtIGVsZW1lbnRzXG4gKiBAcGFyYW0ge0FycmF5IG9yIE5vZGVMaXN0IG9yIEVsZW1lbnR9IGVsZW1zXG4gKi9cbnByb3RvLmFwcGVuZGVkID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgaXRlbXMgPSB0aGlzLmFkZEl0ZW1zKCBlbGVtcyApO1xuICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGxheW91dCBhbmQgcmV2ZWFsIGp1c3QgdGhlIG5ldyBpdGVtc1xuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcbn07XG5cbi8qKlxuICogTGF5b3V0IHByZXBlbmRlZCBlbGVtZW50c1xuICogQHBhcmFtIHtBcnJheSBvciBOb2RlTGlzdCBvciBFbGVtZW50fSBlbGVtc1xuICovXG5wcm90by5wcmVwZW5kZWQgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBpdGVtcyA9IHRoaXMuX2l0ZW1pemUoIGVsZW1zICk7XG4gIGlmICggIWl0ZW1zLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gYWRkIGl0ZW1zIHRvIGJlZ2lubmluZyBvZiBjb2xsZWN0aW9uXG4gIHZhciBwcmV2aW91c0l0ZW1zID0gdGhpcy5pdGVtcy5zbGljZSgwKTtcbiAgdGhpcy5pdGVtcyA9IGl0ZW1zLmNvbmNhdCggcHJldmlvdXNJdGVtcyApO1xuICAvLyBzdGFydCBuZXcgbGF5b3V0XG4gIHRoaXMuX3Jlc2V0TGF5b3V0KCk7XG4gIHRoaXMuX21hbmFnZVN0YW1wcygpO1xuICAvLyBsYXlvdXQgbmV3IHN0dWZmIHdpdGhvdXQgdHJhbnNpdGlvblxuICB0aGlzLmxheW91dEl0ZW1zKCBpdGVtcywgdHJ1ZSApO1xuICB0aGlzLnJldmVhbCggaXRlbXMgKTtcbiAgLy8gbGF5b3V0IHByZXZpb3VzIGl0ZW1zXG4gIHRoaXMubGF5b3V0SXRlbXMoIHByZXZpb3VzSXRlbXMgKTtcbn07XG5cbi8qKlxuICogcmV2ZWFsIGEgY29sbGVjdGlvbiBvZiBpdGVtc1xuICogQHBhcmFtIHtBcnJheSBvZiBPdXRsYXllci5JdGVtc30gaXRlbXNcbiAqL1xucHJvdG8ucmV2ZWFsID0gZnVuY3Rpb24oIGl0ZW1zICkge1xuICB0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKCAncmV2ZWFsJywgaXRlbXMgKTtcbiAgaWYgKCAhaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHN0YWdnZXIgPSB0aGlzLnVwZGF0ZVN0YWdnZXIoKTtcbiAgaXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0sIGkgKSB7XG4gICAgaXRlbS5zdGFnZ2VyKCBpICogc3RhZ2dlciApO1xuICAgIGl0ZW0ucmV2ZWFsKCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBoaWRlIGEgY29sbGVjdGlvbiBvZiBpdGVtc1xuICogQHBhcmFtIHtBcnJheSBvZiBPdXRsYXllci5JdGVtc30gaXRlbXNcbiAqL1xucHJvdG8uaGlkZSA9IGZ1bmN0aW9uKCBpdGVtcyApIHtcbiAgdGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyggJ2hpZGUnLCBpdGVtcyApO1xuICBpZiAoICFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoICkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgc3RhZ2dlciA9IHRoaXMudXBkYXRlU3RhZ2dlcigpO1xuICBpdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSwgaSApIHtcbiAgICBpdGVtLnN0YWdnZXIoIGkgKiBzdGFnZ2VyICk7XG4gICAgaXRlbS5oaWRlKCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiByZXZlYWwgaXRlbSBlbGVtZW50c1xuICogQHBhcmFtIHtBcnJheX0sIHtFbGVtZW50fSwge05vZGVMaXN0fSBpdGVtc1xuICovXG5wcm90by5yZXZlYWxJdGVtRWxlbWVudHMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIHZhciBpdGVtcyA9IHRoaXMuZ2V0SXRlbXMoIGVsZW1zICk7XG4gIHRoaXMucmV2ZWFsKCBpdGVtcyApO1xufTtcblxuLyoqXG4gKiBoaWRlIGl0ZW0gZWxlbWVudHNcbiAqIEBwYXJhbSB7QXJyYXl9LCB7RWxlbWVudH0sIHtOb2RlTGlzdH0gaXRlbXNcbiAqL1xucHJvdG8uaGlkZUl0ZW1FbGVtZW50cyA9IGZ1bmN0aW9uKCBlbGVtcyApIHtcbiAgdmFyIGl0ZW1zID0gdGhpcy5nZXRJdGVtcyggZWxlbXMgKTtcbiAgdGhpcy5oaWRlKCBpdGVtcyApO1xufTtcblxuLyoqXG4gKiBnZXQgT3V0bGF5ZXIuSXRlbSwgZ2l2ZW4gYW4gRWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge091dGxheWVyLkl0ZW19IGl0ZW1cbiAqL1xucHJvdG8uZ2V0SXRlbSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICAvLyBsb29wIHRocm91Z2ggaXRlbXMgdG8gZ2V0IHRoZSBvbmUgdGhhdCBtYXRjaGVzXG4gIGZvciAoIHZhciBpPTA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrICkge1xuICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcbiAgICBpZiAoIGl0ZW0uZWxlbWVudCA9PSBlbGVtICkge1xuICAgICAgLy8gcmV0dXJuIGl0ZW1cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgY29sbGVjdGlvbiBvZiBPdXRsYXllci5JdGVtcywgZ2l2ZW4gRWxlbWVudHNcbiAqIEBwYXJhbSB7QXJyYXl9IGVsZW1zXG4gKiBAcmV0dXJucyB7QXJyYXl9IGl0ZW1zIC0gT3V0bGF5ZXIuSXRlbXNcbiAqL1xucHJvdG8uZ2V0SXRlbXMgPSBmdW5jdGlvbiggZWxlbXMgKSB7XG4gIGVsZW1zID0gdXRpbHMubWFrZUFycmF5KCBlbGVtcyApO1xuICB2YXIgaXRlbXMgPSBbXTtcbiAgZWxlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW0oIGVsZW0gKTtcbiAgICBpZiAoIGl0ZW0gKSB7XG4gICAgICBpdGVtcy5wdXNoKCBpdGVtICk7XG4gICAgfVxuICB9LCB0aGlzICk7XG5cbiAgcmV0dXJuIGl0ZW1zO1xufTtcblxuLyoqXG4gKiByZW1vdmUgZWxlbWVudChzKSBmcm9tIGluc3RhbmNlIGFuZCBET01cbiAqIEBwYXJhbSB7QXJyYXkgb3IgTm9kZUxpc3Qgb3IgRWxlbWVudH0gZWxlbXNcbiAqL1xucHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24oIGVsZW1zICkge1xuICB2YXIgcmVtb3ZlSXRlbXMgPSB0aGlzLmdldEl0ZW1zKCBlbGVtcyApO1xuXG4gIHRoaXMuX2VtaXRDb21wbGV0ZU9uSXRlbXMoICdyZW1vdmUnLCByZW1vdmVJdGVtcyApO1xuXG4gIC8vIGJhaWwgaWYgbm8gaXRlbXMgdG8gcmVtb3ZlXG4gIGlmICggIXJlbW92ZUl0ZW1zIHx8ICFyZW1vdmVJdGVtcy5sZW5ndGggKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmVtb3ZlSXRlbXMuZm9yRWFjaCggZnVuY3Rpb24oIGl0ZW0gKSB7XG4gICAgaXRlbS5yZW1vdmUoKTtcbiAgICAvLyByZW1vdmUgaXRlbSBmcm9tIGNvbGxlY3Rpb25cbiAgICB1dGlscy5yZW1vdmVGcm9tKCB0aGlzLml0ZW1zLCBpdGVtICk7XG4gIH0sIHRoaXMgKTtcbn07XG5cbi8vIC0tLS0tIGRlc3Ryb3kgLS0tLS0gLy9cblxuLy8gcmVtb3ZlIGFuZCBkaXNhYmxlIE91dGxheWVyIGluc3RhbmNlXG5wcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNsZWFuIHVwIGR5bmFtaWMgc3R5bGVzXG4gIHZhciBzdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcbiAgc3R5bGUuaGVpZ2h0ID0gJyc7XG4gIHN0eWxlLnBvc2l0aW9uID0gJyc7XG4gIHN0eWxlLndpZHRoID0gJyc7XG4gIC8vIGRlc3Ryb3kgaXRlbXNcbiAgdGhpcy5pdGVtcy5mb3JFYWNoKCBmdW5jdGlvbiggaXRlbSApIHtcbiAgICBpdGVtLmRlc3Ryb3koKTtcbiAgfSk7XG5cbiAgdGhpcy51bmJpbmRSZXNpemUoKTtcblxuICB2YXIgaWQgPSB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEO1xuICBkZWxldGUgaW5zdGFuY2VzWyBpZCBdOyAvLyByZW1vdmUgcmVmZXJlbmNlIHRvIGluc3RhbmNlIGJ5IGlkXG4gIGRlbGV0ZSB0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEO1xuICAvLyByZW1vdmUgZGF0YSBmb3IgalF1ZXJ5XG4gIGlmICggalF1ZXJ5ICkge1xuICAgIGpRdWVyeS5yZW1vdmVEYXRhKCB0aGlzLmVsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlICk7XG4gIH1cblxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGF0YSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4vKipcbiAqIGdldCBPdXRsYXllciBpbnN0YW5jZSBmcm9tIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbVxuICogQHJldHVybnMge091dGxheWVyfVxuICovXG5PdXRsYXllci5kYXRhID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIGVsZW0gPSB1dGlscy5nZXRRdWVyeUVsZW1lbnQoIGVsZW0gKTtcbiAgdmFyIGlkID0gZWxlbSAmJiBlbGVtLm91dGxheWVyR1VJRDtcbiAgcmV0dXJuIGlkICYmIGluc3RhbmNlc1sgaWQgXTtcbn07XG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gY3JlYXRlIE91dGxheWVyIGNsYXNzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogY3JlYXRlIGEgbGF5b3V0IGNsYXNzXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKi9cbk91dGxheWVyLmNyZWF0ZSA9IGZ1bmN0aW9uKCBuYW1lc3BhY2UsIG9wdGlvbnMgKSB7XG4gIC8vIHN1Yi1jbGFzcyBPdXRsYXllclxuICB2YXIgTGF5b3V0ID0gc3ViY2xhc3MoIE91dGxheWVyICk7XG4gIC8vIGFwcGx5IG5ldyBvcHRpb25zIGFuZCBjb21wYXRPcHRpb25zXG4gIExheW91dC5kZWZhdWx0cyA9IHV0aWxzLmV4dGVuZCgge30sIE91dGxheWVyLmRlZmF1bHRzICk7XG4gIHV0aWxzLmV4dGVuZCggTGF5b3V0LmRlZmF1bHRzLCBvcHRpb25zICk7XG4gIExheW91dC5jb21wYXRPcHRpb25zID0gdXRpbHMuZXh0ZW5kKCB7fSwgT3V0bGF5ZXIuY29tcGF0T3B0aW9ucyAgKTtcblxuICBMYXlvdXQubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXG4gIExheW91dC5kYXRhID0gT3V0bGF5ZXIuZGF0YTtcblxuICAvLyBzdWItY2xhc3MgSXRlbVxuICBMYXlvdXQuSXRlbSA9IHN1YmNsYXNzKCBJdGVtICk7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gZGVjbGFyYXRpdmUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICB1dGlscy5odG1sSW5pdCggTGF5b3V0LCBuYW1lc3BhY2UgKTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBqUXVlcnkgYnJpZGdlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbiAgLy8gbWFrZSBpbnRvIGpRdWVyeSBwbHVnaW5cbiAgaWYgKCBqUXVlcnkgJiYgalF1ZXJ5LmJyaWRnZXQgKSB7XG4gICAgalF1ZXJ5LmJyaWRnZXQoIG5hbWVzcGFjZSwgTGF5b3V0ICk7XG4gIH1cblxuICByZXR1cm4gTGF5b3V0O1xufTtcblxuZnVuY3Rpb24gc3ViY2xhc3MoIFBhcmVudCApIHtcbiAgZnVuY3Rpb24gU3ViQ2xhc3MoKSB7XG4gICAgUGFyZW50LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgfVxuXG4gIFN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBhcmVudC5wcm90b3R5cGUgKTtcbiAgU3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViQ2xhc3M7XG5cbiAgcmV0dXJuIFN1YkNsYXNzO1xufVxuXG4vLyAtLS0tLSBoZWxwZXJzIC0tLS0tIC8vXG5cbi8vIGhvdyBtYW55IG1pbGxpc2Vjb25kcyBhcmUgaW4gZWFjaCB1bml0XG52YXIgbXNVbml0cyA9IHtcbiAgbXM6IDEsXG4gIHM6IDEwMDBcbn07XG5cbi8vIG11bmdlIHRpbWUtbGlrZSBwYXJhbWV0ZXIgaW50byBtaWxsaXNlY29uZCBudW1iZXJcbi8vICcwLjRzJyAtPiA0MFxuZnVuY3Rpb24gZ2V0TWlsbGlzZWNvbmRzKCB0aW1lICkge1xuICBpZiAoIHR5cGVvZiB0aW1lID09ICdudW1iZXInICkge1xuICAgIHJldHVybiB0aW1lO1xuICB9XG4gIHZhciBtYXRjaGVzID0gdGltZS5tYXRjaCggLyheXFxkKlxcLj9cXGQqKShcXHcqKS8gKTtcbiAgdmFyIG51bSA9IG1hdGNoZXMgJiYgbWF0Y2hlc1sxXTtcbiAgdmFyIHVuaXQgPSBtYXRjaGVzICYmIG1hdGNoZXNbMl07XG4gIGlmICggIW51bS5sZW5ndGggKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgbnVtID0gcGFyc2VGbG9hdCggbnVtICk7XG4gIHZhciBtdWx0ID0gbXNVbml0c1sgdW5pdCBdIHx8IDE7XG4gIHJldHVybiBudW0gKiBtdWx0O1xufVxuXG4vLyAtLS0tLSBmaW4gLS0tLS0gLy9cblxuLy8gYmFjayBpbiBnbG9iYWxcbk91dGxheWVyLkl0ZW0gPSBJdGVtO1xuXG5yZXR1cm4gT3V0bGF5ZXI7XG5cbn0pKTtcbiIsICIvKiFcbiAqIE1hc29ucnkgdjQuMi4yXG4gKiBDYXNjYWRpbmcgZ3JpZCBsYXlvdXQgbGlicmFyeVxuICogaHR0cHM6Ly9tYXNvbnJ5LmRlc2FuZHJvLmNvbVxuICogTUlUIExpY2Vuc2VcbiAqIGJ5IERhdmlkIERlU2FuZHJvXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgLyoganNoaW50IHN0cmljdDogZmFsc2UgKi8gLypnbG9iYWxzIGRlZmluZSwgbW9kdWxlLCByZXF1aXJlICovXG4gIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgLy8gQU1EXG4gICAgZGVmaW5lKCBbXG4gICAgICAgICdvdXRsYXllci9vdXRsYXllcicsXG4gICAgICAgICdnZXQtc2l6ZS9nZXQtc2l6ZSdcbiAgICAgIF0sXG4gICAgICBmYWN0b3J5ICk7XG4gIH0gZWxzZSBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlNcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoXG4gICAgICByZXF1aXJlKCdvdXRsYXllcicpLFxuICAgICAgcmVxdWlyZSgnZ2V0LXNpemUnKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYnJvd3NlciBnbG9iYWxcbiAgICB3aW5kb3cuTWFzb25yeSA9IGZhY3RvcnkoXG4gICAgICB3aW5kb3cuT3V0bGF5ZXIsXG4gICAgICB3aW5kb3cuZ2V0U2l6ZVxuICAgICk7XG4gIH1cblxufSggd2luZG93LCBmdW5jdGlvbiBmYWN0b3J5KCBPdXRsYXllciwgZ2V0U2l6ZSApIHtcblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBtYXNvbnJ5RGVmaW5pdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIC8vIGNyZWF0ZSBhbiBPdXRsYXllciBsYXlvdXQgY2xhc3NcbiAgdmFyIE1hc29ucnkgPSBPdXRsYXllci5jcmVhdGUoJ21hc29ucnknKTtcbiAgLy8gaXNGaXRXaWR0aCAtPiBmaXRXaWR0aFxuICBNYXNvbnJ5LmNvbXBhdE9wdGlvbnMuZml0V2lkdGggPSAnaXNGaXRXaWR0aCc7XG5cbiAgdmFyIHByb3RvID0gTWFzb25yeS5wcm90b3R5cGU7XG5cbiAgcHJvdG8uX3Jlc2V0TGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5nZXRTaXplKCk7XG4gICAgdGhpcy5fZ2V0TWVhc3VyZW1lbnQoICdjb2x1bW5XaWR0aCcsICdvdXRlcldpZHRoJyApO1xuICAgIHRoaXMuX2dldE1lYXN1cmVtZW50KCAnZ3V0dGVyJywgJ291dGVyV2lkdGgnICk7XG4gICAgdGhpcy5tZWFzdXJlQ29sdW1ucygpO1xuXG4gICAgLy8gcmVzZXQgY29sdW1uIFlcbiAgICB0aGlzLmNvbFlzID0gW107XG4gICAgZm9yICggdmFyIGk9MDsgaSA8IHRoaXMuY29sczsgaSsrICkge1xuICAgICAgdGhpcy5jb2xZcy5wdXNoKCAwICk7XG4gICAgfVxuXG4gICAgdGhpcy5tYXhZID0gMDtcbiAgICB0aGlzLmhvcml6b250YWxDb2xJbmRleCA9IDA7XG4gIH07XG5cbiAgcHJvdG8ubWVhc3VyZUNvbHVtbnMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmdldENvbnRhaW5lcldpZHRoKCk7XG4gICAgLy8gaWYgY29sdW1uV2lkdGggaXMgMCwgZGVmYXVsdCB0byBvdXRlcldpZHRoIG9mIGZpcnN0IGl0ZW1cbiAgICBpZiAoICF0aGlzLmNvbHVtbldpZHRoICkge1xuICAgICAgdmFyIGZpcnN0SXRlbSA9IHRoaXMuaXRlbXNbMF07XG4gICAgICB2YXIgZmlyc3RJdGVtRWxlbSA9IGZpcnN0SXRlbSAmJiBmaXJzdEl0ZW0uZWxlbWVudDtcbiAgICAgIC8vIGNvbHVtbldpZHRoIGZhbGwgYmFjayB0byBpdGVtIG9mIGZpcnN0IGVsZW1lbnRcbiAgICAgIHRoaXMuY29sdW1uV2lkdGggPSBmaXJzdEl0ZW1FbGVtICYmIGdldFNpemUoIGZpcnN0SXRlbUVsZW0gKS5vdXRlcldpZHRoIHx8XG4gICAgICAgIC8vIGlmIGZpcnN0IGVsZW0gaGFzIG5vIHdpZHRoLCBkZWZhdWx0IHRvIHNpemUgb2YgY29udGFpbmVyXG4gICAgICAgIHRoaXMuY29udGFpbmVyV2lkdGg7XG4gICAgfVxuXG4gICAgdmFyIGNvbHVtbldpZHRoID0gdGhpcy5jb2x1bW5XaWR0aCArPSB0aGlzLmd1dHRlcjtcblxuICAgIC8vIGNhbGN1bGF0ZSBjb2x1bW5zXG4gICAgdmFyIGNvbnRhaW5lcldpZHRoID0gdGhpcy5jb250YWluZXJXaWR0aCArIHRoaXMuZ3V0dGVyO1xuICAgIHZhciBjb2xzID0gY29udGFpbmVyV2lkdGggLyBjb2x1bW5XaWR0aDtcbiAgICAvLyBmaXggcm91bmRpbmcgZXJyb3JzLCB0eXBpY2FsbHkgd2l0aCBndXR0ZXJzXG4gICAgdmFyIGV4Y2VzcyA9IGNvbHVtbldpZHRoIC0gY29udGFpbmVyV2lkdGggJSBjb2x1bW5XaWR0aDtcbiAgICAvLyBpZiBvdmVyc2hvb3QgaXMgbGVzcyB0aGFuIGEgcGl4ZWwsIHJvdW5kIHVwLCBvdGhlcndpc2UgZmxvb3IgaXRcbiAgICB2YXIgbWF0aE1ldGhvZCA9IGV4Y2VzcyAmJiBleGNlc3MgPCAxID8gJ3JvdW5kJyA6ICdmbG9vcic7XG4gICAgY29scyA9IE1hdGhbIG1hdGhNZXRob2QgXSggY29scyApO1xuICAgIHRoaXMuY29scyA9IE1hdGgubWF4KCBjb2xzLCAxICk7XG4gIH07XG5cbiAgcHJvdG8uZ2V0Q29udGFpbmVyV2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICAvLyBjb250YWluZXIgaXMgcGFyZW50IGlmIGZpdCB3aWR0aFxuICAgIHZhciBpc0ZpdFdpZHRoID0gdGhpcy5fZ2V0T3B0aW9uKCdmaXRXaWR0aCcpO1xuICAgIHZhciBjb250YWluZXIgPSBpc0ZpdFdpZHRoID8gdGhpcy5lbGVtZW50LnBhcmVudE5vZGUgOiB0aGlzLmVsZW1lbnQ7XG4gICAgLy8gY2hlY2sgdGhhdCB0aGlzLnNpemUgYW5kIHNpemUgYXJlIHRoZXJlXG4gICAgLy8gSUU4IHRyaWdnZXJzIHJlc2l6ZSBvbiBib2R5IHNpemUgY2hhbmdlLCBzbyB0aGV5IG1pZ2h0IG5vdCBiZVxuICAgIHZhciBzaXplID0gZ2V0U2l6ZSggY29udGFpbmVyICk7XG4gICAgdGhpcy5jb250YWluZXJXaWR0aCA9IHNpemUgJiYgc2l6ZS5pbm5lcldpZHRoO1xuICB9O1xuXG4gIHByb3RvLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24gPSBmdW5jdGlvbiggaXRlbSApIHtcbiAgICBpdGVtLmdldFNpemUoKTtcbiAgICAvLyBob3cgbWFueSBjb2x1bW5zIGRvZXMgdGhpcyBicmljayBzcGFuXG4gICAgdmFyIHJlbWFpbmRlciA9IGl0ZW0uc2l6ZS5vdXRlcldpZHRoICUgdGhpcy5jb2x1bW5XaWR0aDtcbiAgICB2YXIgbWF0aE1ldGhvZCA9IHJlbWFpbmRlciAmJiByZW1haW5kZXIgPCAxID8gJ3JvdW5kJyA6ICdjZWlsJztcbiAgICAvLyByb3VuZCBpZiBvZmYgYnkgMSBwaXhlbCwgb3RoZXJ3aXNlIHVzZSBjZWlsXG4gICAgdmFyIGNvbFNwYW4gPSBNYXRoWyBtYXRoTWV0aG9kIF0oIGl0ZW0uc2l6ZS5vdXRlcldpZHRoIC8gdGhpcy5jb2x1bW5XaWR0aCApO1xuICAgIGNvbFNwYW4gPSBNYXRoLm1pbiggY29sU3BhbiwgdGhpcy5jb2xzICk7XG4gICAgLy8gdXNlIGhvcml6b250YWwgb3IgdG9wIGNvbHVtbiBwb3NpdGlvblxuICAgIHZhciBjb2xQb3NNZXRob2QgPSB0aGlzLm9wdGlvbnMuaG9yaXpvbnRhbE9yZGVyID9cbiAgICAgICdfZ2V0SG9yaXpvbnRhbENvbFBvc2l0aW9uJyA6ICdfZ2V0VG9wQ29sUG9zaXRpb24nO1xuICAgIHZhciBjb2xQb3NpdGlvbiA9IHRoaXNbIGNvbFBvc01ldGhvZCBdKCBjb2xTcGFuLCBpdGVtICk7XG4gICAgLy8gcG9zaXRpb24gdGhlIGJyaWNrXG4gICAgdmFyIHBvc2l0aW9uID0ge1xuICAgICAgeDogdGhpcy5jb2x1bW5XaWR0aCAqIGNvbFBvc2l0aW9uLmNvbCxcbiAgICAgIHk6IGNvbFBvc2l0aW9uLnlcbiAgICB9O1xuICAgIC8vIGFwcGx5IHNldEhlaWdodCB0byBuZWNlc3NhcnkgY29sdW1uc1xuICAgIHZhciBzZXRIZWlnaHQgPSBjb2xQb3NpdGlvbi55ICsgaXRlbS5zaXplLm91dGVySGVpZ2h0O1xuICAgIHZhciBzZXRNYXggPSBjb2xTcGFuICsgY29sUG9zaXRpb24uY29sO1xuICAgIGZvciAoIHZhciBpID0gY29sUG9zaXRpb24uY29sOyBpIDwgc2V0TWF4OyBpKysgKSB7XG4gICAgICB0aGlzLmNvbFlzW2ldID0gc2V0SGVpZ2h0O1xuICAgIH1cblxuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfTtcblxuICBwcm90by5fZ2V0VG9wQ29sUG9zaXRpb24gPSBmdW5jdGlvbiggY29sU3BhbiApIHtcbiAgICB2YXIgY29sR3JvdXAgPSB0aGlzLl9nZXRUb3BDb2xHcm91cCggY29sU3BhbiApO1xuICAgIC8vIGdldCB0aGUgbWluaW11bSBZIHZhbHVlIGZyb20gdGhlIGNvbHVtbnNcbiAgICB2YXIgbWluaW11bVkgPSBNYXRoLm1pbi5hcHBseSggTWF0aCwgY29sR3JvdXAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBjb2w6IGNvbEdyb3VwLmluZGV4T2YoIG1pbmltdW1ZICksXG4gICAgICB5OiBtaW5pbXVtWSxcbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge051bWJlcn0gY29sU3BhbiAtIG51bWJlciBvZiBjb2x1bW5zIHRoZSBlbGVtZW50IHNwYW5zXG4gICAqIEByZXR1cm5zIHtBcnJheX0gY29sR3JvdXBcbiAgICovXG4gIHByb3RvLl9nZXRUb3BDb2xHcm91cCA9IGZ1bmN0aW9uKCBjb2xTcGFuICkge1xuICAgIGlmICggY29sU3BhbiA8IDIgKSB7XG4gICAgICAvLyBpZiBicmljayBzcGFucyBvbmx5IG9uZSBjb2x1bW4sIHVzZSBhbGwgdGhlIGNvbHVtbiBZc1xuICAgICAgcmV0dXJuIHRoaXMuY29sWXM7XG4gICAgfVxuXG4gICAgdmFyIGNvbEdyb3VwID0gW107XG4gICAgLy8gaG93IG1hbnkgZGlmZmVyZW50IHBsYWNlcyBjb3VsZCB0aGlzIGJyaWNrIGZpdCBob3Jpem9udGFsbHlcbiAgICB2YXIgZ3JvdXBDb3VudCA9IHRoaXMuY29scyArIDEgLSBjb2xTcGFuO1xuICAgIC8vIGZvciBlYWNoIGdyb3VwIHBvdGVudGlhbCBob3Jpem9udGFsIHBvc2l0aW9uXG4gICAgZm9yICggdmFyIGkgPSAwOyBpIDwgZ3JvdXBDb3VudDsgaSsrICkge1xuICAgICAgY29sR3JvdXBbaV0gPSB0aGlzLl9nZXRDb2xHcm91cFkoIGksIGNvbFNwYW4gKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbEdyb3VwO1xuICB9O1xuXG4gIHByb3RvLl9nZXRDb2xHcm91cFkgPSBmdW5jdGlvbiggY29sLCBjb2xTcGFuICkge1xuICAgIGlmICggY29sU3BhbiA8IDIgKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb2xZc1sgY29sIF07XG4gICAgfVxuICAgIC8vIG1ha2UgYW4gYXJyYXkgb2YgY29sWSB2YWx1ZXMgZm9yIHRoYXQgb25lIGdyb3VwXG4gICAgdmFyIGdyb3VwQ29sWXMgPSB0aGlzLmNvbFlzLnNsaWNlKCBjb2wsIGNvbCArIGNvbFNwYW4gKTtcbiAgICAvLyBhbmQgZ2V0IHRoZSBtYXggdmFsdWUgb2YgdGhlIGFycmF5XG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KCBNYXRoLCBncm91cENvbFlzICk7XG4gIH07XG5cbiAgLy8gZ2V0IGNvbHVtbiBwb3NpdGlvbiBiYXNlZCBvbiBob3Jpem9udGFsIGluZGV4LiAjODczXG4gIHByb3RvLl9nZXRIb3Jpem9udGFsQ29sUG9zaXRpb24gPSBmdW5jdGlvbiggY29sU3BhbiwgaXRlbSApIHtcbiAgICB2YXIgY29sID0gdGhpcy5ob3Jpem9udGFsQ29sSW5kZXggJSB0aGlzLmNvbHM7XG4gICAgdmFyIGlzT3ZlciA9IGNvbFNwYW4gPiAxICYmIGNvbCArIGNvbFNwYW4gPiB0aGlzLmNvbHM7XG4gICAgLy8gc2hpZnQgdG8gbmV4dCByb3cgaWYgaXRlbSBjYW4ndCBmaXQgb24gY3VycmVudCByb3dcbiAgICBjb2wgPSBpc092ZXIgPyAwIDogY29sO1xuICAgIC8vIGRvbid0IGxldCB6ZXJvLXNpemUgaXRlbXMgdGFrZSB1cCBzcGFjZVxuICAgIHZhciBoYXNTaXplID0gaXRlbS5zaXplLm91dGVyV2lkdGggJiYgaXRlbS5zaXplLm91dGVySGVpZ2h0O1xuICAgIHRoaXMuaG9yaXpvbnRhbENvbEluZGV4ID0gaGFzU2l6ZSA/IGNvbCArIGNvbFNwYW4gOiB0aGlzLmhvcml6b250YWxDb2xJbmRleDtcblxuICAgIHJldHVybiB7XG4gICAgICBjb2w6IGNvbCxcbiAgICAgIHk6IHRoaXMuX2dldENvbEdyb3VwWSggY29sLCBjb2xTcGFuICksXG4gICAgfTtcbiAgfTtcblxuICBwcm90by5fbWFuYWdlU3RhbXAgPSBmdW5jdGlvbiggc3RhbXAgKSB7XG4gICAgdmFyIHN0YW1wU2l6ZSA9IGdldFNpemUoIHN0YW1wICk7XG4gICAgdmFyIG9mZnNldCA9IHRoaXMuX2dldEVsZW1lbnRPZmZzZXQoIHN0YW1wICk7XG4gICAgLy8gZ2V0IHRoZSBjb2x1bW5zIHRoYXQgdGhpcyBzdGFtcCBhZmZlY3RzXG4gICAgdmFyIGlzT3JpZ2luTGVmdCA9IHRoaXMuX2dldE9wdGlvbignb3JpZ2luTGVmdCcpO1xuICAgIHZhciBmaXJzdFggPSBpc09yaWdpbkxlZnQgPyBvZmZzZXQubGVmdCA6IG9mZnNldC5yaWdodDtcbiAgICB2YXIgbGFzdFggPSBmaXJzdFggKyBzdGFtcFNpemUub3V0ZXJXaWR0aDtcbiAgICB2YXIgZmlyc3RDb2wgPSBNYXRoLmZsb29yKCBmaXJzdFggLyB0aGlzLmNvbHVtbldpZHRoICk7XG4gICAgZmlyc3RDb2wgPSBNYXRoLm1heCggMCwgZmlyc3RDb2wgKTtcbiAgICB2YXIgbGFzdENvbCA9IE1hdGguZmxvb3IoIGxhc3RYIC8gdGhpcy5jb2x1bW5XaWR0aCApO1xuICAgIC8vIGxhc3RDb2wgc2hvdWxkIG5vdCBnbyBvdmVyIGlmIG11bHRpcGxlIG9mIGNvbHVtbldpZHRoICM0MjVcbiAgICBsYXN0Q29sIC09IGxhc3RYICUgdGhpcy5jb2x1bW5XaWR0aCA/IDAgOiAxO1xuICAgIGxhc3RDb2wgPSBNYXRoLm1pbiggdGhpcy5jb2xzIC0gMSwgbGFzdENvbCApO1xuICAgIC8vIHNldCBjb2xZcyB0byBib3R0b20gb2YgdGhlIHN0YW1wXG5cbiAgICB2YXIgaXNPcmlnaW5Ub3AgPSB0aGlzLl9nZXRPcHRpb24oJ29yaWdpblRvcCcpO1xuICAgIHZhciBzdGFtcE1heFkgPSAoIGlzT3JpZ2luVG9wID8gb2Zmc2V0LnRvcCA6IG9mZnNldC5ib3R0b20gKSArXG4gICAgICBzdGFtcFNpemUub3V0ZXJIZWlnaHQ7XG4gICAgZm9yICggdmFyIGkgPSBmaXJzdENvbDsgaSA8PSBsYXN0Q29sOyBpKysgKSB7XG4gICAgICB0aGlzLmNvbFlzW2ldID0gTWF0aC5tYXgoIHN0YW1wTWF4WSwgdGhpcy5jb2xZc1tpXSApO1xuICAgIH1cbiAgfTtcblxuICBwcm90by5fZ2V0Q29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubWF4WSA9IE1hdGgubWF4LmFwcGx5KCBNYXRoLCB0aGlzLmNvbFlzICk7XG4gICAgdmFyIHNpemUgPSB7XG4gICAgICBoZWlnaHQ6IHRoaXMubWF4WVxuICAgIH07XG5cbiAgICBpZiAoIHRoaXMuX2dldE9wdGlvbignZml0V2lkdGgnKSApIHtcbiAgICAgIHNpemUud2lkdGggPSB0aGlzLl9nZXRDb250YWluZXJGaXRXaWR0aCgpO1xuICAgIH1cblxuICAgIHJldHVybiBzaXplO1xuICB9O1xuXG4gIHByb3RvLl9nZXRDb250YWluZXJGaXRXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB1bnVzZWRDb2xzID0gMDtcbiAgICAvLyBjb3VudCB1bnVzZWQgY29sdW1uc1xuICAgIHZhciBpID0gdGhpcy5jb2xzO1xuICAgIHdoaWxlICggLS1pICkge1xuICAgICAgaWYgKCB0aGlzLmNvbFlzW2ldICE9PSAwICkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHVudXNlZENvbHMrKztcbiAgICB9XG4gICAgLy8gZml0IGNvbnRhaW5lciB0byBjb2x1bW5zIHRoYXQgaGF2ZSBiZWVuIHVzZWRcbiAgICByZXR1cm4gKCB0aGlzLmNvbHMgLSB1bnVzZWRDb2xzICkgKiB0aGlzLmNvbHVtbldpZHRoIC0gdGhpcy5ndXR0ZXI7XG4gIH07XG5cbiAgcHJvdG8ubmVlZHNSZXNpemVMYXlvdXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJldmlvdXNXaWR0aCA9IHRoaXMuY29udGFpbmVyV2lkdGg7XG4gICAgdGhpcy5nZXRDb250YWluZXJXaWR0aCgpO1xuICAgIHJldHVybiBwcmV2aW91c1dpZHRoICE9IHRoaXMuY29udGFpbmVyV2lkdGg7XG4gIH07XG5cbiAgcmV0dXJuIE1hc29ucnk7XG5cbn0pKTtcbiIsICIvKipcbiAqIEV2RW1pdHRlciB2Mi4xLjFcbiAqIExpbCcgZXZlbnQgZW1pdHRlclxuICogTUlUIExpY2Vuc2VcbiAqL1xuXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG4gIC8vIHVuaXZlcnNhbCBtb2R1bGUgZGVmaW5pdGlvblxuICBpZiAoIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKSB7XG4gICAgLy8gQ29tbW9uSlMgLSBCcm93c2VyaWZ5LCBXZWJwYWNrXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgZ2xvYmFsLkV2RW1pdHRlciA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KCB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oKSB7XG5cbmZ1bmN0aW9uIEV2RW1pdHRlcigpIHt9XG5cbmxldCBwcm90byA9IEV2RW1pdHRlci5wcm90b3R5cGU7XG5cbnByb3RvLm9uID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSByZXR1cm4gdGhpcztcblxuICAvLyBzZXQgZXZlbnRzIGhhc2hcbiAgbGV0IGV2ZW50cyA9IHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IGxpc3RlbmVycyBhcnJheVxuICBsZXQgbGlzdGVuZXJzID0gZXZlbnRzWyBldmVudE5hbWUgXSA9IGV2ZW50c1sgZXZlbnROYW1lIF0gfHwgW107XG4gIC8vIG9ubHkgYWRkIG9uY2VcbiAgaWYgKCAhbGlzdGVuZXJzLmluY2x1ZGVzKCBsaXN0ZW5lciApICkge1xuICAgIGxpc3RlbmVycy5wdXNoKCBsaXN0ZW5lciApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24oIGV2ZW50TmFtZSwgbGlzdGVuZXIgKSB7XG4gIGlmICggIWV2ZW50TmFtZSB8fCAhbGlzdGVuZXIgKSByZXR1cm4gdGhpcztcblxuICAvLyBhZGQgZXZlbnRcbiAgdGhpcy5vbiggZXZlbnROYW1lLCBsaXN0ZW5lciApO1xuICAvLyBzZXQgb25jZSBmbGFnXG4gIC8vIHNldCBvbmNlRXZlbnRzIGhhc2hcbiAgbGV0IG9uY2VFdmVudHMgPSB0aGlzLl9vbmNlRXZlbnRzID0gdGhpcy5fb25jZUV2ZW50cyB8fCB7fTtcbiAgLy8gc2V0IG9uY2VMaXN0ZW5lcnMgb2JqZWN0XG4gIGxldCBvbmNlTGlzdGVuZXJzID0gb25jZUV2ZW50c1sgZXZlbnROYW1lIF0gPSBvbmNlRXZlbnRzWyBldmVudE5hbWUgXSB8fCB7fTtcbiAgLy8gc2V0IGZsYWdcbiAgb25jZUxpc3RlbmVyc1sgbGlzdGVuZXIgXSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5vZmYgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBsaXN0ZW5lciApIHtcbiAgbGV0IGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50cyAmJiB0aGlzLl9ldmVudHNbIGV2ZW50TmFtZSBdO1xuICBpZiAoICFsaXN0ZW5lcnMgfHwgIWxpc3RlbmVycy5sZW5ndGggKSByZXR1cm4gdGhpcztcblxuICBsZXQgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZiggbGlzdGVuZXIgKTtcbiAgaWYgKCBpbmRleCAhPSAtMSApIHtcbiAgICBsaXN0ZW5lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wcm90by5lbWl0RXZlbnQgPSBmdW5jdGlvbiggZXZlbnROYW1lLCBhcmdzICkge1xuICBsZXQgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzICYmIHRoaXMuX2V2ZW50c1sgZXZlbnROYW1lIF07XG4gIGlmICggIWxpc3RlbmVycyB8fCAhbGlzdGVuZXJzLmxlbmd0aCApIHJldHVybiB0aGlzO1xuXG4gIC8vIGNvcHkgb3ZlciB0byBhdm9pZCBpbnRlcmZlcmVuY2UgaWYgLm9mZigpIGluIGxpc3RlbmVyXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSggMCApO1xuICBhcmdzID0gYXJncyB8fCBbXTtcbiAgLy8gb25jZSBzdHVmZlxuICBsZXQgb25jZUxpc3RlbmVycyA9IHRoaXMuX29uY2VFdmVudHMgJiYgdGhpcy5fb25jZUV2ZW50c1sgZXZlbnROYW1lIF07XG5cbiAgZm9yICggbGV0IGxpc3RlbmVyIG9mIGxpc3RlbmVycyApIHtcbiAgICBsZXQgaXNPbmNlID0gb25jZUxpc3RlbmVycyAmJiBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIGlmICggaXNPbmNlICkge1xuICAgICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgICAvLyByZW1vdmUgYmVmb3JlIHRyaWdnZXIgdG8gcHJldmVudCByZWN1cnNpb25cbiAgICAgIHRoaXMub2ZmKCBldmVudE5hbWUsIGxpc3RlbmVyICk7XG4gICAgICAvLyB1bnNldCBvbmNlIGZsYWdcbiAgICAgIGRlbGV0ZSBvbmNlTGlzdGVuZXJzWyBsaXN0ZW5lciBdO1xuICAgIH1cbiAgICAvLyB0cmlnZ2VyIGxpc3RlbmVyXG4gICAgbGlzdGVuZXIuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxucHJvdG8uYWxsT2ZmID0gZnVuY3Rpb24oKSB7XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG4gIGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnJldHVybiBFdkVtaXR0ZXI7XG5cbn0gKSApO1xuIiwgIi8qIVxuICogaW1hZ2VzTG9hZGVkIHY1LjAuMFxuICogSmF2YVNjcmlwdCBpcyBhbGwgbGlrZSBcIllvdSBpbWFnZXMgYXJlIGRvbmUgeWV0IG9yIHdoYXQ/XCJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuKCBmdW5jdGlvbiggd2luZG93LCBmYWN0b3J5ICkge1xuICAvLyB1bml2ZXJzYWwgbW9kdWxlIGRlZmluaXRpb25cbiAgaWYgKCB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgIC8vIENvbW1vbkpTXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCB3aW5kb3csIHJlcXVpcmUoJ2V2LWVtaXR0ZXInKSApO1xuICB9IGVsc2Uge1xuICAgIC8vIGJyb3dzZXIgZ2xvYmFsXG4gICAgd2luZG93LmltYWdlc0xvYWRlZCA9IGZhY3RvcnkoIHdpbmRvdywgd2luZG93LkV2RW1pdHRlciApO1xuICB9XG5cbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLFxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoIHdpbmRvdywgRXZFbWl0dGVyICkge1xuXG5sZXQgJCA9IHdpbmRvdy5qUXVlcnk7XG5sZXQgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBoZWxwZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8vIHR1cm4gZWxlbWVudCBvciBub2RlTGlzdCBpbnRvIGFuIGFycmF5XG5mdW5jdGlvbiBtYWtlQXJyYXkoIG9iaiApIHtcbiAgLy8gdXNlIG9iamVjdCBpZiBhbHJlYWR5IGFuIGFycmF5XG4gIGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSByZXR1cm4gb2JqO1xuXG4gIGxldCBpc0FycmF5TGlrZSA9IHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcic7XG4gIC8vIGNvbnZlcnQgbm9kZUxpc3QgdG8gYXJyYXlcbiAgaWYgKCBpc0FycmF5TGlrZSApIHJldHVybiBbIC4uLm9iaiBdO1xuXG4gIC8vIGFycmF5IG9mIHNpbmdsZSBpbmRleFxuICByZXR1cm4gWyBvYmogXTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gaW1hZ2VzTG9hZGVkIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbi8qKlxuICogQHBhcmFtIHtbQXJyYXksIEVsZW1lbnQsIE5vZGVMaXN0LCBTdHJpbmddfSBlbGVtXG4gKiBAcGFyYW0ge1tPYmplY3QsIEZ1bmN0aW9uXX0gb3B0aW9ucyAtIGlmIGZ1bmN0aW9uLCB1c2UgYXMgY2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uQWx3YXlzIC0gY2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtJbWFnZXNMb2FkZWR9XG4gKi9cbmZ1bmN0aW9uIEltYWdlc0xvYWRlZCggZWxlbSwgb3B0aW9ucywgb25BbHdheXMgKSB7XG4gIC8vIGNvZXJjZSBJbWFnZXNMb2FkZWQoKSB3aXRob3V0IG5ldywgdG8gYmUgbmV3IEltYWdlc0xvYWRlZCgpXG4gIGlmICggISggdGhpcyBpbnN0YW5jZW9mIEltYWdlc0xvYWRlZCApICkge1xuICAgIHJldHVybiBuZXcgSW1hZ2VzTG9hZGVkKCBlbGVtLCBvcHRpb25zLCBvbkFsd2F5cyApO1xuICB9XG4gIC8vIHVzZSBlbGVtIGFzIHNlbGVjdG9yIHN0cmluZ1xuICBsZXQgcXVlcnlFbGVtID0gZWxlbTtcbiAgaWYgKCB0eXBlb2YgZWxlbSA9PSAnc3RyaW5nJyApIHtcbiAgICBxdWVyeUVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCBlbGVtICk7XG4gIH1cbiAgLy8gYmFpbCBpZiBiYWQgZWxlbWVudFxuICBpZiAoICFxdWVyeUVsZW0gKSB7XG4gICAgY29uc29sZS5lcnJvcihgQmFkIGVsZW1lbnQgZm9yIGltYWdlc0xvYWRlZCAke3F1ZXJ5RWxlbSB8fCBlbGVtfWApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZWxlbWVudHMgPSBtYWtlQXJyYXkoIHF1ZXJ5RWxlbSApO1xuICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgLy8gc2hpZnQgYXJndW1lbnRzIGlmIG5vIG9wdGlvbnMgc2V0XG4gIGlmICggdHlwZW9mIG9wdGlvbnMgPT0gJ2Z1bmN0aW9uJyApIHtcbiAgICBvbkFsd2F5cyA9IG9wdGlvbnM7XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmFzc2lnbiggdGhpcy5vcHRpb25zLCBvcHRpb25zICk7XG4gIH1cblxuICBpZiAoIG9uQWx3YXlzICkgdGhpcy5vbiggJ2Fsd2F5cycsIG9uQWx3YXlzICk7XG5cbiAgdGhpcy5nZXRJbWFnZXMoKTtcbiAgLy8gYWRkIGpRdWVyeSBEZWZlcnJlZCBvYmplY3RcbiAgaWYgKCAkICkgdGhpcy5qcURlZmVycmVkID0gbmV3ICQuRGVmZXJyZWQoKTtcblxuICAvLyBIQUNLIGNoZWNrIGFzeW5jIHRvIGFsbG93IHRpbWUgdG8gYmluZCBsaXN0ZW5lcnNcbiAgc2V0VGltZW91dCggdGhpcy5jaGVjay5iaW5kKCB0aGlzICkgKTtcbn1cblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEV2RW1pdHRlci5wcm90b3R5cGUgKTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5nZXRJbWFnZXMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pbWFnZXMgPSBbXTtcblxuICAvLyBmaWx0ZXIgJiBmaW5kIGl0ZW1zIGlmIHdlIGhhdmUgYW4gaXRlbSBzZWxlY3RvclxuICB0aGlzLmVsZW1lbnRzLmZvckVhY2goIHRoaXMuYWRkRWxlbWVudEltYWdlcywgdGhpcyApO1xufTtcblxuY29uc3QgZWxlbWVudE5vZGVUeXBlcyA9IFsgMSwgOSwgMTEgXTtcblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IGVsZW1cbiAqL1xuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRFbGVtZW50SW1hZ2VzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG4gIC8vIGZpbHRlciBzaWJsaW5nc1xuICBpZiAoIGVsZW0ubm9kZU5hbWUgPT09ICdJTUcnICkge1xuICAgIHRoaXMuYWRkSW1hZ2UoIGVsZW0gKTtcbiAgfVxuICAvLyBnZXQgYmFja2dyb3VuZCBpbWFnZSBvbiBlbGVtZW50XG4gIGlmICggdGhpcy5vcHRpb25zLmJhY2tncm91bmQgPT09IHRydWUgKSB7XG4gICAgdGhpcy5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyggZWxlbSApO1xuICB9XG5cbiAgLy8gZmluZCBjaGlsZHJlblxuICAvLyBubyBub24tZWxlbWVudCBub2RlcywgIzE0M1xuICBsZXQgeyBub2RlVHlwZSB9ID0gZWxlbTtcbiAgaWYgKCAhbm9kZVR5cGUgfHwgIWVsZW1lbnROb2RlVHlwZXMuaW5jbHVkZXMoIG5vZGVUeXBlICkgKSByZXR1cm47XG5cbiAgbGV0IGNoaWxkSW1ncyA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCgnaW1nJyk7XG4gIC8vIGNvbmNhdCBjaGlsZEVsZW1zIHRvIGZpbHRlckZvdW5kIGFycmF5XG4gIGZvciAoIGxldCBpbWcgb2YgY2hpbGRJbWdzICkge1xuICAgIHRoaXMuYWRkSW1hZ2UoIGltZyApO1xuICB9XG5cbiAgLy8gZ2V0IGNoaWxkIGJhY2tncm91bmQgaW1hZ2VzXG4gIGlmICggdHlwZW9mIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kID09ICdzdHJpbmcnICkge1xuICAgIGxldCBjaGlsZHJlbiA9IGVsZW0ucXVlcnlTZWxlY3RvckFsbCggdGhpcy5vcHRpb25zLmJhY2tncm91bmQgKTtcbiAgICBmb3IgKCBsZXQgY2hpbGQgb2YgY2hpbGRyZW4gKSB7XG4gICAgICB0aGlzLmFkZEVsZW1lbnRCYWNrZ3JvdW5kSW1hZ2VzKCBjaGlsZCApO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgcmVVUkwgPSAvdXJsXFwoKFsnXCJdKT8oLio/KVxcMVxcKS9naTtcblxuSW1hZ2VzTG9hZGVkLnByb3RvdHlwZS5hZGRFbGVtZW50QmFja2dyb3VuZEltYWdlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuICBsZXQgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG4gIC8vIEZpcmVmb3ggcmV0dXJucyBudWxsIGlmIGluIGEgaGlkZGVuIGlmcmFtZSBodHRwczovL2J1Z3ppbC5sYS81NDgzOTdcbiAgaWYgKCAhc3R5bGUgKSByZXR1cm47XG5cbiAgLy8gZ2V0IHVybCBpbnNpZGUgdXJsKFwiLi4uXCIpXG4gIGxldCBtYXRjaGVzID0gcmVVUkwuZXhlYyggc3R5bGUuYmFja2dyb3VuZEltYWdlICk7XG4gIHdoaWxlICggbWF0Y2hlcyAhPT0gbnVsbCApIHtcbiAgICBsZXQgdXJsID0gbWF0Y2hlcyAmJiBtYXRjaGVzWzJdO1xuICAgIGlmICggdXJsICkge1xuICAgICAgdGhpcy5hZGRCYWNrZ3JvdW5kKCB1cmwsIGVsZW0gKTtcbiAgICB9XG4gICAgbWF0Y2hlcyA9IHJlVVJMLmV4ZWMoIHN0eWxlLmJhY2tncm91bmRJbWFnZSApO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7SW1hZ2V9IGltZ1xuICovXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmFkZEltYWdlID0gZnVuY3Rpb24oIGltZyApIHtcbiAgbGV0IGxvYWRpbmdJbWFnZSA9IG5ldyBMb2FkaW5nSW1hZ2UoIGltZyApO1xuICB0aGlzLmltYWdlcy5wdXNoKCBsb2FkaW5nSW1hZ2UgKTtcbn07XG5cbkltYWdlc0xvYWRlZC5wcm90b3R5cGUuYWRkQmFja2dyb3VuZCA9IGZ1bmN0aW9uKCB1cmwsIGVsZW0gKSB7XG4gIGxldCBiYWNrZ3JvdW5kID0gbmV3IEJhY2tncm91bmQoIHVybCwgZWxlbSApO1xuICB0aGlzLmltYWdlcy5wdXNoKCBiYWNrZ3JvdW5kICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucHJvZ3Jlc3NlZENvdW50ID0gMDtcbiAgdGhpcy5oYXNBbnlCcm9rZW4gPSBmYWxzZTtcbiAgLy8gY29tcGxldGUgaWYgbm8gaW1hZ2VzXG4gIGlmICggIXRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtc3R5bGUgKi9cbiAgbGV0IG9uUHJvZ3Jlc3MgPSAoIGltYWdlLCBlbGVtLCBtZXNzYWdlICkgPT4ge1xuICAgIC8vIEhBQ0sgLSBDaHJvbWUgdHJpZ2dlcnMgZXZlbnQgYmVmb3JlIG9iamVjdCBwcm9wZXJ0aWVzIGhhdmUgY2hhbmdlZC4gIzgzXG4gICAgc2V0VGltZW91dCggKCkgPT4ge1xuICAgICAgdGhpcy5wcm9ncmVzcyggaW1hZ2UsIGVsZW0sIG1lc3NhZ2UgKTtcbiAgICB9ICk7XG4gIH07XG5cbiAgdGhpcy5pbWFnZXMuZm9yRWFjaCggZnVuY3Rpb24oIGxvYWRpbmdJbWFnZSApIHtcbiAgICBsb2FkaW5nSW1hZ2Uub25jZSggJ3Byb2dyZXNzJywgb25Qcm9ncmVzcyApO1xuICAgIGxvYWRpbmdJbWFnZS5jaGVjaygpO1xuICB9ICk7XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLnByb2dyZXNzID0gZnVuY3Rpb24oIGltYWdlLCBlbGVtLCBtZXNzYWdlICkge1xuICB0aGlzLnByb2dyZXNzZWRDb3VudCsrO1xuICB0aGlzLmhhc0FueUJyb2tlbiA9IHRoaXMuaGFzQW55QnJva2VuIHx8ICFpbWFnZS5pc0xvYWRlZDtcbiAgLy8gcHJvZ3Jlc3MgZXZlbnRcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgaW1hZ2UsIGVsZW0gXSApO1xuICBpZiAoIHRoaXMuanFEZWZlcnJlZCAmJiB0aGlzLmpxRGVmZXJyZWQubm90aWZ5ICkge1xuICAgIHRoaXMuanFEZWZlcnJlZC5ub3RpZnkoIHRoaXMsIGltYWdlICk7XG4gIH1cbiAgLy8gY2hlY2sgaWYgY29tcGxldGVkXG4gIGlmICggdGhpcy5wcm9ncmVzc2VkQ291bnQgPT09IHRoaXMuaW1hZ2VzLmxlbmd0aCApIHtcbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gIH1cblxuICBpZiAoIHRoaXMub3B0aW9ucy5kZWJ1ZyAmJiBjb25zb2xlICkge1xuICAgIGNvbnNvbGUubG9nKCBgcHJvZ3Jlc3M6ICR7bWVzc2FnZX1gLCBpbWFnZSwgZWxlbSApO1xuICB9XG59O1xuXG5JbWFnZXNMb2FkZWQucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gIGxldCBldmVudE5hbWUgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdmYWlsJyA6ICdkb25lJztcbiAgdGhpcy5pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgdGhpcy5lbWl0RXZlbnQoIGV2ZW50TmFtZSwgWyB0aGlzIF0gKTtcbiAgdGhpcy5lbWl0RXZlbnQoICdhbHdheXMnLCBbIHRoaXMgXSApO1xuICBpZiAoIHRoaXMuanFEZWZlcnJlZCApIHtcbiAgICBsZXQganFNZXRob2QgPSB0aGlzLmhhc0FueUJyb2tlbiA/ICdyZWplY3QnIDogJ3Jlc29sdmUnO1xuICAgIHRoaXMuanFEZWZlcnJlZFsganFNZXRob2QgXSggdGhpcyApO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuZnVuY3Rpb24gTG9hZGluZ0ltYWdlKCBpbWcgKSB7XG4gIHRoaXMuaW1nID0gaW1nO1xufVxuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXZFbWl0dGVyLnByb3RvdHlwZSApO1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIElmIGNvbXBsZXRlIGlzIHRydWUgYW5kIGJyb3dzZXIgc3VwcG9ydHMgbmF0dXJhbCBzaXplcyxcbiAgLy8gdHJ5IHRvIGNoZWNrIGZvciBpbWFnZSBzdGF0dXMgbWFudWFsbHkuXG4gIGxldCBpc0NvbXBsZXRlID0gdGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtcbiAgaWYgKCBpc0NvbXBsZXRlICkge1xuICAgIC8vIHJlcG9ydCBiYXNlZCBvbiBuYXR1cmFsV2lkdGhcbiAgICB0aGlzLmNvbmZpcm0oIHRoaXMuaW1nLm5hdHVyYWxXaWR0aCAhPT0gMCwgJ25hdHVyYWxXaWR0aCcgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBJZiBub25lIG9mIHRoZSBjaGVja3MgYWJvdmUgbWF0Y2hlZCwgc2ltdWxhdGUgbG9hZGluZyBvbiBkZXRhY2hlZCBlbGVtZW50LlxuICB0aGlzLnByb3h5SW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgLy8gYWRkIGNyb3NzT3JpZ2luIGF0dHJpYnV0ZS4gIzIwNFxuICBpZiAoIHRoaXMuaW1nLmNyb3NzT3JpZ2luICkge1xuICAgIHRoaXMucHJveHlJbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuaW1nLmNyb3NzT3JpZ2luO1xuICB9XG4gIHRoaXMucHJveHlJbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5wcm94eUltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIHRoaXMgKTtcbiAgLy8gYmluZCB0byBpbWFnZSBhcyB3ZWxsIGZvciBGaXJlZm94LiAjMTkxXG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5zcmMgPSB0aGlzLmltZy5jdXJyZW50U3JjIHx8IHRoaXMuaW1nLnNyYztcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuZ2V0SXNJbWFnZUNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNoZWNrIGZvciBub24temVybywgbm9uLXVuZGVmaW5lZCBuYXR1cmFsV2lkdGhcbiAgLy8gZml4ZXMgU2FmYXJpK0luZmluaXRlU2Nyb2xsK01hc29ucnkgYnVnIGluZmluaXRlLXNjcm9sbCM2NzFcbiAgcmV0dXJuIHRoaXMuaW1nLmNvbXBsZXRlICYmIHRoaXMuaW1nLm5hdHVyYWxXaWR0aDtcbn07XG5cbkxvYWRpbmdJbWFnZS5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKCBpc0xvYWRlZCwgbWVzc2FnZSApIHtcbiAgdGhpcy5pc0xvYWRlZCA9IGlzTG9hZGVkO1xuICBsZXQgeyBwYXJlbnROb2RlIH0gPSB0aGlzLmltZztcbiAgLy8gZW1pdCBwcm9ncmVzcyB3aXRoIHBhcmVudCA8cGljdHVyZT4gb3Igc2VsZiA8aW1nPlxuICBsZXQgZWxlbSA9IHBhcmVudE5vZGUubm9kZU5hbWUgPT09ICdQSUNUVVJFJyA/IHBhcmVudE5vZGUgOiB0aGlzLmltZztcbiAgdGhpcy5lbWl0RXZlbnQoICdwcm9ncmVzcycsIFsgdGhpcywgZWxlbSwgbWVzc2FnZSBdICk7XG59O1xuXG4vLyAtLS0tLSBldmVudHMgLS0tLS0gLy9cblxuLy8gdHJpZ2dlciBzcGVjaWZpZWQgaGFuZGxlciBmb3IgZXZlbnQgdHlwZVxuTG9hZGluZ0ltYWdlLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgbGV0IG1ldGhvZCA9ICdvbicgKyBldmVudC50eXBlO1xuICBpZiAoIHRoaXNbIG1ldGhvZCBdICkge1xuICAgIHRoaXNbIG1ldGhvZCBdKCBldmVudCApO1xuICB9XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNvbmZpcm0oIHRydWUsICdvbmxvYWQnICk7XG4gIHRoaXMudW5iaW5kRXZlbnRzKCk7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb25maXJtKCBmYWxzZSwgJ29uZXJyb3InICk7XG4gIHRoaXMudW5iaW5kRXZlbnRzKCk7XG59O1xuXG5Mb2FkaW5nSW1hZ2UucHJvdG90eXBlLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByb3h5SW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCB0aGlzICk7XG4gIHRoaXMucHJveHlJbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMuaW1nLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBCYWNrZ3JvdW5kIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbmZ1bmN0aW9uIEJhY2tncm91bmQoIHVybCwgZWxlbWVudCApIHtcbiAgdGhpcy51cmwgPSB1cmw7XG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XG59XG5cbi8vIGluaGVyaXQgTG9hZGluZ0ltYWdlIHByb3RvdHlwZVxuQmFja2dyb3VuZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMb2FkaW5nSW1hZ2UucHJvdG90eXBlICk7XG5cbkJhY2tncm91bmQucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgdGhpcyApO1xuICB0aGlzLmltZy5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCB0aGlzICk7XG4gIHRoaXMuaW1nLnNyYyA9IHRoaXMudXJsO1xuICAvLyBjaGVjayBpZiBpbWFnZSBpcyBhbHJlYWR5IGNvbXBsZXRlXG4gIGxldCBpc0NvbXBsZXRlID0gdGhpcy5nZXRJc0ltYWdlQ29tcGxldGUoKTtcbiAgaWYgKCBpc0NvbXBsZXRlICkge1xuICAgIHRoaXMuY29uZmlybSggdGhpcy5pbWcubmF0dXJhbFdpZHRoICE9PSAwLCAnbmF0dXJhbFdpZHRoJyApO1xuICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG4gIH1cbn07XG5cbkJhY2tncm91bmQucHJvdG90eXBlLnVuYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmltZy5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIHRoaXMgKTtcbiAgdGhpcy5pbWcucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgdGhpcyApO1xufTtcblxuQmFja2dyb3VuZC5wcm90b3R5cGUuY29uZmlybSA9IGZ1bmN0aW9uKCBpc0xvYWRlZCwgbWVzc2FnZSApIHtcbiAgdGhpcy5pc0xvYWRlZCA9IGlzTG9hZGVkO1xuICB0aGlzLmVtaXRFdmVudCggJ3Byb2dyZXNzJywgWyB0aGlzLCB0aGlzLmVsZW1lbnQsIG1lc3NhZ2UgXSApO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0galF1ZXJ5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cbkltYWdlc0xvYWRlZC5tYWtlSlF1ZXJ5UGx1Z2luID0gZnVuY3Rpb24oIGpRdWVyeSApIHtcbiAgalF1ZXJ5ID0galF1ZXJ5IHx8IHdpbmRvdy5qUXVlcnk7XG4gIGlmICggIWpRdWVyeSApIHJldHVybjtcblxuICAvLyBzZXQgbG9jYWwgdmFyaWFibGVcbiAgJCA9IGpRdWVyeTtcbiAgLy8gJCgpLmltYWdlc0xvYWRlZCgpXG4gICQuZm4uaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24oIG9wdGlvbnMsIG9uQWx3YXlzICkge1xuICAgIGxldCBpbnN0YW5jZSA9IG5ldyBJbWFnZXNMb2FkZWQoIHRoaXMsIG9wdGlvbnMsIG9uQWx3YXlzICk7XG4gICAgcmV0dXJuIGluc3RhbmNlLmpxRGVmZXJyZWQucHJvbWlzZSggJCggdGhpcyApICk7XG4gIH07XG59O1xuLy8gdHJ5IG1ha2luZyBwbHVnaW5cbkltYWdlc0xvYWRlZC5tYWtlSlF1ZXJ5UGx1Z2luKCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG5yZXR1cm4gSW1hZ2VzTG9hZGVkO1xuXG59ICk7XG4iLCAiaW1wb3J0IHtcclxuXHRBcHAsXHJcblx0RWRpdG9yLFxyXG5cdE1hcmtkb3duVmlldyxcclxuXHRNb2RhbCxcclxuXHROb3RpY2UsXHJcblx0UGx1Z2luLFxyXG5cdFBsdWdpblNldHRpbmdUYWIsXHJcblx0U2V0dGluZyxcclxuXHRURmlsZSxcclxuXHRXb3Jrc3BhY2VMZWFmLFxyXG59IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQge1xyXG5cdFByb0dhbGxlcnlWaWV3LFxyXG5cdFZJRVdfVFlQRV9QUk9fR0FMTEVSWSxcclxufSBmcm9tIFwiLi92aWV3L3BvcnRmb2xpby1nYWxsZXJ5XCI7XHJcblxyXG4vLyBSZW1lbWJlciB0byByZW5hbWUgdGhlc2UgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyFcclxuXHJcbmludGVyZmFjZSBQcm9HYWxsZXJ5UGx1Z2luU2V0dGluZ3Mge1xyXG5cdG15U2V0dGluZzogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQcm9HYWxsZXJ5UGx1Z2luU2V0dGluZ3MgPSB7XHJcblx0bXlTZXR0aW5nOiBcImRlZmF1bHRcIixcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb0dhbGxlcnlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBQcm9HYWxsZXJ5UGx1Z2luU2V0dGluZ3M7XHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cclxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgUHJvR2FsbGVyeVNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuXHJcblx0XHRhd2FpdCB0aGlzLnJlZ2lzdGVyVmlldyhcclxuXHRcdFx0VklFV19UWVBFX1BST19HQUxMRVJZLFxyXG5cdFx0XHQobGVhZjogV29ya3NwYWNlTGVhZikgPT4gbmV3IFByb0dhbGxlcnlWaWV3KGxlYWYsIHRoaXMpXHJcblx0XHQpO1xyXG5cclxuXHRcdHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0dGhpcy5yZWdpc3RlckV2ZW50KFxyXG5cdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbihcImZpbGUtb3BlblwiLCBhc3luYyAoZmlsZSkgPT4ge1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5oYW5kbGVGaWxlT3BlbihmaWxlKTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0Ly8gXHU2M0QyXHU0RUY2XHU1MkEwXHU4RjdEXHU1QjhDXHU2MjEwXHU1NDBFXHVGRjBDXHU2OEMwXHU2N0U1XHU0RTAwXHU2QjIxXHU1RjUzXHU1MjREXHU2NTg3XHU0RUY2XHJcblx0XHRcdHRoaXMuaGFuZGxlRmlsZU9wZW4odGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKSk7XHJcblx0XHR9LCAwKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgYXN5bmMgaGFuZGxlRmlsZU9wZW4oZmlsZTogVEZpbGUgfCBudWxsKSB7XHJcblx0XHRpZiAoIWZpbGUpIHJldHVybjtcclxuXHRcdGlmICghZmlsZS5iYXNlbmFtZS5lbmRzV2l0aChcIi5jeXVcIikgfHwgZmlsZS5leHRlbnNpb24gIT09IFwibWRcIikgcmV0dXJuO1xyXG5cclxuXHRcdGNvbnN0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpPy5sZWFmO1xyXG5cdFx0aWYgKCFsZWFmKSByZXR1cm47XHJcblxyXG5cdFx0YXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoe1xyXG5cdFx0XHR0eXBlOiBWSUVXX1RZUEVfUFJPX0dBTExFUlksXHJcblx0XHRcdHN0YXRlOiB7IGZpbGU6IGZpbGUucGF0aCB9LFxyXG5cdFx0XHRhY3RpdmU6IHRydWUsXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCkge31cclxuXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oXHJcblx0XHRcdHt9LFxyXG5cdFx0XHRERUZBVUxUX1NFVFRJTkdTLFxyXG5cdFx0XHRhd2FpdCB0aGlzLmxvYWREYXRhKClcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgUHJvR2FsbGVyeVNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHRwbHVnaW46IFByb0dhbGxlcnlQbHVnaW47XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFByb0dhbGxlcnlQbHVnaW4pIHtcclxuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdH1cclxuXHJcblx0ZGlzcGxheSgpOiB2b2lkIHtcclxuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJTZXR0aW5nICMxXCIpXHJcblx0XHRcdC5zZXREZXNjKFwiSXQncyBhIHNlY3JldFwiKVxyXG5cdFx0XHQuYWRkVGV4dCgodGV4dCkgPT5cclxuXHRcdFx0XHR0ZXh0XHJcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoXCJFbnRlciB5b3VyIHNlY3JldFwiKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm15U2V0dGluZylcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHR9XHJcbn1cclxuIiwgImltcG9ydCB7XHJcblx0V29ya3NwYWNlTGVhZixcclxuXHRURmlsZSxcclxuXHROb3RpY2UsXHJcblx0VGV4dEZpbGVWaWV3LFxyXG5cdE1hcmtkb3duUmVuZGVyZXIsXHJcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCBQcm9HYWxsZXJ5UGx1Z2luIGZyb20gXCJzcmMvbWFpblwiO1xyXG5pbXBvcnQgeyBJbnRyb0NvbnRlbnQsIFBhZ2VEYXRhIH0gZnJvbSBcInNyYy9kYXRhL3BhZ2UtZGF0YVwiO1xyXG5pbXBvcnQgeyBGaWxlVXRpbCB9IGZyb20gXCJzcmMvdXRpbC9maWxlLXV0aWxzXCI7XHJcbmltcG9ydCB7XHJcblx0Y3JlYXRlSW50cm9CbG9jayxcclxuXHRjcmVhdGVNZEJsb2NrLFxyXG5cdGNyZWF0ZVdvcmtzQmxvY2ssXHJcbn0gZnJvbSBcIi4vcG9ydGZvbGlvLWludHJvXCI7XHJcbmltcG9ydCB7IHJlbmRlck1EIH0gZnJvbSBcInNyYy91dGlsL3V0aWxzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgVklFV19UWVBFX1BST19HQUxMRVJZID0gXCJnYWxsZXJ5XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJvR2FsbGVyeVZpZXcgZXh0ZW5kcyBUZXh0RmlsZVZpZXcge1xyXG5cdHBsdWdpbjogUHJvR2FsbGVyeVBsdWdpbjtcclxuXHRwYWdlRGF0YTogUGFnZURhdGE7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHBsdWdpbjogUHJvR2FsbGVyeVBsdWdpbikge1xyXG5cdFx0c3VwZXIobGVhZik7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHRcdHRoaXMucGFnZURhdGEgPSBuZXcgUGFnZURhdGEoW10pO1xyXG5cdH1cclxuXHJcblx0Z2V0SWNvbigpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIFwiZ2FsbGVyeVwiO1xyXG5cdH1cclxuXHJcblx0Z2V0RGlzcGxheVRleHQoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5maWxlPy5iYXNlbmFtZSB8fCBcIlBybyBHYWxsZXJ5XCI7XHJcblx0fVxyXG5cclxuXHRnZXRWaWV3VHlwZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIFZJRVdfVFlQRV9QUk9fR0FMTEVSWTtcclxuXHR9XHJcblxyXG5cdC8vIFx1OEJGQlx1NTNENlx1NjU4N1x1NEVGNlx1NjU3MFx1NjM2RSAtPiBQYWdlRGF0YVxyXG5cdGFzeW5jIHNldFZpZXdEYXRhKGRhdGE6IHN0cmluZywgY2xlYXI6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdGlmICghdGhpcy5maWxlKSByZXR1cm47XHJcblxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0dGhpcy5wYWdlRGF0YSA9IGF3YWl0IEZpbGVVdGlsLmxvYWRQYWdlRGF0YSh0aGlzLmFwcCwgdGhpcy5maWxlKTtcclxuXHRcdH0gY2F0Y2ggKGVycikge1xyXG5cdFx0XHRuZXcgTm90aWNlKFwiXHUyNzRDIFx1NjVFMFx1NkNENVx1NTJBMFx1OEY3RFx1NzUzQlx1NUVDQVx1NjU4N1x1NEVGNlwiKTtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xyXG5cdFx0XHR0aGlzLnBhZ2VEYXRhID0gbmV3IFBhZ2VEYXRhKFtdKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBcdTZFMzJcdTY3RDNcclxuXHRcdGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5bMV07XHJcblx0XHRjb250YWluZXIuZW1wdHkoKTtcclxuXHJcblx0XHQvLyBcdTk4NzZcdTkwRThcdTVERTVcdTUxNzdcdTY4MEZcclxuXHRcdGNvbnN0IHRvcEJhciA9IGNvbnRhaW5lci5jcmVhdGVEaXYoXCJQcm9HYWxsZXJ5LVRvcEJhclwiKTtcclxuXHRcdGNvbnN0IGFkZEJ1dHRvbiA9IHRvcEJhci5jcmVhdGVFbChcImJ1dHRvblwiLCB7XHJcblx0XHRcdHRleHQ6IFwiXHU2REZCXHU1MkEwXHU4MjdBXHU2NzJGXHU1QkI2XHU1NzU3XCIsXHJcblx0XHRcdGNsczogW1wiUHJvR2FsbGVyeS1BZGRCdXR0b25cIiwgXCJtb2QtY3RhXCJdLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gXHU2NUIwXHU1RUZBXHJcblx0XHRhZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcclxuXHRcdFx0dGhpcy5wYWdlRGF0YS5hZGRCbG9jayhcImludHJvXCIsIHtcclxuXHRcdFx0XHRuYW1lOiBbXCJcdTY1QjBcdTgyN0FcdTY3MkZcdTVCQjZcIiwgXCJcdTUyMkJcdTU0MERcIl0sXHJcblx0XHRcdFx0YXZhdGFyczogW10sXHJcblx0XHRcdFx0YmFubmVyOiBbXSxcclxuXHRcdFx0XHR0aGVtZTogMCxcclxuXHRcdFx0XHRvZmZpY2lhbF9zb2NpYWxzOiBbXSxcclxuXHRcdFx0XHR1bm9mZmljaWFsX3NvY2lhbHM6IFtdLFxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGlmICh0aGlzLmZpbGUpIHtcclxuXHRcdFx0XHRhd2FpdCBGaWxlVXRpbC5zYXZlUGFnZURhdGEodGhpcy5hcHAsIHRoaXMuZmlsZSwgdGhpcy5wYWdlRGF0YSk7XHJcblx0XHRcdFx0dGhpcy5yZW5kZXJCbG9ja3MoY29udGFpbmVyIGFzIEhUTUxFbGVtZW50KTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gXHU0RTNCXHU1QkI5XHU1NjY4XHJcblx0XHRjb25zdCBnYWxsZXJ5Q29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdihcIlByb0dhbGxlcnktQ29udGFpbmVyXCIpO1xyXG5cdFx0dGhpcy5yZW5kZXJCbG9ja3MoZ2FsbGVyeUNvbnRhaW5lcik7XHJcblx0fVxyXG5cclxuXHQvLyBcdTYyOEEgcGFnZURhdGEgXHU2RTMyXHU2N0QzXHU1MUZBXHU2NzY1XHJcblx0cHJpdmF0ZSByZW5kZXJCbG9ja3MoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xyXG5cdFx0Y29udGFpbmVyLmVtcHR5KCk7XHJcblx0XHR0aGlzLnBhZ2VEYXRhLnBhZ2UuZm9yRWFjaCgoYmxvY2spID0+IHtcclxuXHRcdFx0Y29uc3QgYmxvY2tFbCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoXCJQcm9HYWxsZXJ5LUJsb2NrXCIpO1xyXG5cdFx0XHRibG9ja0VsLnNldEF0dHIoXCJkYXRhLWlkXCIsIGJsb2NrLmlkKTtcclxuXHJcblx0XHRcdGlmIChibG9jay50eXBlID09PSBcImludHJvXCIpIHtcclxuXHRcdFx0XHRjcmVhdGVJbnRyb0Jsb2NrKGJsb2NrLCBibG9ja0VsLCB0aGlzKTtcclxuXHRcdFx0fSBlbHNlIGlmIChibG9jay50eXBlID09PSBcIm1kXCIpIHtcclxuXHRcdFx0XHRjcmVhdGVNZEJsb2NrKGJsb2NrLCBibG9ja0VsLCB0aGlzKTtcclxuXHRcdFx0fSBlbHNlIGlmIChibG9jay50eXBlID09PSBcIndvcmtzXCIpIHtcclxuXHRcdFx0XHRjcmVhdGVXb3Jrc0Jsb2NrKGJsb2NrLCBibG9ja0VsLCB0aGlzKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRnZXRWaWV3RGF0YSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMucGFnZURhdGEudG9KU09OKCksIG51bGwsIDIpO1xyXG5cdH1cclxuXHJcblx0Y2xlYXIoKTogdm9pZCB7XHJcblx0XHR0aGlzLmNvbnRhaW5lckVsLmVtcHR5KCk7XHJcblx0XHR0aGlzLmZpbGUgPSBudWxsO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgb25PcGVuKCkge1xyXG5cdFx0Y29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcclxuXHRcdGNvbnRhaW5lci5lbXB0eSgpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgb25DbG9zZSgpIHt9XHJcbn1cclxuIiwgIi8qIGVzbGludC1kaXNhYmxlIG5vLW1peGVkLXNwYWNlcy1hbmQtdGFicyAqL1xyXG4vLyBcdTdCODBcdTRFQ0JcdTU3NTdcclxuZXhwb3J0IHR5cGUgSW50cm9Db250ZW50ID0ge1xyXG5cdG5hbWU6IHN0cmluZ1tdO1xyXG5cdGF2YXRhcnM6IHN0cmluZ1tdO1xyXG5cdHRoZW1lOiBudW1iZXI7XHJcblx0YmFubmVyOiBzdHJpbmdbXTtcclxuXHRvZmZpY2lhbF9zb2NpYWxzOiBzdHJpbmdbXTtcclxuXHR1bm9mZmljaWFsX3NvY2lhbHM6IHsgcGxhdGZvcm06IHN0cmluZzsgdXJsOiBzdHJpbmcgfVtdO1xyXG59O1xyXG5cclxuLy8gXHU0RjVDXHU1NEMxXHU1NzU3XHJcbmV4cG9ydCB0eXBlIFdvcmtzQ29udGVudCA9IHtcclxuXHRjb25maWc/OiBHYWxsZXJ5Q29uZmlnO1xyXG5cdGl0ZW1zOiBXb3JrSXRlbVtdO1xyXG59O1xyXG5cclxuLy8gXHU2QkNGXHU0RTJBXHU0RjVDXHU1NEMxXHU5ODc5XHU3Njg0XHU3QzdCXHU1NzhCXHJcbmV4cG9ydCB0eXBlIFdvcmtJdGVtID1cclxuXHR8IHtcclxuXHRcdFx0dHlwZTogXCJpbWFnZVwiO1xyXG5cdFx0XHR1cmw6IHN0cmluZztcclxuXHRcdFx0b3JpZ2luPzogc3RyaW5nO1xyXG5cdFx0XHRjYXB0aW9uPzogc3RyaW5nO1xyXG5cdFx0XHRjb21tZW50Pzogc3RyaW5nO1xyXG5cdCAgfVxyXG5cdHwgeyB0eXBlOiBcImNhcmRcIjsgZnJvbnQ6IHN0cmluZzsgYmFjazogc3RyaW5nIH1cclxuXHR8IHsgdHlwZTogXCJ2aWRlb1wiOyB1cmw6IHN0cmluZyB9XHJcblx0fCB7IHR5cGU6IFwiY29taWNcIjsgdXJsczogc3RyaW5nW10gfTsgLy8gXHU2RjJCXHU3NTNCXHU1OTFBXHU1RjIwXHU1NkZFXHU3MjQ3XHJcblxyXG50eXBlIEdhbGxlcnlDb25maWcgPSB7XHJcblx0bWFzb25yeTogXCJjb2xcIiB8IFwicm93XCI7XHJcblx0Y29sX251bT86IG51bWJlcjtcclxuXHRyb3dfbnVtPzogbnVtYmVyO1xyXG59O1xyXG5cclxuLy8gXHU0RTAwXHU2NTc0XHU0RTJBXHU1NzU3XHJcbmV4cG9ydCB0eXBlIEJsb2NrID0ge1xyXG5cdGlkOiBzdHJpbmc7XHJcblx0dHlwZTogXCJpbnRyb1wiIHwgXCJtZFwiIHwgXCJ3b3Jrc1wiO1xyXG5cdGNvbnRlbnQ6IEludHJvQ29udGVudCB8IHN0cmluZyB8IFdvcmtzQ29udGVudDtcclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFnZVNldHRpbmdzIHtcclxuXHRsYXlvdXQ6IFwiZ3JpZFwiIHwgXCJsaXN0XCI7IC8vIFx1NzUzQlx1NUVDQVx1NUUwM1x1NUM0MFx1NjVCOVx1NUYwRlxyXG5cdGNvbHVtbnM6IG51bWJlcjsgLy8gXHU3RjUxXHU2ODNDXHU1MjE3XHU2NTcwXHJcblx0c2hvd0F2YXRhcnM6IGJvb2xlYW47IC8vIFx1NjYyRlx1NTQyNlx1NjYzRVx1NzkzQVx1ODI3QVx1NjcyRlx1NUJCNlx1NTkzNFx1NTBDRlxyXG5cdGJhY2tncm91bmQ/OiBzdHJpbmc7IC8vIFx1ODBDQ1x1NjY2Rlx1ODI3MlxyXG5cdHRoZW1lPzogXCJsaWdodFwiIHwgXCJkYXJrXCI7IC8vIFx1ODFFQVx1NUI5QVx1NEU0OVx1NEUzQlx1OTg5OFxyXG5cdFtrZXk6IHN0cmluZ106IGFueTsgLy8gXHU0RUU1XHU1NDBFXHU2MjY5XHU1QzU1XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQYWdlRGF0YSB7XHJcblx0c2V0dGluZ3M6IFBhZ2VTZXR0aW5ncztcclxuXHRwYWdlOiBCbG9ja1tdO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihwYWdlOiBCbG9ja1tdID0gW10sIHNldHRpbmdzPzogUGFydGlhbDxQYWdlU2V0dGluZ3M+KSB7XHJcblx0XHR0aGlzLnBhZ2UgPSBwYWdlO1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IHtcclxuXHRcdFx0bGF5b3V0OiBcImdyaWRcIixcclxuXHRcdFx0Y29sdW1uczogMyxcclxuXHRcdFx0c2hvd0F2YXRhcnM6IHRydWUsXHJcblx0XHRcdC4uLnNldHRpbmdzLCAvLyBcdTg5ODZcdTc2RDZcdTlFRDhcdThCQTRcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHQvLyBcdTc1MUZcdTYyMTBcdTU1MkZcdTRFMDAgSURcdUZGMDhcdTY1RjZcdTk1RjRcdTYyMzNcdUZGMDlcclxuXHRwcml2YXRlIGdlbmVyYXRlSWQoKTogc3RyaW5nIHtcclxuXHRcdGNvbnN0IHRzID0gbmV3IERhdGUoKVxyXG5cdFx0XHQudG9JU09TdHJpbmcoKVxyXG5cdFx0XHQucmVwbGFjZSgvWy06LlRaXS9nLCBcIlwiKVxyXG5cdFx0XHQuc2xpY2UoMCwgMTQpOyAvLyBZWVlZTU1EREhITU1TU1xyXG5cdFx0cmV0dXJuIGBibGstJHt0c31gO1xyXG5cdFx0Ly8gcmV0dXJuIGBibGstJHt0c30tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyLCA2KX1gO1xyXG5cdH1cclxuXHJcblx0Ly8gXHU2REZCXHU1MkEwXHU0RTAwXHU0RTJBXHU1NzU3XHJcblx0YWRkQmxvY2soXHJcblx0XHR0eXBlOiBCbG9ja1tcInR5cGVcIl0sXHJcblx0XHRjb250ZW50OiBCbG9ja1tcImNvbnRlbnRcIl0sXHJcblx0XHRpbmRleD86IG51bWJlclxyXG5cdCk6IEJsb2NrIHtcclxuXHRcdGNvbnN0IGJsb2NrOiBCbG9jayA9IHtcclxuXHRcdFx0aWQ6IHRoaXMuZ2VuZXJhdGVJZCgpLFxyXG5cdFx0XHR0eXBlLFxyXG5cdFx0XHRjb250ZW50LFxyXG5cdFx0fTtcclxuXHJcblx0XHRpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpbmRleCA+PSAwICYmIGluZGV4IDw9IHRoaXMucGFnZS5sZW5ndGgpIHtcclxuXHRcdFx0dGhpcy5wYWdlLnNwbGljZShpbmRleCwgMCwgYmxvY2spO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5wYWdlLnB1c2goYmxvY2spO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGJsb2NrO1xyXG5cdH1cclxuXHJcblx0Ly8gXHU1MjIwXHU5NjY0XHU1NzU3XHJcblx0cmVtb3ZlQmxvY2soaWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG5cdFx0Y29uc3QgaWR4ID0gdGhpcy5wYWdlLmZpbmRJbmRleCgoYikgPT4gYi5pZCA9PT0gaWQpO1xyXG5cdFx0aWYgKGlkeCAhPT0gLTEpIHtcclxuXHRcdFx0dGhpcy5wYWdlLnNwbGljZShpZHgsIDEpO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdC8vIFx1NjdFNVx1NjI3RVx1NTc1N1xyXG5cdGdldEJsb2NrKGlkOiBzdHJpbmcpOiBCbG9jayB8IHVuZGVmaW5lZCB7XHJcblx0XHRyZXR1cm4gdGhpcy5wYWdlLmZpbmQoKGIpID0+IGIuaWQgPT09IGlkKTtcclxuXHR9XHJcblxyXG5cdC8vIFx1NUJGQ1x1NTFGQSBKU09OXHJcblx0dG9KU09OKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkoXHJcblx0XHRcdHsgc2V0dGluZ3M6IHRoaXMuc2V0dGluZ3MsIHBhZ2U6IHRoaXMucGFnZSB9LFxyXG5cdFx0XHRudWxsLFxyXG5cdFx0XHQyXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0Ly8gXHU0RUNFIEpTT04gXHU1MjFCXHU1RUZBXHU1QjlFXHU0RjhCXHJcblx0c3RhdGljIGZyb21KU09OKGRhdGE6IGFueSk6IFBhZ2VEYXRhIHtcclxuXHRcdGlmICghZGF0YS5wYWdlIHx8ICFBcnJheS5pc0FycmF5KGRhdGEucGFnZSkpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBQYWdlRGF0YSBKU09OXCIpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5ldyBQYWdlRGF0YShkYXRhLnBhZ2UpO1xyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHsgQXBwLCBURmlsZSwgTm90aWNlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IFBhZ2VEYXRhIH0gZnJvbSBcInNyYy9kYXRhL3BhZ2UtZGF0YVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZpbGVVdGlsIHtcclxuXHQvKipcclxuXHQgKiBcdTRFQ0UgVEZpbGUgXHU4QkZCXHU1M0Q2XHU1RTc2XHU4OUUzXHU2NzkwIFBhZ2VEYXRhXHVGRjA4XHU0RkREXHU3NTU5IFlBTUwgZnJvbnRtYXR0ZXJcdUZGMDlcclxuXHQgKi9cclxuXHRzdGF0aWMgYXN5bmMgbG9hZFBhZ2VEYXRhKGFwcDogQXBwLCBmaWxlOiBURmlsZSk6IFByb21pc2U8UGFnZURhdGE+IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGNvbnN0IGRhdGEgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHRcdFx0bGV0IGNvbnRlbnQgPSBkYXRhO1xyXG5cdFx0XHQvLyBcdTYzRDBcdTUzRDYgWUFNTCBmcm9udG1hdHRlclxyXG5cdFx0XHRjb25zdCB5YW1sTWF0Y2ggPSAvXi0tLVxcbihbXFxzXFxTXSo/KVxcbi0tLVxcbj8vLmV4ZWMoZGF0YSk7XHJcblx0XHRcdGlmICh5YW1sTWF0Y2gpIHtcclxuXHRcdFx0XHRjb250ZW50ID0gZGF0YS5zbGljZSh5YW1sTWF0Y2hbMF0ubGVuZ3RoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjb25zdCBqc29uID0gSlNPTi5wYXJzZShjb250ZW50KTtcclxuXHRcdFx0cmV0dXJuIFBhZ2VEYXRhLmZyb21KU09OKGpzb24pO1xyXG5cdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRuZXcgTm90aWNlKFwiXHUyNzRDIFx1NjVFMFx1NkNENVx1ODlFM1x1Njc5MFx1NzUzQlx1NUVDQVx1NjU4N1x1NEVGNlx1RkYwQ1x1NURGMlx1OEZENFx1NTZERVx1N0E3QVx1OTg3NVx1OTc2MlwiKTtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihcIkZpbGVVdGlsLmxvYWRQYWdlRGF0YSBlcnJvcjpcIiwgZSk7XHJcblx0XHRcdHJldHVybiBuZXcgUGFnZURhdGEoW10pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogXHU1QzA2IFBhZ2VEYXRhIFx1NEZERFx1NUI1OFx1NTIzMCBURmlsZVx1RkYwOFx1NEZERFx1NzU1OSBZQU1MIGZyb250bWF0dGVyXHVGRjA5XHJcblx0ICovXHJcblx0c3RhdGljIGFzeW5jIHNhdmVQYWdlRGF0YShcclxuXHRcdGFwcDogQXBwLFxyXG5cdFx0ZmlsZTogVEZpbGUsXHJcblx0XHRwYWdlRGF0YTogUGFnZURhdGFcclxuXHQpOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGNvbnN0IGRhdGEgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHRcdFx0bGV0IHlhbWwgPSBcIlwiO1xyXG5cdFx0XHQvLyBcdTYzRDBcdTUzRDYgWUFNTCBmcm9udG1hdHRlclxyXG5cdFx0XHRjb25zdCB5YW1sTWF0Y2ggPSAvXi0tLVxcbihbXFxzXFxTXSo/KVxcbi0tLVxcbj8vLmV4ZWMoZGF0YSk7XHJcblx0XHRcdGlmICh5YW1sTWF0Y2gpIHtcclxuXHRcdFx0XHR5YW1sID0geWFtbE1hdGNoWzBdOyAvLyBcdTUzMDVcdTYyRUNcdTUyNERcdTU0MEVcdTc2ODQgLS0tXHJcblx0XHRcdH1cclxuXHRcdFx0Y29uc3QganNvblN0ciA9IHBhZ2VEYXRhLnRvSlNPTigpO1xyXG5cdFx0XHRjb25zdCBuZXdDb250ZW50ID0geWFtbCArIFwiXFxuXCIgKyBqc29uU3RyO1xyXG5cdFx0XHRhd2FpdCBhcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0NvbnRlbnQpO1xyXG5cdFx0XHRuZXcgTm90aWNlKFwiXHUyNzA1IFx1NzUzQlx1NUVDQVx1NURGMlx1NEZERFx1NUI1OFwiKTtcclxuXHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0bmV3IE5vdGljZShcIlx1Mjc0QyBcdTRGRERcdTVCNThcdTU5MzFcdThEMjVcIik7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJGaWxlVXRpbC5zYXZlUGFnZURhdGEgZXJyb3I6XCIsIGUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogXHU1MjFCXHU1RUZBXHU0RTAwXHU0RTJBXHU2NUIwXHU3Njg0XHU3QTdBXHU3NTNCXHU1RUNBXHU2NTg3XHU0RUY2XHJcblx0ICovXHJcblx0c3RhdGljIGFzeW5jIGNyZWF0ZUVtcHR5UGFnZShhcHA6IEFwcCwgcGF0aDogc3RyaW5nKTogUHJvbWlzZTxURmlsZT4ge1xyXG5cdFx0Y29uc3QgZW1wdHlQYWdlID0gbmV3IFBhZ2VEYXRhKFtdKTtcclxuXHRcdGNvbnN0IGNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShlbXB0eVBhZ2UudG9KU09OKCksIG51bGwsIDIpO1xyXG5cdFx0cmV0dXJuIGF3YWl0IGFwcC52YXVsdC5jcmVhdGUocGF0aCwgY29udGVudCk7XHJcblx0fVxyXG59XHJcbiIsICJpbXBvcnQgeyBDb21wb25lbnQsIE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgUHJvR2FsbGVyeVZpZXcgfSBmcm9tIFwic3JjL3ZpZXcvcG9ydGZvbGlvLWdhbGxlcnlcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUJsb2NrSWQoKTogc3RyaW5nIHtcclxuXHRjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG5cdGNvbnN0IHBhZCA9IChuOiBudW1iZXIpID0+IG4udG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIik7XHJcblx0Y29uc3QgdGltZXN0YW1wID1cclxuXHRcdG5vdy5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkgK1xyXG5cdFx0cGFkKG5vdy5nZXRNb250aCgpICsgMSkgK1xyXG5cdFx0cGFkKG5vdy5nZXREYXRlKCkpICtcclxuXHRcdHBhZChub3cuZ2V0SG91cnMoKSkgK1xyXG5cdFx0cGFkKG5vdy5nZXRNaW51dGVzKCkpICtcclxuXHRcdHBhZChub3cuZ2V0U2Vjb25kcygpKTtcclxuXHRyZXR1cm4gYGJsay0ke3RpbWVzdGFtcH1gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyTUQoXHJcblx0bWRDb250ZW50OiBzdHJpbmcsXHJcblx0bWRFbGVtZW50OiBIVE1MRWxlbWVudCxcclxuXHRjb21wb25lbnQ6IENvbXBvbmVudFxyXG4pIHtcclxuXHRjb25zdCB2aWV3ID0gY29tcG9uZW50IGFzIFByb0dhbGxlcnlWaWV3O1xyXG5cdE1hcmtkb3duUmVuZGVyZXIucmVuZGVyKFxyXG5cdFx0dmlldy5hcHAsXHJcblx0XHRtZENvbnRlbnQsXHJcblx0XHRtZEVsZW1lbnQsXHJcblx0XHR2aWV3LmZpbGU/LnBhdGggPz8gXCJcIixcclxuXHRcdHZpZXdcclxuXHQpO1xyXG59XHJcbiIsICJpbXBvcnQgeyBXb3JrSXRlbSwgV29ya3NDb250ZW50IH0gZnJvbSBcIi4vcGFnZS1kYXRhXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlRGF0YSB7XHJcblx0Y2FwdGlvbl90ZXh0OiBzdHJpbmc7XHJcblx0dGh1bWJfbGluazogc3RyaW5nO1xyXG5cdG9yaWdpbl9saW5rOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVmlkZW9EYXRhIHtcclxuXHRjYXB0aW9uX3RleHQ6IHN0cmluZztcclxuXHRwb3N0ZXJfbGluazogc3RyaW5nO1xyXG5cdHZpZGVvX2xpbms6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTcmNNZWRpYURhdGEge1xyXG5cdGlzX3BsYWNlaG9sZGVyPzogYm9vbGVhbjtcclxuXHRpc19pbWFnZTogYm9vbGVhbjtcclxuXHRjb21tZW50X3RleHQ6IHN0cmluZyB8IG51bGw7XHJcblx0aW1hZ2VfZGF0YTogSW1hZ2VEYXRhIHwgbnVsbDtcclxuXHR2aWRlb19kYXRhOiBWaWRlb0RhdGEgfCBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWVkaWFEYXRhIHtcclxuXHRtZWRpYUxpc3Q6IFNyY01lZGlhRGF0YVtdID0gW107XHJcblxyXG5cdGNvbnN0cnVjdG9yKG1lZGlhTGlzdDogU3JjTWVkaWFEYXRhW10gPSBbXSkge1xyXG5cdFx0dGhpcy5tZWRpYUxpc3QgPSBtZWRpYUxpc3Q7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZnJvbVdvcmtzQ29udGVudChcclxuXHRcdGNvbnRlbnQ6IFdvcmtzQ29udGVudCB8IFdvcmtJdGVtW10gfCB1bmRlZmluZWRcclxuXHQpOiBTcmNNZWRpYURhdGFbXSB7XHJcblx0XHRpZiAoIWNvbnRlbnQpIHJldHVybiBbXTtcclxuXHJcblx0XHRjb25zdCBtZWRpYUxpc3Q6IFNyY01lZGlhRGF0YVtdID0gW107XHJcblx0XHRjb25zdCBjbG91ZGZhcmVDRE4gPSBcImh0dHBzOi8vaW1hZ2UtcHJveHkuY3l1aGFvbmFuLndvcmtlcnMuZGV2XCI7XHJcblxyXG5cdFx0Ly8gXHU1MjI0XHU2NUFEIGNvbnRlbnQgXHU2NjJGXHU2NTcwXHU3RUM0XHU4RkQ4XHU2NjJGXHU1QkY5XHU4QzYxXHJcblx0XHRjb25zdCBpdGVtczogV29ya0l0ZW1bXSA9IEFycmF5LmlzQXJyYXkoY29udGVudClcclxuXHRcdFx0PyBjb250ZW50XHJcblx0XHRcdDogY29udGVudC5pdGVtcyB8fCBbXTtcclxuXHJcblx0XHRpdGVtcy5mb3JFYWNoKChpdGVtOiBXb3JrSXRlbSkgPT4ge1xyXG5cdFx0XHRzd2l0Y2ggKGl0ZW0udHlwZSkge1xyXG5cdFx0XHRcdGNhc2UgXCJpbWFnZVwiOlxyXG5cdFx0XHRcdFx0bWVkaWFMaXN0LnB1c2goe1xyXG5cdFx0XHRcdFx0XHRpc19pbWFnZTogdHJ1ZSxcclxuXHRcdFx0XHRcdFx0Y29tbWVudF90ZXh0OiBpdGVtLmNvbW1lbnQgfHwgbnVsbCxcclxuXHRcdFx0XHRcdFx0aW1hZ2VfZGF0YToge1xyXG5cdFx0XHRcdFx0XHRcdGNhcHRpb25fdGV4dDogaXRlbS5jYXB0aW9uIHx8IFwiXCIsXHJcblx0XHRcdFx0XHRcdFx0dGh1bWJfbGluazogTWVkaWFEYXRhLmdldFRodW1iVXJsKFxyXG5cdFx0XHRcdFx0XHRcdFx0aXRlbS51cmwsXHJcblx0XHRcdFx0XHRcdFx0XHRjbG91ZGZhcmVDRE5cclxuXHRcdFx0XHRcdFx0XHQpLFxyXG5cdFx0XHRcdFx0XHRcdG9yaWdpbl9saW5rOiBNZWRpYURhdGEuZ2V0T3JpZ2lVcmwoXHJcblx0XHRcdFx0XHRcdFx0XHRpdGVtLnVybCxcclxuXHRcdFx0XHRcdFx0XHRcdGNsb3VkZmFyZUNETlxyXG5cdFx0XHRcdFx0XHRcdCksXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdHZpZGVvX2RhdGE6IG51bGwsXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCJjYXJkXCI6XHJcblx0XHRcdFx0XHRtZWRpYUxpc3QucHVzaCh7XHJcblx0XHRcdFx0XHRcdGlzX2ltYWdlOiB0cnVlLFxyXG5cdFx0XHRcdFx0XHRjb21tZW50X3RleHQ6IG51bGwsXHJcblx0XHRcdFx0XHRcdGltYWdlX2RhdGE6IHtcclxuXHRcdFx0XHRcdFx0XHRjYXB0aW9uX3RleHQ6IFwiQ2FyZCBzaWRlIEFcIixcclxuXHRcdFx0XHRcdFx0XHR0aHVtYl9saW5rOiBpdGVtLmZyb250LFxyXG5cdFx0XHRcdFx0XHRcdG9yaWdpbl9saW5rOiBpdGVtLmZyb250LFxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHR2aWRlb19kYXRhOiBudWxsLFxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRtZWRpYUxpc3QucHVzaCh7XHJcblx0XHRcdFx0XHRcdGlzX2ltYWdlOiB0cnVlLFxyXG5cdFx0XHRcdFx0XHRjb21tZW50X3RleHQ6IG51bGwsXHJcblx0XHRcdFx0XHRcdGltYWdlX2RhdGE6IHtcclxuXHRcdFx0XHRcdFx0XHRjYXB0aW9uX3RleHQ6IFwiQ2FyZCBzaWRlIEJcIixcclxuXHRcdFx0XHRcdFx0XHR0aHVtYl9saW5rOiBpdGVtLmJhY2ssXHJcblx0XHRcdFx0XHRcdFx0b3JpZ2luX2xpbms6IGl0ZW0uYmFjayxcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0dmlkZW9fZGF0YTogbnVsbCxcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcInZpZGVvXCI6XHJcblx0XHRcdFx0XHRtZWRpYUxpc3QucHVzaCh7XHJcblx0XHRcdFx0XHRcdGlzX2ltYWdlOiBmYWxzZSxcclxuXHRcdFx0XHRcdFx0Y29tbWVudF90ZXh0OiBudWxsLFxyXG5cdFx0XHRcdFx0XHRpbWFnZV9kYXRhOiBudWxsLFxyXG5cdFx0XHRcdFx0XHR2aWRlb19kYXRhOiB7XHJcblx0XHRcdFx0XHRcdFx0Y2FwdGlvbl90ZXh0OiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRcdHBvc3Rlcl9saW5rOiBcIlwiLFxyXG5cdFx0XHRcdFx0XHRcdHZpZGVvX2xpbms6IGl0ZW0udXJsLFxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFwiY29taWNcIjpcclxuXHRcdFx0XHRcdGl0ZW0udXJscy5mb3JFYWNoKCh1cmwpID0+IHtcclxuXHRcdFx0XHRcdFx0bWVkaWFMaXN0LnB1c2goe1xyXG5cdFx0XHRcdFx0XHRcdGlzX2ltYWdlOiB0cnVlLFxyXG5cdFx0XHRcdFx0XHRcdGNvbW1lbnRfdGV4dDogbnVsbCxcclxuXHRcdFx0XHRcdFx0XHRpbWFnZV9kYXRhOiB7XHJcblx0XHRcdFx0XHRcdFx0XHRjYXB0aW9uX3RleHQ6IFwiQ29taWMgcGFnZVwiLFxyXG5cdFx0XHRcdFx0XHRcdFx0dGh1bWJfbGluazogdXJsLFxyXG5cdFx0XHRcdFx0XHRcdFx0b3JpZ2luX2xpbms6IHVybCxcclxuXHRcdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRcdHZpZGVvX2RhdGE6IG51bGwsXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBNZWRpYURhdGEobWVkaWFMaXN0KS5tZWRpYUxpc3Q7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHN0YXRpYyBpc0ltZ2JveCA9ICh1cmw6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyXG5cdFx0cmV0dXJuIHVybC5pbmNsdWRlcyhcInMyLmltZ2JveC5jb20vXCIpO1xyXG5cdH07XHJcblxyXG5cdC8vIFx1NEUwRFx1N0JBMVx1NEVDMFx1NEU0OFx1N0M3Qlx1NTc4Qlx1NzY4NFx1OTRGRVx1NjNBNVx1RkYwQ1x1NzZGNFx1NjNBNVx1NEYyMFxyXG5cdHByaXZhdGUgc3RhdGljIGdldE9yaWdpVXJsID0gKFxyXG5cdFx0dXJsOiBzdHJpbmcsXHJcblx0XHRjbG91ZGZhcmVDRE46IHN0cmluZ1xyXG5cdCk6IHN0cmluZyA9PiB7XHJcblx0XHRyZXR1cm4gdXJsXHJcblx0XHRcdC5zcGxpdChcInxcIilcclxuXHRcdFx0Lm1hcCgobCkgPT4ge1xyXG5cdFx0XHRcdGwgPSB0aGlzLmlzSW1nYm94KHVybClcclxuXHRcdFx0XHRcdD8gbC5yZXBsYWNlKC90aHVtYnMyL2csIFwiaW1hZ2VzMlwiKS5yZXBsYWNlKC9fdFxcLi9nLCBcIl9vLlwiKVxyXG5cdFx0XHRcdFx0OiBsLnJlcGxhY2UoL3RoXFwuL2csIFwiXCIpLnJlcGxhY2UoL21kXFwuL2csIFwiXCIpO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5pc0ltZ2JveCh1cmwpXHJcblx0XHRcdFx0XHQ/IGAke2Nsb3VkZmFyZUNETn0/dXJsPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGwpfWBcclxuXHRcdFx0XHRcdDogbDtcclxuXHRcdFx0fSlcclxuXHRcdFx0LmpvaW4oXCJ8XCIpO1xyXG5cdH07XHJcblxyXG5cdHByaXZhdGUgc3RhdGljIGdldFRodW1iVXJsID0gKFxyXG5cdFx0dXJsOiBzdHJpbmcsXHJcblx0XHRjbG91ZGZhcmVDRE46IHN0cmluZ1xyXG5cdCk6IHN0cmluZyA9PiB7XHJcblx0XHRyZXR1cm4gdXJsXHJcblx0XHRcdC5zcGxpdChcInxcIilcclxuXHRcdFx0Lm1hcCgobCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmlzSW1nYm94KHVybClcclxuXHRcdFx0XHRcdD8gYCR7Y2xvdWRmYXJlQ0ROfT91cmw9JHtlbmNvZGVVUklDb21wb25lbnQobCl9YFxyXG5cdFx0XHRcdFx0OiBsO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQuam9pbihcInxcIik7XHJcblx0fTtcclxufVxyXG4iLCAiaW1wb3J0IHsgQmxvY2ssIEludHJvQ29udGVudCwgV29ya3NDb250ZW50IH0gZnJvbSBcInNyYy9kYXRhL3BhZ2UtZGF0YVwiO1xyXG5pbXBvcnQgeyByZW5kZXJNRCB9IGZyb20gXCJzcmMvdXRpbC91dGlsc1wiO1xyXG5pbXBvcnQgeyB0ZXh0IH0gZnJvbSBcInN0cmVhbS9jb25zdW1lcnNcIjtcclxuaW1wb3J0IHsgUHJvR2FsbGVyeVZpZXcgfSBmcm9tIFwiLi9wb3J0Zm9saW8tZ2FsbGVyeVwiO1xyXG5pbXBvcnQgeyBNZWRpYURhdGEsIFNyY01lZGlhRGF0YSB9IGZyb20gXCJzcmMvZGF0YS93b3JrLWRzYXRhXCI7XHJcbmltcG9ydCBNYXNvbnJ5IGZyb20gXCJtYXNvbnJ5LWxheW91dFwiO1xyXG5pbXBvcnQgaW1hZ2VzTG9hZGVkIGZyb20gXCJpbWFnZXNsb2FkZWRcIjtcclxuaW1wb3J0IHsgTm90aWNlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlSW50cm9CbG9jayA9IChcclxuXHRibG9jazogQmxvY2ssXHJcblx0YmxvY2tFbDogSFRNTERpdkVsZW1lbnQsXHJcblx0dmlldzogUHJvR2FsbGVyeVZpZXdcclxuKSA9PiB7XHJcblx0Y29uc3QgY29udGFpbmVyID0gYmxvY2tFbDtcclxuXHRjb25zdCBpZCA9IGJsb2NrLmlkO1xyXG5cdGNvbnN0IGludHJvOiBJbnRyb0NvbnRlbnQgPSBibG9jay5jb250ZW50IGFzIEludHJvQ29udGVudDtcclxuXHJcblx0Ly8gXHU3MjM2XHU1QkI5XHU1NjY4XHJcblx0Y29udGFpbmVyLnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKTtcclxuXHRjb250YWluZXIuYWRkQ2xhc3MoXCJJbnRyb1wiKTtcclxuXHJcblx0Ly8gXHU1OTM0XHU1NkZFXHJcblx0Y29udGFpbmVyXHJcblx0XHQuY3JlYXRlRGl2KFwiYmFubmVyXCIpXHJcblx0XHQuc2V0QXR0cmlidXRlKFxyXG5cdFx0XHRcInN0eWxlXCIsXHJcblx0XHRcdGBiYWNrZ3JvdW5kOiB1cmwoJyR7aW50cm8uYmFubmVyWzBdfScpIGNlbnRlci9jb3ZlciBuby1yZXBlYXQ7YFxyXG5cdFx0KTtcclxuXHJcblx0Ly8gXHU1OTM0XHU1MENGXHJcblx0Y29uc3QgYXZhdGFyRWwgPSBjb250YWluZXIuY3JlYXRlRGl2KFwiYXZhdGFyXCIpO1xyXG5cdGZvciAoY29uc3QgYXZhdGFyIG9mIGludHJvLmF2YXRhcnMpIHtcclxuXHRcdGF2YXRhckVsLmNyZWF0ZUVsKFwiaW1nXCIpLnNldEF0dHJpYnV0ZShcInNyY1wiLCBhdmF0YXIpO1xyXG5cdH1cclxuXHJcblx0Ly8gXHU1NDBEXHU1QjU3XHJcblx0Zm9yIChjb25zdCBuYW1lIG9mIGludHJvLm5hbWUpIHtcclxuXHRcdGNvbnRhaW5lci5jcmVhdGVTcGFuKHsgY2xzOiBcImNwYlwiLCB0ZXh0OiBuYW1lIH0pO1xyXG5cdH1cclxuXHJcblx0Y29uc3Qgb2ZmaWNpYWxMaW5rRWwgPSBjb250YWluZXIuY3JlYXRlRGl2KFwib2ZmaWNpYWwtbGlua1wiKTtcclxuXHRvZmZpY2lhbExpbmtFbC5jcmVhdGVTcGFuKFwibmFtZVwiKTtcclxuXHJcblx0Y29uc3QgdW5vZmZpY2lhbExpbmtFbCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoXCJ1bm9mZmljaWFsLWxpbmtcIik7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlTWRCbG9jayA9IChcclxuXHRibG9jazogQmxvY2ssXHJcblx0YmxvY2tFbDogSFRNTERpdkVsZW1lbnQsXHJcblx0dmlldzogUHJvR2FsbGVyeVZpZXdcclxuKSA9PiB7XHJcblx0Y29uc3QgbWRDb250ZW50ID0gYmxvY2suY29udGVudCBhcyBzdHJpbmc7XHJcblx0Y29uc3QgbWRFbGVtZW50ID0gYmxvY2tFbC5jcmVhdGVEaXYoXCJQcm9HYWxsZXJ5LU1EXCIpO1xyXG5cdHJlbmRlck1EKG1kQ29udGVudCwgbWRFbGVtZW50LCB2aWV3KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVXb3Jrc0Jsb2NrID0gKFxyXG5cdGJsb2NrOiBCbG9jayxcclxuXHRibG9ja0VsOiBIVE1MRGl2RWxlbWVudCxcclxuXHR2aWV3OiBQcm9HYWxsZXJ5Vmlld1xyXG4pID0+IHtcclxuXHRjb25zdCBjb250YWluZXIgPSBibG9ja0VsO1xyXG5cdGNvbnN0IGlkID0gYmxvY2suaWQ7XHJcblx0Y29uc3QgaW50cm86IFdvcmtzQ29udGVudCA9IGJsb2NrLmNvbnRlbnQgYXMgV29ya3NDb250ZW50O1xyXG5cclxuXHQvLyBcdTcyMzZcdTVCQjlcdTU2NjhcclxuXHRjb250YWluZXIuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xyXG5cdGNvbnRhaW5lci5hZGRDbGFzcyhcIldvcmtzXCIpO1xyXG5cdGNvbnRhaW5lci5hZGRDbGFzcyhcclxuXHRcdGludHJvLmNvbmZpZz8ubWFzb25yeSA9PT0gXCJjb2xcIiA/IFwibXNucnktY29sXCIgOiBcIm1zbnJ5LXJvd1wiXHJcblx0KTtcclxuXHJcblx0Ly8gTWVkaWFEYXRhLmZyb21Xb3Jrc0NvbnRlbnQoaW50cm8pLmZvckVhY2goKHNyY0RhdGEpID0+IHtcclxuXHQvLyBcdGNvbnN0IGl0ZW0gPSBjcmVhdGVJbWFnZShzcmNEYXRhLCBjb250YWluZXIpO1xyXG5cdC8vIFx0aWYgKCFpdGVtKSByZXR1cm47XHJcblxyXG5cdC8vIFx0aW1hZ2VzTG9hZGVkKGl0ZW0sICgpID0+IHtcclxuXHQvLyBcdFx0aXRlbS5jbGFzc0xpc3QucmVtb3ZlKFwibG9hZGluZy1tYXNrXCIpO1xyXG5cdC8vIFx0XHRpdGVtLmNsYXNzTGlzdC5hZGQoXCJpcy12aXNpYmxlXCIpO1xyXG5cdC8vIFx0XHRtc25yeS5hcHBlbmRlZChbaXRlbV0pO1xyXG5cdC8vIFx0XHRtc25yeS5sYXlvdXQoKTtcclxuXHQvLyBcdH0pO1xyXG5cdC8vIH0pO1xyXG5cclxuXHRjb25zdCBpdGVtczogSFRNTERpdkVsZW1lbnRbXSA9IFtdO1xyXG5cclxuXHQvLyBcdTUxNDhcdTUyMUJcdTVFRkFcdTYyNDBcdTY3MDlcdTU2RkVcdTcyNDcgRE9NXHJcblx0TWVkaWFEYXRhLmZyb21Xb3Jrc0NvbnRlbnQoaW50cm8pLmZvckVhY2goKHNyY0RhdGEpID0+IHtcclxuXHRcdGNvbnN0IGl0ZW0gPSBjcmVhdGVJbWFnZShzcmNEYXRhLCBjb250YWluZXIpO1xyXG5cdFx0aWYgKGl0ZW0pIGl0ZW1zLnB1c2goaXRlbSk7XHJcblx0fSk7XHJcblxyXG5cdC8vIFx1NTIxRFx1NTlDQlx1NTMxNiBNYXNvbnJ5XHJcblx0Y29uc3QgbXNucnkgPSBuZXcgTWFzb25yeShjb250YWluZXIsIHtcclxuXHRcdGl0ZW1TZWxlY3RvcjogXCIuaXRlbVwiLFxyXG5cdFx0Y29sdW1uV2lkdGg6IFwiLml0ZW1cIixcclxuXHRcdGd1dHRlcjogOCxcclxuXHRcdHRyYW5zaXRpb25EdXJhdGlvbjogXCIwLjhzXCIsXHJcblx0XHRob3Jpem9udGFsT3JkZXI6IHRydWUsIC8vIFx1NEZERFx1OEJDMVx1NjMwOSBET00gXHU5ODdBXHU1RThGXHU1RTAzXHU1QzQwXHJcblx0fSk7XHJcblxyXG5cdC8vIFx1N0I0OVx1NUY4NVx1NjI0MFx1NjcwOVx1NTZGRVx1NzI0N1x1NTJBMFx1OEY3RFx1NUI4Q1x1NjIxMFxyXG5cdGltYWdlc0xvYWRlZChjb250YWluZXIsICgpID0+IHtcclxuXHRcdGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuXHRcdFx0aXRlbS5jbGFzc0xpc3QucmVtb3ZlKFwibG9hZGluZy1tYXNrXCIpO1xyXG5cdFx0XHRpdGVtLmNsYXNzTGlzdC5hZGQoXCJpcy12aXNpYmxlXCIpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0bXNucnkubGF5b3V0KCk7XHJcblx0fSk7XHJcblxyXG5cdC8vIGltYWdlc0xvYWRlZChjb250YWluZXIsICgpID0+IHtcclxuXHQvLyBcdGNvbnN0IG1zbnJ5ID0gbmV3IE1hc29ucnkoY29udGFpbmVyLCB7XHJcblx0Ly8gXHRcdGl0ZW1TZWxlY3RvcjogXCIuaXRlbVwiLFxyXG5cdC8vIFx0XHRjb2x1bW5XaWR0aDogXCIuaXRlbVwiLFxyXG5cdC8vIFx0XHRndXR0ZXI6IDgsXHJcblx0Ly8gXHRcdHRyYW5zaXRpb25EdXJhdGlvbjogXCIwLjhzXCIsXHJcblx0Ly8gXHRcdGhvcml6b250YWxPcmRlcjogaW50cm8uY29uZmlnPy5tYXNvbnJ5ID09PSBcInJvd1wiLFxyXG5cdC8vIFx0fSk7XHJcblxyXG5cdC8vIFx0Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaXRlbVwiKS5mb3JFYWNoKChpdGVtKSA9PiB7XHJcblx0Ly8gXHRcdGl0ZW0ucmVtb3ZlQ2xhc3MoXCJsb2FkaW5nLW1hc2tcIik7IC8vIFx1NzlGQlx1OTY2NFx1NjI0MFx1NjcwOVx1NTJBMFx1OEY3RFx1OTA2RVx1N0Y2OVxyXG5cdC8vIFx0XHRpdGVtLmNsYXNzTGlzdC5hZGQoXCJpcy12aXNpYmxlXCIpO1xyXG5cdC8vIFx0XHRtc25yeS5hcHBlbmRlZChbaXRlbV0pO1xyXG5cdC8vIFx0fSk7XHJcblxyXG5cdC8vIFx0bXNucnkubGF5b3V0KCk7XHJcblxyXG5cdC8vIFx0bmV3IE5vdGljZShcIlx1NTZGRVx1NzI0N1x1NTJBMFx1OEY3RFx1NUI4Q1x1NjIxMFx1RkYwQ01hc29ucnkgXHU1MjFEXHU1OUNCXHU1MzE2XHU1QjhDXHU2MjEwXCIpO1xyXG5cdC8vIFx0Y29uc29sZS5sb2coXCJcdTU2RkVcdTcyNDdcdTUyQTBcdThGN0RcdTVCOENcdTYyMTBcdUZGMENNYXNvbnJ5IFx1NTIxRFx1NTlDQlx1NTMxNlx1NUI4Q1x1NjIxMFwiKTtcclxuXHQvLyB9KTtcclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZUltYWdlID0gKFxyXG5cdGl0ZW1EYXRhOiBTcmNNZWRpYURhdGEsXHJcblx0YmxvY2tFbDogSFRNTERpdkVsZW1lbnRcclxuKTogSFRNTERpdkVsZW1lbnQgfCB1bmRlZmluZWQgPT4ge1xyXG5cdGNvbnN0IGNvbnRhaW5lciA9IGJsb2NrRWwuY3JlYXRlRGl2KFwiaXRlbVwiKTtcclxuXHRjb25zdCBpbWFnZV9lbGVtID0gY29udGFpbmVyLmNyZWF0ZUVsKFwiaW1nXCIpO1xyXG5cdGNvbnN0IGltYWdlX2RhdGEgPSBpdGVtRGF0YS5pbWFnZV9kYXRhO1xyXG5cdGlmICghaW1hZ2VfZGF0YSkgcmV0dXJuO1xyXG5cclxuXHRjb25zdCBvcmlTcmMgPSBpbWFnZV9kYXRhLnRodW1iX2xpbms7XHJcblx0Y29uc3QgZm9udFNyYyA9IG9yaVNyYy5zcGxpdChcInxcIilbMF07XHJcblx0Y29uc3QgYmFja1NyYyA9IG9yaVNyYy5zcGxpdChcInxcIilbMV07XHJcblx0Y29uc3QgY2FwdGlvblRleHQgPSBpbWFnZV9kYXRhLmNhcHRpb25fdGV4dDtcclxuXHJcblx0Y29udGFpbmVyLmFkZENsYXNzKFwiZ3JpZC1pdGVtXCIpO1xyXG5cdGNvbnRhaW5lci5hZGRDbGFzcyhcImxvYWRpbmctbWFza1wiKTsgLy8gXHU4RkQ4XHU2NzJBXHU1MkEwXHU4RjdEXHU1QjhDXHU2MjEwXHJcblx0Y29udGFpbmVyLnNldEF0dHJpYnV0ZShcImRhdGEtc3JjXCIsIGZvbnRTcmMpO1xyXG5cdGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRodW1iXCIsIGZvbnRTcmMpO1xyXG5cdGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN1Yi1odG1sXCIsIGNhcHRpb25UZXh0KTtcclxuXHQvLyBjb250YWluZXIuc2V0QXR0cmlidXRlKFwiZGF0YS1uYW1lXCIsIGl0ZW1EYXRhLm5hbWUpO1xyXG5cdC8vIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJkYXRhLWZvbGRlclwiLCBpdGVtRGF0YS5uYW1lKTtcclxuXHJcblx0aW1hZ2VfZWxlbS5hZGRDbGFzcyhcImltYWdlXCIpO1xyXG5cdGltYWdlX2VsZW0uc2V0QXR0cmlidXRlKFwiZGF0YS1zcmNcIiwgZm9udFNyYyk7IC8vIFx1NjFEMlx1NTJBMFx1OEY3RFxyXG5cdC8vIGltYWdlRWxlbS5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgc2V0Q29udGV4dE1lbnVFdmVudExpc3RlbmVyKTtcclxuXHQvLyBpbWFnZUVsZW0uc2V0QXR0cmlidXRlKFwic3JjXCIsIFwicGxhY2Vob2xkZXIuanBnXCIpOyAvLyBcdTUzRUZcdThCQkVcdTdGNkVcdTUzNjBcdTRGNERcdTU2RkVcdTcyNDdcclxuXHRpbWFnZV9lbGVtLnNldEF0dHJpYnV0ZShcInNyY1wiLCBpbWFnZV9kYXRhLnRodW1iX2xpbmspO1xyXG5cclxuXHQvLyBcdTUzNjFcdTcyNDdcclxuXHRpZiAob3JpU3JjLmluY2x1ZGVzKFwifFwiKSkge1xyXG5cdFx0Y29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgYXR0cjogeyBpZDogXCJjYXJkLWNvcm5lci1tYXJrXCIgfSB9KTtcclxuXHRcdC8vIHNldEZsaXBDYXJkRXZlbnRMaXN0ZW5lcihpbWFnZUVsZW0sIGZvbnRTcmMsIGJhY2tTcmMpO1xyXG5cdH1cclxuXHJcblx0Ly8gXHU2NzJBXHU2MjU4XHU3QkExXHJcblx0Ly8gaWYgKG5vdGhvc3RlZCA9PT0gXCJ0cnVlXCIgJiYgY2hlY2tJc05vdEhvc3RlZChmb250U3JjKSkge1xyXG5cdC8vIFx0Y29udGFpbmVyLmNyZWF0ZUVsKFwiZGl2XCIsIHsgYXR0cjogeyBpZDogXCJ1bmhvc3RlZFwiIH0gfSk7XHJcblx0Ly8gfVxyXG5cclxuXHQvLyBzZXRDb25maWdJbmZvKGl0ZW1EYXRhLmNvbW1lbnRUZXh0LCBjb250YWluZXIpO1xyXG5cclxuXHQvLyBwcmVsb2FkSW1hZ2UoZm9udFNyYyk7XHJcblxyXG5cdC8vIHByZWxvYWRJdGVtcy5wdXNoKHsgZWw6IGltYWdlLCB1cmw6IGZvbnRTcmMgfSk7XHJcblx0Ly8gcHJlbG9hZEl0ZW1zLnB1c2goeyBlbDogaW1hZ2UsIHVybDogYmFja1NyYyB9KTtcclxuXHQvLyBpbWdFbGUuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgYGJhY2tncm91bmQtaW1hZ2U6IHVybCgnJHtmb250U3JjfScpO2ApO1xyXG5cdC8vIGlmICghaXNJbWFnZUxvYWRlZEZyb21DYWNoZShvcmlTcmMpKSByZXR1cm47XHJcblxyXG5cdHJldHVybiBjb250YWluZXI7XHJcbn07XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBLG1EQUFBQSxTQUFBO0FBUUEsS0FBRSxTQUFVLFFBQVEsU0FBVTtBQUc1QixVQUFLLE9BQU8sVUFBVSxjQUFjLE9BQU8sS0FBTTtBQUUvQyxlQUFRLE9BQVE7QUFBQSxNQUNsQixXQUFZLE9BQU9BLFdBQVUsWUFBWUEsUUFBTyxTQUFVO0FBRXhELFFBQUFBLFFBQU8sVUFBVSxRQUFRO0FBQUEsTUFDM0IsT0FBTztBQUVMLGVBQU8sWUFBWSxRQUFRO0FBQUEsTUFDN0I7QUFBQSxJQUVGLEdBQUcsT0FBTyxVQUFVLGNBQWMsU0FBUyxTQUFNLFdBQVc7QUFFNUQ7QUFFQSxlQUFTLFlBQVk7QUFBQSxNQUFDO0FBRXRCLFVBQUksUUFBUSxVQUFVO0FBRXRCLFlBQU0sS0FBSyxTQUFVLFdBQVcsVUFBVztBQUN6QyxZQUFLLENBQUMsYUFBYSxDQUFDLFVBQVc7QUFD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Y0FBYyxDQUFDO0FBQUEsSUFDdkQsR0FBRyxDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRUEsTUFBYyxlQUFlLE1BQW9CO0FBckRsRDtBQXNERSxRQUFJLENBQUM7QUFBTTtBQUNYLFFBQUksQ0FBQyxLQUFLLFNBQVMsU0FBUyxNQUFNLEtBQUssS0FBSyxjQUFjO0FBQU07QUFFaEUsVUFBTSxRQUFPLFVBQUssSUFBSSxVQUFVLG9CQUFvQiw2QkFBWSxNQUFuRCxtQkFBc0Q7QUFDbkUsUUFBSSxDQUFDO0FBQU07QUFFWCxVQUFNLEtBQUssYUFBYTtBQUFBLE1BQ3ZCLE1BQU07QUFBQSxNQUNOLE9BQU8sRUFBRSxNQUFNLEtBQUssS0FBSztBQUFBLE1BQ3pCLFFBQVE7QUFBQSxJQUNULENBQUM7QUFBQSxFQUNGO0FBQUEsRUFFQSxXQUFXO0FBQUEsRUFBQztBQUFBLEVBRVosTUFBTSxlQUFlO0FBQ3BCLFNBQUssV0FBVyxPQUFPO0FBQUEsTUFDdEIsQ0FBQztBQUFBLE1BQ0Q7QUFBQSxNQUNBLE1BQU0sS0FBSyxTQUFTO0FBQUEsSUFDckI7QUFBQSxFQUNEO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbEM7QUFDRDtBQUVBLElBQU0sdUJBQU4sY0FBbUMsa0NBQWlCO0FBQUEsRUFHbkQsWUFBWSxLQUFVLFFBQTBCO0FBQy9DLFVBQU0sS0FBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2Y7QUFBQSxFQUVBLFVBQWdCO0FBQ2YsVUFBTSxFQUFFLFlBQVksSUFBSTtBQUV4QixnQkFBWSxNQUFNO0FBRWxCLFFBQUkseUJBQVEsV0FBVyxFQUNyQixRQUFRLFlBQVksRUFDcEIsUUFBUSxlQUFlLEVBQ3ZCO0FBQUEsTUFBUSxDQUFDLFNBQ1QsS0FDRSxlQUFlLG1CQUFtQixFQUNsQyxTQUFTLEtBQUssT0FBTyxTQUFTLFNBQVMsRUFDdkMsU0FBUyxPQUFPLFVBQVU7QUFDMUIsYUFBSyxPQUFPLFNBQVMsWUFBWTtBQUNqQyxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsTUFDaEMsQ0FBQztBQUFBLElBQ0g7QUFBQSxFQUNGO0FBQ0Q7IiwKICAibmFtZXMiOiBbIm1vZHVsZSIsICJtb2R1bGUiLCAid2luZG93IiwgIm1vZHVsZSIsICJ3aW5kb3ciLCAibW9kdWxlIiwgIndpbmRvdyIsICJjb25zb2xlIiwgIm1vZHVsZSIsICJ3aW5kb3ciLCAibW9kdWxlIiwgIndpbmRvdyIsICJjb25zb2xlIiwgIkl0ZW0iLCAibW9kdWxlIiwgIndpbmRvdyIsICJNYXNvbnJ5IiwgInJlcXVpcmVfZXZfZW1pdHRlciIsICJtb2R1bGUiLCAibW9kdWxlIiwgIndpbmRvdyIsICJjb25zb2xlIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgIk1hc29ucnkiLCAiaW1hZ2VzTG9hZGVkIl0KfQo=
